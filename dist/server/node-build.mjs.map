{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/routes/ai-chat.ts","../../server/lib/relational-database.ts","../../server/lib/name-generator.ts","../../server/lib/adventure-utilities.ts","../../server/routes/adventure-generator.ts","../../server/routes/scene-generator.ts","../../server/lib/mythic-fate-chart.ts","../../server/routes/mythic-fate.ts","../../server/lib/mythic-meaning-table.ts","../../server/routes/mythic-meaning.ts","../../server/routes/session-data.ts","../../server/routes/creature-types.ts","../../server/lib/hex-map-generator.ts","../../server/routes/hex-map-generator.ts","../../server/lib/intelligent-name-generator.ts","../../server/lib/npc-generator.ts","../../server/lib/llm-instructions.ts","../../server/routes/npc-generator.ts","../../server/lib/steading-generator.ts","../../server/routes/steading-generator.ts","../../server/routes/villain-generator.ts","../../server/routes/name-generator.ts","../../server/lib/curse-generator.ts","../../server/routes/curse-generator.ts","../../server/lib/danger-generator.ts","../../server/routes/danger-generator.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\nimport { DemoResponse } from \"@shared/api\";\n\nexport const handleDemo: RequestHandler = (req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n};\n","import { RequestHandler } from \"express\";\nimport Anthropic from \"@anthropic-ai/sdk\";\nimport { AIChatRequest, AIChatResponse } from \"@shared/api\";\n\nconst anthropic = new Anthropic({\n  apiKey: process.env.ANTHROPIC_API_KEY,\n});\n\nexport const handleAIChat: RequestHandler = async (req, res) => {\n  const { message, context } = req.body as AIChatRequest;\n\n  try {\n    console.log(\"API Key present:\", !!process.env.ANTHROPIC_API_KEY);\n    console.log(\"API Key length:\", process.env.ANTHROPIC_API_KEY?.length);\n    console.log(\n      \"API Key starts with:\",\n      process.env.ANTHROPIC_API_KEY?.substring(0, 10),\n    );\n\n    if (!process.env.ANTHROPIC_API_KEY) {\n      throw new Error(\"ANTHROPIC_API_KEY environment variable is not set\");\n    }\n\n    const systemPrompt = `You are an AI Game Master for a solo Shadowdark TTRPG adventure using the Mythic GME system.\n\nCurrent Adventure Context:\n- Chaos Factor: ${context?.chaosFactor || 5}\n- Current Scene: ${context?.currentScene || \"Unknown\"}\n- Active Plot Threads: ${context?.activeThreads?.join(\", \") || \"None\"}\n\nYour Role:\n- Respond to player actions with dramatic, atmospheric descriptions\n- Use the Mythic GME system to determine outcomes when uncertain\n- Suggest dice rolls when appropriate (d20 for general actions, d100 for oracle questions)\n- Keep responses concise but evocative (2-3 sentences typically)\n- Maintain the dark, mysterious tone of Shadowdark\n- Never break character or reveal meta-game information\n- When uncertain about outcomes, suggest oracle questions or dice rolls\n\nPlayer's Action: \"${message}\"\n\nRespond as the GM would, describing what happens and asking for any necessary rolls or decisions.`;\n\n    const claudeResponse = await anthropic.messages.create({\n      model: \"claude-3-5-sonnet-20241022\",\n      max_tokens: 300,\n      temperature: 0.7,\n      system: systemPrompt,\n      messages: [\n        {\n          role: \"user\",\n          content: message,\n        },\n      ],\n    });\n\n    const responseText =\n      claudeResponse.content[0].type === \"text\"\n        ? claudeResponse.content[0].text\n        : \"I couldn't process that action. Please try again.\";\n\n    const response: AIChatResponse = {\n      response: responseText,\n      suggestions: [\n        \"Roll d20\",\n        \"Ask oracle question\",\n        \"Search area\",\n        \"Listen carefully\",\n      ],\n    };\n\n    res.json(response);\n  } catch (error) {\n    console.error(\"Claude API Error:\", error);\n\n    // Return a clear error instead of fallback\n    res.status(500).json({\n      success: false,\n      error: `AI Chat failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n    });\n    return;\n  }\n};\n","import { createClient, SupabaseClient } from \"@supabase/supabase-js\";\nimport type {\n  GameSession,\n  AdventureArc,\n  NPC,\n  Creature,\n  Faction,\n  Thread,\n  Clue,\n  Monster,\n  SessionMonster,\n} from \"../../shared/types\";\n\nclass RelationalDatabase {\n  public supabase: SupabaseClient | null = null;\n\n  constructor() {\n    this.initializeSupabase();\n  }\n\n  private initializeSupabase() {\n    const supabaseUrl = process.env.VITE_SUPABASE_URL;\n    const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;\n\n    if (supabaseUrl && supabaseKey) {\n      try {\n        this.supabase = createClient(supabaseUrl, supabaseKey);\n        console.log(\"Server Supabase initialized successfully\");\n      } catch (error) {\n        console.warn(\"Failed to initialize Supabase on server:\", error);\n      }\n    } else {\n      console.log(\n        \"Supabase credentials not found on server - database writes disabled\",\n      );\n    }\n  }\n\n  // === ADVENTURE ARC OPERATIONS ===\n\n  async writeAdventureArcToSession(\n    sessionId: string,\n    data: {\n      adventure_arc: any;\n      campaign_elements: any;\n    },\n  ): Promise<void> {\n    if (!this.supabase) {\n      console.log(\"Supabase not available - skipping adventure arc write\");\n      return;\n    }\n\n    try {\n      const { error } = await this.supabase.from(\"game_sessions\").upsert({\n        id: sessionId,\n        adventure_arc: data.adventure_arc,\n        campaign_elements: data.campaign_elements,\n        updated_at: new Date().toISOString(),\n      });\n\n      if (error) {\n        console.error(\"Failed to write adventure arc to session:\", error);\n      } else {\n        console.log(\"Adventure arc written to session successfully\");\n      }\n    } catch (error) {\n      console.error(\"Database write error for adventure arc:\", error);\n    }\n  }\n\n  async writeAdventureArc(\n    sessionId: string,\n    adventureData: {\n      bbeg_name: string;\n      bbeg_description: string;\n      bbeg_motivation: string;\n      bbeg_hook: string;\n      high_tower_surprise: string;\n      minion_monster_id?: string;\n    },\n  ): Promise<string | null> {\n    if (!this.supabase) {\n      console.log(\"Supabase not available - skipping adventure arc write\");\n      return null;\n    }\n\n    try {\n      const adventureArcId = `arc_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n      const { error } = await this.supabase.from(\"adventure_arcs\").insert({\n        id: adventureArcId,\n        session_id: sessionId,\n        ...adventureData,\n      });\n\n      if (error) {\n        console.error(\"Failed to write adventure arc to database:\", error);\n        return null;\n      }\n\n      console.log(\"Adventure arc written to database successfully\");\n      return adventureArcId;\n    } catch (error) {\n      console.error(\"Database write error for adventure arc:\", error);\n      return null;\n    }\n  }\n\n  // === NPC OPERATIONS ===\n\n  async addNPCs(\n    sessionId: string,\n    npcs: Omit<NPC, \"session_id\">[],\n  ): Promise<void> {\n    if (!this.supabase || npcs.length === 0) return;\n\n    try {\n      const npcData = npcs.map((npc) => ({\n        ...npc,\n        session_id: sessionId,\n      }));\n\n      const { error } = await this.supabase.from(\"npcs\").insert(npcData);\n\n      if (error) {\n        console.error(\"Failed to add NPCs to database:\", error);\n      } else {\n        console.log(`Added ${npcs.length} NPCs to database`);\n      }\n    } catch (error) {\n      console.error(\"Database write error for NPCs:\", error);\n    }\n  }\n\n  // === CREATURE OPERATIONS ===\n\n  async addCreatures(\n    sessionId: string,\n    creatures: Omit<Creature, \"session_id\">[],\n  ): Promise<void> {\n    if (!this.supabase || creatures.length === 0) return;\n\n    try {\n      const creatureData = creatures.map((creature) => ({\n        ...creature,\n        session_id: sessionId,\n      }));\n\n      const { error } = await this.supabase\n        .from(\"creatures\")\n        .insert(creatureData);\n\n      if (error) {\n        console.error(\"Failed to add creatures to database:\", error);\n      } else {\n        console.log(`Added ${creatures.length} creatures to database`);\n      }\n    } catch (error) {\n      console.error(\"Database write error for creatures:\", error);\n    }\n  }\n\n  // === FACTION OPERATIONS ===\n\n  async addFactions(\n    sessionId: string,\n    factions: Omit<Faction, \"session_id\">[],\n  ): Promise<void> {\n    if (!this.supabase || factions.length === 0) return;\n\n    try {\n      const factionData = factions.map((faction) => ({\n        ...faction,\n        session_id: sessionId,\n      }));\n\n      const { error } = await this.supabase\n        .from(\"factions\")\n        .insert(factionData);\n\n      if (error) {\n        console.error(\"Failed to add factions to database:\", error);\n      } else {\n        console.log(`Added ${factions.length} factions to database`);\n      }\n    } catch (error) {\n      console.error(\"Database write error for factions:\", error);\n    }\n  }\n\n  // === THREAD OPERATIONS ===\n\n  async addThreads(\n    sessionId: string,\n    threads: Omit<Thread, \"session_id\">[],\n  ): Promise<void> {\n    if (!this.supabase || threads.length === 0) return;\n\n    try {\n      const threadData = threads.map((thread) => ({\n        ...thread,\n        session_id: sessionId,\n      }));\n\n      const { error } = await this.supabase.from(\"threads\").insert(threadData);\n\n      if (error) {\n        console.error(\"Failed to add threads to database:\", error);\n      } else {\n        console.log(`Added ${threads.length} threads to database`);\n      }\n    } catch (error) {\n      console.error(\"Database write error for threads:\", error);\n    }\n  }\n\n  // === CLUE OPERATIONS ===\n\n  async addClues(\n    sessionId: string,\n    clues: Omit<Clue, \"session_id\">[],\n  ): Promise<void> {\n    if (!this.supabase || clues.length === 0) return;\n\n    try {\n      const clueData = clues.map((clue) => ({\n        ...clue,\n        session_id: sessionId,\n      }));\n\n      const { error } = await this.supabase.from(\"clues\").insert(clueData);\n\n      if (error) {\n        console.error(\"Failed to add clues to database:\", error);\n      } else {\n        console.log(`Added ${clues.length} clues to database`);\n      }\n    } catch (error) {\n      console.error(\"Database write error for clues:\", error);\n    }\n  }\n\n  // === MONSTER OPERATIONS ===\n\n  async addCustomMonster(\n    monster: Omit<Monster, \"created_at\" | \"updated_at\">,\n  ): Promise<string | null> {\n    if (!this.supabase) return null;\n\n    try {\n      const { data, error } = await this.supabase\n        .from(\"monsters\")\n        .insert({\n          ...monster,\n          source: \"custom\",\n        })\n        .select(\"id\")\n        .single();\n\n      if (error) {\n        console.error(\"Failed to add custom monster:\", error);\n        return null;\n      }\n\n      return data.id;\n    } catch (error) {\n      console.error(\"Database write error for custom monster:\", error);\n      return null;\n    }\n  }\n\n  async addSessionMonster(\n    sessionId: string,\n    monster: Omit<SessionMonster, \"session_id\" | \"created_at\" | \"updated_at\">,\n  ): Promise<void> {\n    if (!this.supabase) return;\n\n    try {\n      const { error } = await this.supabase.from(\"session_monsters\").insert({\n        ...monster,\n        session_id: sessionId,\n      });\n\n      if (error) {\n        console.error(\"Failed to add session monster:\", error);\n      } else {\n        console.log(\"Session monster added to database\");\n      }\n    } catch (error) {\n      console.error(\"Database write error for session monster:\", error);\n    }\n  }\n\n  // === BATCH OPERATIONS ===\n\n  async addHiddenCampaignElements(\n    sessionId: string,\n    adventureArcId: string,\n    elements: {\n      npcs?: Omit<NPC, \"session_id\">[];\n      creatures?: Omit<Creature, \"session_id\">[];\n      factions?: Omit<Faction, \"session_id\">[];\n      threads?: Omit<Thread, \"session_id\">[];\n      clues?: Omit<Clue, \"session_id\">[];\n    },\n  ): Promise<void> {\n    if (!this.supabase) return;\n\n    try {\n      // Add adventure_arc_id to elements that are related to the main story\n      const {\n        npcs = [],\n        creatures = [],\n        factions = [],\n        threads = [],\n        clues = [],\n      } = elements;\n\n      // Add NPCs (with adventure_arc_id for lieutenants)\n      if (npcs.length > 0) {\n        await this.addNPCs(\n          sessionId,\n          npcs.map((npc) => ({\n            ...npc,\n            adventure_arc_id:\n              npc.role === \"lieutenant\" || npc.role === \"bbeg\"\n                ? adventureArcId\n                : undefined,\n          })),\n        );\n      }\n\n      // Add creatures (BBEG, lieutenants, minions)\n      if (creatures.length > 0) {\n        await this.addCreatures(sessionId, creatures);\n      }\n\n      // Add factions (linked to adventure arc)\n      if (factions.length > 0) {\n        await this.addFactions(\n          sessionId,\n          factions.map((faction) => ({\n            ...faction,\n            adventure_arc_id: adventureArcId,\n          })),\n        );\n      }\n\n      // Add threads (linked to adventure arc if main story related)\n      if (threads.length > 0) {\n        await this.addThreads(\n          sessionId,\n          threads.map((thread) => ({\n            ...thread,\n            adventure_arc_id: adventureArcId,\n          })),\n        );\n      }\n\n      // Add clues (linked to adventure arc)\n      if (clues.length > 0) {\n        await this.addClues(\n          sessionId,\n          clues.map((clue) => ({\n            ...clue,\n            adventure_arc_id: adventureArcId,\n          })),\n        );\n      }\n\n      console.log(\"Hidden campaign elements added to database\");\n    } catch (error) {\n      console.error(\"Database write error for campaign elements:\", error);\n    }\n  }\n\n  // === SESSION OPERATIONS ===\n\n  async updateChaosFactor(\n    sessionId: string,\n    chaosFactor: number,\n  ): Promise<void> {\n    if (!this.supabase) return;\n\n    try {\n      const { error } = await this.supabase.from(\"game_sessions\").upsert(\n        {\n          id: sessionId,\n          chaos_factor: chaosFactor,\n          updated_at: new Date().toISOString(),\n        },\n        { onConflict: \"id\" },\n      );\n\n      if (error) {\n        console.error(\"Failed to update chaos factor:\", error);\n      }\n    } catch (error) {\n      console.error(\"Database write error for chaos factor:\", error);\n    }\n  }\n\n  async updateAdventureSettings(\n    sessionId: string,\n    settings: {\n      shadowdark_theme?: string;\n      shadowdark_tone?: string;\n      shadowdark_voice?: string;\n    },\n  ): Promise<void> {\n    if (!this.supabase) return;\n\n    try {\n      const { error } = await this.supabase.from(\"game_sessions\").upsert(\n        {\n          id: sessionId,\n          ...settings,\n          updated_at: new Date().toISOString(),\n        },\n        { onConflict: \"id\" },\n      );\n\n      if (error) {\n        console.error(\"Failed to update adventure settings:\", error);\n      }\n    } catch (error) {\n      console.error(\"Database write error for adventure settings:\", error);\n    }\n  }\n\n  // === UTILITY ===\n\n  isAvailable(): boolean {\n    return this.supabase !== null;\n  }\n}\n\n// Create singleton instance\nexport const relationalDB = new RelationalDatabase();\n","/**\n * Name Generator (TypeScript)\n * Generates fantasy names based on different language/style categories\n */\n\n// Level 1: Evil\nconst EVIL_START = [\n  \"Sk\", \"Zu\", \"Ve\", \"Ul\", \"Kr\", \"Gr\", \"Th\", \"Dr\", \"Bl\", \"Sh\",\n  \"Vy\", \"Ky\", \"Ny\", \"Py\", \"Ry\", \"Sy\", \"Ty\", \"Wy\", \"Zy\", \"Fy\",\n  \"Mal\", \"Vex\", \"Mor\", \"Nyx\", \"Zar\", \"Bla\", \"Grim\", \"Drak\"\n];\n\nconst EVIL_MIDDLE = [\n  \"yu\", \"sky\", \"ly\", \"pu\", \"ye\", \"ed\", \"ud\", \"sk\", \"or\", \"ar\",\n  \"ur\", \"ir\", \"er\", \"ak\", \"ok\", \"uk\", \"ik\", \"ek\", \"oz\", \"az\",\n  \"oth\", \"arn\", \"ugh\", \"okh\", \"aal\", \"uur\"\n];\n\nconst EVIL_END = [\n  \"d\", \"e\", \"k\", \"sk\", \"st\", \"rl\", \"th\", \"nd\", \"rk\", \"sh\",\n  \"gr\", \"bl\", \"dr\", \"kr\", \"vd\", \"yd\", \"zd\", \"fd\", \"ld\", \"md\",\n  \"goth\", \"mor\", \"oth\", \"ugh\", \"ash\", \"arn\"\n];\n\n// Level 2: Celtic (Gaelic)\nconst CELTIC_START = [\n  \"Ai\", \"Bri\", \"Cai\", \"Dai\", \"Eo\", \"Fio\", \"Gwy\", \"Llo\", \"Mai\", \"Nia\",\n  \"Oi\", \"Pry\", \"Rhy\", \"Sia\", \"Tei\", \"Una\", \"Bla\", \"Cae\", \"Dwy\", \"Gla\",\n  \"Mor\", \"Bre\", \"Cer\", \"Dun\", \"Fen\", \"Gal\", \"Kil\", \"Llan\", \"Tre\"\n];\n\nconst CELTIC_MIDDLE = [\n  \"an\", \"wy\", \"ll\", \"dd\", \"ff\", \"rh\", \"th\", \"ch\", \"oe\", \"ae\",\n  \"ei\", \"ou\", \"ia\", \"io\", \"ua\", \"ri\", \"gu\", \"gw\", \"dy\", \"fy\",\n  \"lyn\", \"wen\", \"gar\", \"mor\", \"dor\", \"tan\", \"van\", \"han\"\n];\n\nconst CELTIC_END = [\n  \"an\", \"wy\", \"dd\", \"ff\", \"th\", \"ch\", \"wen\", \"lyn\", \"gan\", \"van\",\n  \"dor\", \"mor\", \"gar\", \"tan\", \"han\", \"lan\", \"ron\", \"eon\", \"aig\", \"ais\",\n  \"aith\", \"aidh\", \"ough\", \"edd\", \"ydd\", \"wyr\"\n];\n\n// Level 3: Nordic (Old Norse)\nconst NORDIC_START = [\n  \"Bj\", \"Ey\", \"Gu\", \"Ha\", \"In\", \"Jo\", \"Kj\", \"Lo\", \"Mag\", \"Ol\",\n  \"Ra\", \"Sig\", \"Th\", \"Ulf\", \"Vig\", \"As\", \"Br\", \"Dag\", \"Eg\", \"Fr\",\n  \"Grim\", \"Heid\", \"Ing\", \"Kol\", \"Leif\", \"Rag\", \"Rune\", \"Stein\", \"Thor\", \"Tor\"\n];\n\nconst NORDIC_MIDDLE = [\n  \"ar\", \"er\", \"ir\", \"or\", \"ur\", \"an\", \"en\", \"in\", \"on\", \"un\",\n  \"stein\", \"bjorn\", \"grim\", \"ulf\", \"thor\", \"gar\", \"mund\", \"rik\", \"berg\", \"dahl\",\n  \"strand\", \"vik\", \"helm\", \"bald\", \"finn\", \"mark\"\n];\n\nconst NORDIC_END = [\n  \"son\", \"sen\", \"sson\", \"dottir\", \"ulf\", \"bjorn\", \"gar\", \"mund\", \"rik\", \"stein\",\n  \"berg\", \"dahl\", \"strand\", \"vik\", \"helm\", \"bald\", \"finn\", \"mark\", \"thor\", \"grim\",\n  \"ar\", \"er\", \"ir\", \"or\", \"ur\", \"yn\", \"en\", \"an\"\n];\n\n// Level 4: Germanic\nconst GERMANIC_START = [\n  \"Ad\", \"Ber\", \"Con\", \"Die\", \"Eck\", \"Fri\", \"Ger\", \"Hei\", \"Ing\", \"Kai\",\n  \"Lud\", \"Man\", \"Nor\", \"Ot\", \"Rei\", \"Sig\", \"Thi\", \"Ulf\", \"Wal\", \"Wil\",\n  \"Brun\", \"Ernst\", \"Gott\", \"Hart\", \"Karl\", \"Rich\", \"Wolf\"\n];\n\nconst GERMANIC_MIDDLE = [\n  \"hard\", \"bert\", \"helm\", \"mund\", \"rich\", \"wald\", \"fried\", \"grim\", \"bold\", \"mar\",\n  \"win\", \"bald\", \"gang\", \"bert\", \"hold\", \"brand\", \"gar\", \"ward\", \"mann\", \"wolf\"\n];\n\nconst GERMANIC_END = [\n  \"rich\", \"bert\", \"fried\", \"mund\", \"wald\", \"helm\", \"hard\", \"bold\", \"bald\", \"brand\",\n  \"gar\", \"ward\", \"mann\", \"wolf\", \"grim\", \"win\", \"mar\", \"gang\", \"hold\", \"hart\"\n];\n\n// Level 5: Latin\nconst LATIN_START = [\n  \"Aur\", \"Bel\", \"Cas\", \"Dom\", \"Emp\", \"Fab\", \"Gra\", \"Hon\", \"Imp\", \"Jul\",\n  \"Lac\", \"Mag\", \"Nob\", \"Oct\", \"Pal\", \"Qui\", \"Reg\", \"Sev\", \"Tit\", \"Urb\",\n  \"Val\", \"Max\", \"Dec\", \"Fla\", \"Cor\", \"Mar\", \"Vic\", \"Luc\"\n];\n\nconst LATIN_MIDDLE = [\n  \"us\", \"ius\", \"ulus\", \"anus\", \"inus\", \"onus\", \"enus\", \"arius\", \"ensis\", \"icus\",\n  \"tius\", \"lius\", \"rius\", \"sius\", \"ticus\", \"vius\", \"dius\", \"pius\", \"mius\", \"nius\"\n];\n\nconst LATIN_END = [\n  \"us\", \"ius\", \"anus\", \"inus\", \"icus\", \"orus\", \"arus\", \"erus\", \"urus\", \"etus\",\n  \"atus\", \"itus\", \"otus\", \"utus\", \"ensis\", \"aris\", \"oris\", \"uris\", \"eris\", \"iris\"\n];\n\n// Level 6: Ancient Greek\nconst GREEK_START = [\n  \"Al\", \"Ar\", \"Bry\", \"Cl\", \"De\", \"Eu\", \"Hy\", \"Id\", \"Ly\", \"Me\",\n  \"Ni\", \"Ol\", \"Ph\", \"Rh\", \"St\", \"Th\", \"Xe\", \"Zy\", \"An\", \"Ap\",\n  \"Dio\", \"Her\", \"Ath\", \"Dem\", \"Hel\", \"Neo\", \"Pan\", \"Soc\"\n];\n\nconst GREEK_MIDDLE = [\n  \"an\", \"ar\", \"as\", \"at\", \"es\", \"is\", \"os\", \"us\", \"yn\", \"yr\",\n  \"kles\", \"phon\", \"dor\", \"krat\", \"phil\", \"theo\", \"gon\", \"arch\", \"sth\", \"mach\"\n];\n\nconst GREEK_END = [\n  \"es\", \"is\", \"os\", \"us\", \"as\", \"on\", \"ys\", \"ax\", \"ex\", \"ix\",\n  \"kles\", \"phon\", \"dor\", \"krat\", \"phil\", \"theo\", \"gon\", \"arch\", \"tes\", \"des\"\n];\n\n// Level 7: Slavic\nconst SLAVIC_START = [\n  \"Sv\", \"Mir\", \"Dus\", \"Bor\", \"Vlad\", \"Kat\", \"Nik\", \"Olg\", \"Pav\", \"Rad\",\n  \"Yar\", \"Zor\", \"Lud\", \"Mil\", \"Nat\", \"Ost\", \"Pet\", \"Rus\", \"Stan\", \"Tad\",\n  \"Bog\", \"Dra\", \"Gos\", \"Kaz\", \"Lyub\", \"Raz\", \"Slav\", \"Voj\", \"Zdan\"\n];\n\nconst SLAVIC_MIDDLE = [\n  \"ya\", \"ye\", \"lo\", \"va\", \"mi\", \"ro\", \"sla\", \"to\", \"dra\", \"ka\",\n  \"li\", \"na\", \"po\", \"ra\", \"si\", \"ta\", \"vi\", \"za\", \"bo\", \"du\",\n  \"mir\", \"slav\", \"dan\", \"mil\", \"rad\", \"bog\"\n];\n\nconst SLAVIC_END = [\n  \"ov\", \"a\", \"in\", \"ka\", \"la\", \"mir\", \"slav\", \"yev\", \"ich\", \"ko\",\n  \"na\", \"or\", \"ski\", \"va\", \"yan\", \"zin\", \"dor\", \"gar\", \"len\", \"nov\",\n  \"ek\", \"ak\", \"uk\", \"ik\"\n];\n\n// Level 8: Arabic/Persian\nconst ARABIC_START = [\n  \"Ab\", \"Al\", \"As\", \"Da\", \"Fa\", \"Ha\", \"Ib\", \"Ja\", \"Ka\", \"Ma\",\n  \"Na\", \"Om\", \"Ra\", \"Sa\", \"Ta\", \"Wa\", \"Ya\", \"Za\", \"Kh\", \"Gh\",\n  \"Mah\", \"Rah\", \"Sar\", \"Tar\", \"Ash\", \"Bah\", \"Dar\", \"Far\", \"Gar\", \"Har\"\n];\n\nconst ARABIC_MIDDLE = [\n  \"al\", \"ar\", \"as\", \"an\", \"am\", \"ah\", \"ad\", \"af\", \"ag\", \"aj\",\n  \"mad\", \"had\", \"sad\", \"fad\", \"lah\", \"rah\", \"mah\", \"dah\", \"shah\", \"kah\"\n];\n\nconst ARABIC_END = [\n  \"ad\", \"af\", \"ah\", \"al\", \"am\", \"an\", \"ar\", \"as\", \"at\", \"az\",\n  \"mad\", \"had\", \"sad\", \"fad\", \"lah\", \"rah\", \"mah\", \"dah\", \"shah\", \"kah\",\n  \"din\", \"sir\", \"mir\", \"tar\"\n];\n\n// Level 9: Finnish\nconst FINNISH_START = [\n  \"Ai\", \"Ee\", \"Il\", \"Kal\", \"Lai\", \"Mik\", \"Nie\", \"Oi\", \"Pek\", \"Rai\",\n  \"Sii\", \"Tai\", \"Uol\", \"Vai\", \"Yli\", \"Aki\", \"Esa\", \"Jaa\", \"Kaa\", \"Laa\",\n  \"Maa\", \"Naa\", \"Paa\", \"Raa\", \"Saa\", \"Taa\", \"Vaa\"\n];\n\nconst FINNISH_MIDDLE = [\n  \"ki\", \"ko\", \"ka\", \"ke\", \"ku\", \"li\", \"lo\", \"la\", \"le\", \"lu\",\n  \"mi\", \"mo\", \"ma\", \"me\", \"mu\", \"ni\", \"no\", \"na\", \"ne\", \"nu\",\n  \"kki\", \"lli\", \"mmi\", \"nni\", \"ppi\", \"tti\", \"kka\", \"lla\", \"mma\", \"nna\"\n];\n\nconst FINNISH_END = [\n  \"nen\", \"inen\", \"ainen\", \"anen\", \"kka\", \"lla\", \"mma\", \"nna\", \"ppa\", \"tta\",\n  \"ki\", \"ko\", \"ka\", \"ke\", \"ku\", \"li\", \"lo\", \"la\", \"le\", \"lu\",\n  \"sto\", \"nen\", \"ken\", \"sen\", \"ten\"\n];\n\n// Level 10: Basque\nconst BASQUE_START = [\n  \"Ait\", \"Bel\", \"Ek\", \"Ga\", \"Har\", \"Ib\", \"Jox\", \"Kol\", \"Lar\", \"Mit\",\n  \"Nak\", \"Oin\", \"Pat\", \"Rud\", \"Sab\", \"Txe\", \"Urd\", \"Xab\", \"Yon\", \"Zur\",\n  \"And\", \"Ber\", \"Deb\", \"Egi\", \"Fer\", \"Goi\", \"Ira\", \"Leh\"\n];\n\nconst BASQUE_MIDDLE = [\n  \"ar\", \"er\", \"ir\", \"or\", \"ur\", \"ai\", \"ei\", \"oi\", \"au\", \"eu\",\n  \"tx\", \"tz\", \"rr\", \"ll\", \"dd\", \"kk\", \"tt\", \"pp\", \"ss\", \"nn\",\n  \"eta\", \"arra\", \"erre\", \"uri\"\n];\n\nconst BASQUE_END = [\n  \"a\", \"e\", \"i\", \"o\", \"u\", \"z\", \"x\", \"k\", \"n\", \"r\",\n  \"tx\", \"tz\", \"rr\", \"ll\", \"eta\", \"arra\", \"erre\", \"uri\", \"tegi\", \"degi\"\n];\n\n// Level 11: Elvish (Tolkien-inspired)\nconst ELVISH_START = [\n  \"El\", \"Ar\", \"Fin\", \"Gal\", \"Leg\", \"Thran\", \"Mir\", \"Lor\", \"Ae\", \"Ce\",\n  \"Fe\", \"Gla\", \"Ha\", \"Il\", \"La\", \"Ma\", \"Na\", \"Oro\", \"Quen\", \"Sil\",\n  \"Gil\", \"Cel\", \"Elu\", \"Lin\", \"Nim\", \"Tar\", \"Eru\"\n];\n\nconst ELVISH_MIDDLE = [\n  \"en\", \"ion\", \"ad\", \"or\", \"el\", \"ith\", \"ael\", \"aur\", \"eor\", \"ian\",\n  \"lor\", \"mir\", \"nor\", \"ril\", \"thar\", \"uin\", \"wen\", \"yar\", \"zir\", \"dor\",\n  \"rond\", \"duin\", \"goth\", \"moth\", \"neth\", \"reth\"\n];\n\nconst ELVISH_END = [\n  \"dor\", \"las\", \"wen\", \"ril\", \"thar\", \"ion\", \"ael\", \"aur\", \"eor\", \"ian\",\n  \"lor\", \"mir\", \"nor\", \"del\", \"fel\", \"gil\", \"hel\", \"kel\", \"mel\", \"nel\",\n  \"rond\", \"duin\", \"goth\", \"moth\", \"neth\", \"reth\", \"eth\", \"ith\", \"oth\"\n];\n\n// Level 12: Draconic\nconst DRACONIC_START = [\n  \"Tha\", \"Bah\", \"Vor\", \"Sar\", \"Kri\", \"Dra\", \"Zar\", \"Gha\", \"Mor\", \"Ash\",\n  \"Pyrr\", \"Igna\", \"Umbr\", \"Terr\", \"Aqua\", \"Vent\", \"Lumi\", \"Tene\", \"Glaci\", \"Fulg\"\n];\n\nconst DRACONIC_MIDDLE = [\n  \"mat\", \"kul\", \"vor\", \"thar\", \"rax\", \"nax\", \"goth\", \"moth\", \"roth\", \"zoth\",\n  \"prax\", \"krex\", \"thex\", \"vex\", \"hex\", \"rex\", \"lex\", \"nex\"\n];\n\nconst DRACONIC_END = [\n  \"rax\", \"nax\", \"goth\", \"moth\", \"roth\", \"zoth\", \"prax\", \"krex\", \"thex\", \"vex\",\n  \"hex\", \"rex\", \"lex\", \"nex\", \"thar\", \"khar\", \"ghar\", \"vhar\"\n];\n\n// Level 13: Primordial\nconst PRIMORDIAL_START = [\n  \"Aer\", \"Aqu\", \"Igni\", \"Terr\", \"Umbr\", \"Lumi\", \"Glaci\", \"Fulg\", \"Vent\", \"Sil\",\n  \"Cael\", \"Abys\", \"Ethr\", \"Void\", \"Prim\", \"Elem\", \"Flux\", \"Ess\"\n];\n\nconst PRIMORDIAL_MIDDLE = [\n  \"is\", \"us\", \"ar\", \"or\", \"al\", \"el\", \"il\", \"ul\", \"yn\", \"an\",\n  \"oth\", \"ith\", \"eth\", \"uth\", \"ath\", \"oss\", \"iss\", \"ess\", \"uss\", \"ass\"\n];\n\nconst PRIMORDIAL_END = [\n  \"oss\", \"iss\", \"ess\", \"uss\", \"ass\", \"oth\", \"ith\", \"eth\", \"uth\", \"ath\",\n  \"os\", \"is\", \"es\", \"us\", \"as\", \"ar\", \"or\", \"al\", \"el\", \"il\"\n];\n\n// Level 14: Infernal\nconst INFERNAL_START = [\n  \"Bel\", \"Dis\", \"Mal\", \"Lev\", \"Baa\", \"Ash\", \"Mol\", \"Nerg\", \"Set\", \"Bah\",\n  \"Zeb\", \"Mam\", \"Bel\", \"Ast\", \"Deu\", \"Phl\", \"Bif\", \"Ose\", \"Amy\", \"Ori\"\n];\n\nconst INFERNAL_MIDDLE = [\n  \"ze\", \"pha\", \"mon\", \"goth\", \"moth\", \"roth\", \"zoth\", \"leth\", \"neth\", \"seth\",\n  \"bub\", \"baal\", \"zar\", \"gar\", \"har\", \"var\", \"dar\", \"tar\"\n];\n\nconst INFERNAL_END = [\n  \"oth\", \"eth\", \"uth\", \"ith\", \"ath\", \"eus\", \"ius\", \"ous\", \"ael\", \"iel\",\n  \"bub\", \"baal\", \"zar\", \"gar\", \"har\", \"var\", \"dar\", \"tar\", \"goth\", \"moth\"\n];\n\n// Level 15: Anglo-Saxon\nconst ANGLO_START = [\n  \"Æth\", \"Ead\", \"Alf\", \"Beo\", \"Cyn\", \"Dun\", \"Edg\", \"Fre\", \"God\", \"Her\",\n  \"Ing\", \"Leo\", \"Mund\", \"Off\", \"Red\", \"Sig\", \"Theod\", \"Wig\", \"Wulf\", \"Ælf\",\n  \"Beorn\", \"Cuth\", \"Ead\", \"Gar\", \"Hild\", \"Os\", \"Wil\"\n];\n\nconst ANGLO_MIDDLE = [\n  \"win\", \"mund\", \"ric\", \"stan\", \"wald\", \"frith\", \"gar\", \"helm\", \"sige\", \"weard\",\n  \"beald\", \"cild\", \"dred\", \"ferth\", \"gund\", \"heard\", \"laf\", \"noth\", \"ræd\", \"swith\"\n];\n\nconst ANGLO_END = [\n  \"red\", \"gar\", \"wulf\", \"helm\", \"sige\", \"weard\", \"beald\", \"cild\", \"dred\", \"ferth\",\n  \"gund\", \"heard\", \"laf\", \"noth\", \"ræd\", \"swith\", \"bert\", \"frid\", \"mund\", \"ric\"\n];\n\n// Level 16: Steppe Nomad (Mongolian/Turkish)\nconst STEPPE_START = [\n  \"Bat\", \"Che\", \"Dal\", \"Gan\", \"Kha\", \"Mun\", \"Nor\", \"Ork\", \"Qar\", \"Sub\",\n  \"Tem\", \"Ulz\", \"Yam\", \"Zul\", \"Bog\", \"Dor\", \"Gen\", \"Jem\", \"Kul\", \"Mog\"\n];\n\nconst STEPPE_MIDDLE = [\n  \"khan\", \"gul\", \"bur\", \"dar\", \"gan\", \"hun\", \"jal\", \"kar\", \"lun\", \"mur\",\n  \"nar\", \"ool\", \"pal\", \"qul\", \"sur\", \"tul\", \"uur\", \"val\", \"yal\", \"zul\"\n];\n\nconst STEPPE_END = [\n  \"khan\", \"gul\", \"bur\", \"dar\", \"gan\", \"hun\", \"jal\", \"kar\", \"lun\", \"mur\",\n  \"nar\", \"ool\", \"pal\", \"qul\", \"sur\", \"tul\", \"uur\", \"val\", \"yal\", \"zul\"\n];\n\n// Level 17: Ancient Egyptian\nconst EGYPTIAN_START = [\n  \"Akh\", \"Ank\", \"Anu\", \"Ato\", \"Hap\", \"Hor\", \"Isi\", \"Kha\", \"Nef\", \"Osi\",\n  \"Pta\", \"Ra\", \"Set\", \"Tho\", \"Uto\", \"Ama\", \"Ben\", \"Dja\", \"Hem\", \"Kep\",\n  \"Men\", \"Neb\", \"Per\", \"Sab\", \"Wab\"\n];\n\nconst EGYPTIAN_MIDDLE = [\n  \"em\", \"en\", \"ep\", \"er\", \"es\", \"et\", \"hotep\", \"ankh\", \"djed\", \"was\",\n  \"ka\", \"ba\", \"akh\", \"sekh\", \"neb\", \"per\", \"dja\", \"hem\", \"kep\", \"men\"\n];\n\nconst EGYPTIAN_END = [\n  \"hotep\", \"ankh\", \"djed\", \"was\", \"ka\", \"ba\", \"akh\", \"sekh\", \"neb\", \"per\",\n  \"dja\", \"hem\", \"kep\", \"men\", \"is\", \"es\", \"us\", \"os\", \"as\"\n];\n\nexport type NameAlignment = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17;\n\nexport const ALIGNMENT_NAMES = {\n  1: \"Evil\",\n  2: \"Celtic (Gaelic)\",\n  3: \"Nordic (Old Norse)\", \n  4: \"Germanic\",\n  5: \"Latin\",\n  6: \"Ancient Greek\",\n  7: \"Slavic\",\n  8: \"Arabic/Persian\",\n  9: \"Finnish\",\n  10: \"Basque\",\n  11: \"Elvish\",\n  12: \"Draconic\",\n  13: \"Primordial\",\n  14: \"Infernal\",\n  15: \"Anglo-Saxon\",\n  16: \"Steppe Nomad\",\n  17: \"Ancient Egyptian\"\n} as const;\n\nexport interface NameGenerationResult {\n  success: boolean;\n  alignment?: number;\n  names?: string[];\n  error?: string;\n}\n\n/**\n * Get the syllable sets for a given alignment\n */\nfunction getSyllableSets(alignment: NameAlignment): {\n  start: string[];\n  middle: string[];\n  end: string[];\n} {\n  switch (alignment) {\n    case 1: return { start: EVIL_START, middle: EVIL_MIDDLE, end: EVIL_END };\n    case 2: return { start: CELTIC_START, middle: CELTIC_MIDDLE, end: CELTIC_END };\n    case 3: return { start: NORDIC_START, middle: NORDIC_MIDDLE, end: NORDIC_END };\n    case 4: return { start: GERMANIC_START, middle: GERMANIC_MIDDLE, end: GERMANIC_END };\n    case 5: return { start: LATIN_START, middle: LATIN_MIDDLE, end: LATIN_END };\n    case 6: return { start: GREEK_START, middle: GREEK_MIDDLE, end: GREEK_END };\n    case 7: return { start: SLAVIC_START, middle: SLAVIC_MIDDLE, end: SLAVIC_END };\n    case 8: return { start: ARABIC_START, middle: ARABIC_MIDDLE, end: ARABIC_END };\n    case 9: return { start: FINNISH_START, middle: FINNISH_MIDDLE, end: FINNISH_END };\n    case 10: return { start: BASQUE_START, middle: BASQUE_MIDDLE, end: BASQUE_END };\n    case 11: return { start: ELVISH_START, middle: ELVISH_MIDDLE, end: ELVISH_END };\n    case 12: return { start: DRACONIC_START, middle: DRACONIC_MIDDLE, end: DRACONIC_END };\n    case 13: return { start: PRIMORDIAL_START, middle: PRIMORDIAL_MIDDLE, end: PRIMORDIAL_END };\n    case 14: return { start: INFERNAL_START, middle: INFERNAL_MIDDLE, end: INFERNAL_END };\n    case 15: return { start: ANGLO_START, middle: ANGLO_MIDDLE, end: ANGLO_END };\n    case 16: return { start: STEPPE_START, middle: STEPPE_MIDDLE, end: STEPPE_END };\n    case 17: return { start: EGYPTIAN_START, middle: EGYPTIAN_MIDDLE, end: EGYPTIAN_END };\n    default:\n      throw new Error(\"Alignment must be between 1 and 17\");\n  }\n}\n\n/**\n * Generate fantasy names based on alignment/style\n */\nexport function generateNames(\n  alignment: NameAlignment,\n  numNames: number = 10,\n): NameGenerationResult {\n  try {\n    if (alignment < 1 || alignment > 17) {\n      return {\n        success: false,\n        error: \"Alignment must be between 1 and 17\",\n      };\n    }\n\n    if (numNames < 1) {\n      return {\n        success: false,\n        error: \"Number of names must be at least 1\",\n      };\n    }\n\n    const { start, middle, end } = getSyllableSets(alignment);\n    const names: string[] = [];\n\n    for (let i = 0; i < numNames; i++) {\n      const numSyllables = Math.floor(Math.random() * 3) + 2; // 2-4 syllables\n\n      let name = start[Math.floor(Math.random() * start.length)];\n\n      // Add middle syllables\n      for (let j = 0; j < numSyllables - 2; j++) {\n        name += middle[Math.floor(Math.random() * middle.length)];\n      }\n\n      // Add ending\n      name += end[Math.floor(Math.random() * end.length)];\n\n      // Capitalize properly\n      names.push(name.charAt(0).toUpperCase() + name.slice(1).toLowerCase());\n    }\n\n    return {\n      success: true,\n      alignment,\n      names,\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error:\n        error instanceof Error ? error.message : \"Unexpected error occurred\",\n    };\n  }\n}\n\n/**\n * Get available alignment options\n */\nexport function getAlignmentOptions(): Array<{\n  value: NameAlignment;\n  label: string;\n}> {\n  return [\n    { value: 1, label: \"Evil\" },\n    { value: 2, label: \"Celtic (Gaelic)\" },\n    { value: 3, label: \"Nordic (Old Norse)\" },\n    { value: 4, label: \"Germanic\" },\n    { value: 5, label: \"Latin\" },\n    { value: 6, label: \"Ancient Greek\" },\n    { value: 7, label: \"Slavic\" },\n    { value: 8, label: \"Arabic/Persian\" },\n    { value: 9, label: \"Finnish\" },\n    { value: 10, label: \"Basque\" },\n    { value: 11, label: \"Elvish\" },\n    { value: 12, label: \"Draconic\" },\n    { value: 13, label: \"Primordial\" },\n    { value: 14, label: \"Infernal\" },\n    { value: 15, label: \"Anglo-Saxon\" },\n    { value: 16, label: \"Steppe Nomad\" },\n    { value: 17, label: \"Ancient Egyptian\" }\n  ];\n}\n\n/**\n * Get alignment name by number\n */\nexport function getAlignmentName(alignment: NameAlignment): string {\n  return ALIGNMENT_NAMES[alignment];\n}\n\n/**\n * Validate alignment value\n */\nexport function isValidAlignment(value: any): value is NameAlignment {\n  return typeof value === \"number\" && value >= 1 && value <= 17;\n}\n","/**\n * Adventure Utilities (TypeScript)\n * Provides creature types and lieutenant type selection for adventure generation\n */\n\n// Shadowdark villain types - source of truth for creature types\nexport const SHADOWDARK_VILLAIN_TYPES = [\n  \"Human\",\n  \"Elf\",\n  \"Dwarf\",\n  \"Halfling\",\n  \"Hobgoblin\",\n  \"Drow\",\n  \"Duergar\",\n  \"Druid\",\n  \"Giant\",\n  \"Devil\",\n  \"Demon\",\n  \"Elemental\",\n  \"Fairy\",\n  \"Oni\",\n  \"Hag\",\n  \"Principi Fallen Angel\",\n  \"Aboleth\",\n  \"Naga\",\n  \"Couatl\",\n  \"Invisible Stalker\",\n  \"Medusa\",\n  \"Mummy\",\n  \"Efreeti\",\n  \"Phoenix\",\n  \"Dragon\",\n  \"Rime Walker\",\n  \"Ten-Eyed Oracle\",\n  \"Obe-Ixx of Azarumme\",\n  \"Mordanticus the Flayed\",\n  \"Rathgamnon\",\n  \"Imprisoned God\",\n  \"God of Storm / Destruction\",\n  \"Sentient Grimoire\",\n  \"An evil, scheming, intelligent relic or artifact\",\n  \"A ghost, spirit, or shadow\",\n  \"A god, diety or power representing death\",\n  \"A chaos swarm\",\n  \"A malignant spell or curse\",\n  \"A hive mind corruption\",\n  \"World consuming darkness\",\n  \"Orc\",\n  \"Goblin\",\n  \"Skeleton\",\n  \"Zombie\",\n  \"Ghost\",\n  \"Spirit\",\n  \"Wraith\",\n  \"Vampire\",\n  \"Werewolf\",\n  \"Troll\",\n  \"Ogre\",\n  \"Golem\",\n  \"Construct\",\n  \"Undead\",\n  \"Fiend\",\n  \"Celestial\",\n  \"Fey\",\n  \"Beast\",\n  \"Monstrosity\",\n] as const;\n\nexport interface LieutenantTypesResult {\n  success: boolean;\n  lieutenant_types?: string[];\n  error?: string;\n}\n\nexport interface VillainTypesResult {\n  success: boolean;\n  villain_types?: string[];\n  error?: string;\n}\n\n/**\n * Get random villain types for lieutenants, ensuring no duplicates\n */\nexport function getRandomLieutenantTypes(\n  count: number = 2,\n): LieutenantTypesResult {\n  try {\n    if (count <= 0) {\n      return {\n        success: false,\n        error: \"Count must be greater than 0\",\n      };\n    }\n\n    if (count > SHADOWDARK_VILLAIN_TYPES.length) {\n      count = SHADOWDARK_VILLAIN_TYPES.length;\n    }\n\n    // Create a copy of the array and shuffle it\n    const shuffled = [...SHADOWDARK_VILLAIN_TYPES];\n    for (let i = shuffled.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n    }\n\n    // Take the first 'count' elements\n    const selectedTypes = shuffled.slice(0, count);\n\n    return {\n      success: true,\n      lieutenant_types: selectedTypes,\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error\",\n    };\n  }\n}\n\n/**\n * Get all villain types (for API endpoint)\n */\nexport function getVillainTypes(): VillainTypesResult {\n  try {\n    return {\n      success: true,\n      villain_types: [...SHADOWDARK_VILLAIN_TYPES],\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error\",\n    };\n  }\n}\n\n/**\n * Get a random single villain type\n */\nexport function getRandomVillainType(): string {\n  return SHADOWDARK_VILLAIN_TYPES[\n    Math.floor(Math.random() * SHADOWDARK_VILLAIN_TYPES.length)\n  ];\n}\n\n/**\n * Check if a villain type is valid\n */\nexport function isValidVillainType(type: string): boolean {\n  return SHADOWDARK_VILLAIN_TYPES.includes(type as any);\n}\n\n/**\n * Get total number of available villain types\n */\nexport function getVillainTypeCount(): number {\n  return SHADOWDARK_VILLAIN_TYPES.length;\n}\n\n// Goals for BBEG motivation\nconst GOALS = [\n  \"Absolute negation\",\n  \"Absolute power\",\n  \"Apocalyptic destruction\",\n  \"Artistic cruelty\",\n  \"Ascension to demonhood\",\n  \"Authoritarian control\",\n  \"Beautiful destruction\",\n  \"Become a god\",\n  \"Binary justice\",\n  \"Bond symbiotically with a host\",\n  \"Break the vigilante protector\",\n  \"Brutal enforcement of order\",\n  \"Bureaucratic control\",\n  \"Chaos and destruction\",\n  \"Chaos and madness\",\n  \"Chaotic domination\",\n  \"Chaotic fun\",\n  \"Collect knowledge\",\n  \"Collect shiny things\",\n  \"Complete a perfect contract\",\n  \"Complete the mission at any cost\",\n  \"Conquer death\",\n  \"Conquer dimensions\",\n  \"Conquer the empire\",\n  \"Control games and contests\",\n  \"Control others\",\n  \"Control a crime‑ridden city\",\n  \"Corporate advancement\",\n  \"Corporate efficiency\",\n  \"Corporate evil\",\n  \"Corporate heroism\",\n  \"Corrupt the world\",\n  \"Cosmic experimentation\",\n  \"Cosmic survival\",\n  \"Create a horror movie in reality\",\n  \"Criminal enterprise\",\n  \"Criminal empire\",\n  \"Criminal success\",\n  \"Cure a loved one\",\n  \"Cult leadership\",\n  \"Dark‑order domination\",\n  \"Defeat an eternal child hero\",\n  \"Demon army\",\n  \"Destroy everything\",\n  \"Destroy galactic hunter\",\n  \"Destroy heroic speedster\",\n  \"Destroy jungle island\",\n  \"Destroy positive matter universe\",\n  \"Destroy rival speedster\",\n  \"Destroy the happiness of the local hero\",\n  \"Destroy the realm tower\",\n  \"Destroy the world\",\n  \"Dimensional control\",\n  \"Divine vengeance\",\n  \"Dominate dragons\",\n  \"Dominate the realm\",\n  \"Dream domination\",\n  \"Draconic supremacy\",\n  \"Eliminate anomalies\",\n  \"Efficient world through optimization\",\n  \"Endless strength\",\n  \"Energy absorption\",\n  \"Entertainment above all\",\n  \"Environmental protection by force\",\n  \"Escape imprisonment\",\n  \"Escape the island\",\n  \"Escape the underworld\",\n  \"Eternal grudge\",\n  \"Eternal undeath\",\n  \"Eternal youth\",\n  \"Exact revenge for personal tragedy\",\n  \"Exact revenge on elusive nemesis\",\n  \"Family business success\",\n  \"Family legacy\",\n  \"Family survival at any cost\",\n  \"Fashion supremacy\",\n  \"Flamboyant tyranny\",\n  \"Forced assimilation\",\n  \"Galactic domination\",\n  \"Genetic perfection\",\n  \"Genocidal extermination\",\n  \"Guide destiny\",\n  \"Guide the future of humanity\",\n  \"Hand leadership of secret cult\",\n  \"Harlem control\",\n  \"Heavenly authority\",\n  \"Heavenly order\",\n  \"Heavenly stories collection\",\n  \"Human extinction\",\n  \"Human replacement\",\n  \"Human superiority\",\n  \"Human‑supremacist ideology\",\n  \"Immortal dominance\",\n  \"Immortal power\",\n  \"Immortal survival\",\n  \"Imperial doctrine enforcement\",\n  \"Independence from rulers\",\n  \"Information control\",\n  \"Inherit power\",\n  \"Institutional control\",\n  \"Intellectual supremacy\",\n  \"Insanity definition experiment\",\n  \"Kinetic speed domination\",\n  \"Knowledge and order\",\n  \"Knowledge perfection\",\n  \"Lawful evil order\",\n  \"Leave the island\",\n  \"Magical supremacy\",\n  \"Maintain a dying empire\",\n  \"Maintain evil balance\",\n  \"Maintain the apocalypse timeline\",\n  \"Matrix‑like reality perfection\",\n  \"Mechanical evolution\",\n  \"Merge realms\",\n  \"Meta‑human extinction\",\n  \"Mission completion for reward\",\n  \"Musical immortality\",\n  \"Mutated freedom\",\n  \"Mutated supremacy\",\n  \"Narrative control\",\n  \"Necromantic power\",\n  \"Nihilistic chaos\",\n  \"Organic harvest\",\n  \"Organic‑synthetic unity\",\n  \"Orc supremacy\",\n  \"Parasitic domination\",\n  \"Perfect assimilation\",\n  \"Perfect bounty\",\n  \"Perfect combat\",\n  \"Perfect organism\",\n  \"Perfect soldier creation\",\n  \"Perfect weapon\",\n  \"Phazon corruption spreading\",\n  \"Possess a loved one from past life\",\n  \"Possess and control a talented creator\",\n  \"Possess innocence\",\n  \"Possess powerful artifact\",\n  \"Power supremacy\",\n  \"Predatory supremacy\",\n  \"Prevent emergence of rival intelligence\",\n  \"Profit from children\",\n  \"Prophetic madness\",\n  \"Protect her children\",\n  \"Protect his people\",\n  \"Protect territory\",\n  \"Provide for family\",\n  \"Psyche domination\",\n  \"Pure corruption\",\n  \"Purify a grand city\",\n  \"Racial supremacy\",\n  \"Reality manipulation\",\n  \"Reclaim the world\",\n  \"Release the archdemon\",\n  \"Remain fairest in the land\",\n  \"Revenge and honor\",\n  \"Revenge obsession\",\n  \"Revenge on rival kingdom\",\n  \"Rule a crime‑ridden city underworld\",\n  \"Rule all worlds\",\n  \"Rule an alien empire\",\n  \"Rule the desert kingdom\",\n  \"Rule the kingdom\",\n  \"Rule the realm of seas\",\n  \"Rule the savannah kingdom\",\n  \"Rule the towered city\",\n  \"Rule worlds through temporal manipulation\",\n  \"Rural success and stability\",\n  \"Sage‑king guidance of nation\",\n  \"Savior leadership of settlement\",\n  \"Scientific advancement\",\n  \"Scientific testing on subjects\",\n  \"Serve a dark master\",\n  \"Serve the destruction of the knightly order\",\n  \"Shokan honor preservation\",\n  \"Social advancement\",\n  \"Social dominance\",\n  \"Sorcerous power\",\n  \"Species evolution\",\n  \"Species propagation\",\n  \"Speed god worship\",\n  \"Resource monopoly\",\n  \"Spread fear\",\n  \"Spread her curse\",\n  \"Spreading darkness\",\n  \"Spreading evil\",\n  \"Survival and expansion\",\n  \"Technological dominance\",\n  \"Technological tyranny\",\n  \"Temporal manipulation of history\",\n  \"Temporal obsession\",\n  \"Territorial balance of nature\",\n  \"Territorial conquest\",\n  \"Territorial feeding\",\n  \"Time compression of reality\",\n  \"Torture humanity for pleasure\",\n  \"Total control of reality\",\n  \"Transfer soul into new vessel\",\n  \"Tournament dominance\",\n  \"Twilight supremacy\",\n  \"Undead army\",\n  \"Undead supremacy\",\n  \"Unleash pure id\",\n  \"Universal balance\",\n  \"Universal domination\",\n  \"Universal perfection\",\n  \"Unleash primordial destruction\",\n  \"Vampiric supremacy\",\n  \"Vengeful colonialism\",\n  \"World domination\",\n  \"World peace through force\",\n  \"World purification\",\n  \"Wizarding supremacy\",\n  \"Worship as a deity\",\n];\n\n// Tarot cards\nconst TAROT_CARDS = [\n  // Major Arcana\n  \"The Fool\",\n  \"The Magician\",\n  \"The High Priestess\",\n  \"The Empress\",\n  \"The Emperor\",\n  \"The Hierophant\",\n  \"The Lovers\",\n  \"The Chariot\",\n  \"Strength\",\n  \"The Hermit\",\n  \"Wheel of Fortune\",\n  \"Justice\",\n  \"The Hanged Man\",\n  \"Death\",\n  \"Temperance\",\n  \"The Devil\",\n  \"The Tower\",\n  \"The Star\",\n  \"The Moon\",\n  \"The Sun\",\n  \"Judgement\",\n  \"The World\",\n\n  // Minor Arcana – Wands\n  \"Ace of Wands\",\n  \"Two of Wands\",\n  \"Three of Wands\",\n  \"Four of Wands\",\n  \"Five of Wands\",\n  \"Six of Wands\",\n  \"Seven of Wands\",\n  \"Eight of Wands\",\n  \"Nine of Wands\",\n  \"Ten of Wands\",\n  \"Page of Wands\",\n  \"Knight of Wands\",\n  \"Queen of Wands\",\n  \"King of Wands\",\n\n  // Minor Arcana – Cups\n  \"Ace of Cups\",\n  \"Two of Cups\",\n  \"Three of Cups\",\n  \"Four of Cups\",\n  \"Five of Cups\",\n  \"Six of Cups\",\n  \"Seven of Cups\",\n  \"Eight of Cups\",\n  \"Nine of Cups\",\n  \"Ten of Cups\",\n  \"Page of Cups\",\n  \"Knight of Cups\",\n  \"Queen of Cups\",\n  \"King of Cups\",\n\n  // Minor Arcana – Swords\n  \"Ace of Swords\",\n  \"Two of Swords\",\n  \"Three of Swords\",\n  \"Four of Swords\",\n  \"Five of Swords\",\n  \"Six of Swords\",\n  \"Seven of Swords\",\n  \"Eight of Swords\",\n  \"Nine of Swords\",\n  \"Ten of Swords\",\n  \"Page of Swords\",\n  \"Knight of Swords\",\n  \"Queen of Swords\",\n  \"King of Swords\",\n\n  // Minor Arcana – Pentacles\n  \"Ace of Pentacles\",\n  \"Two of Pentacles\",\n  \"Three of Pentacles\",\n  \"Four of Pentacles\",\n  \"Five of Pentacles\",\n  \"Six of Pentacles\",\n  \"Seven of Pentacles\",\n  \"Eight of Pentacles\",\n  \"Nine of Pentacles\",\n  \"Ten of Pentacles\",\n  \"Page of Pentacles\",\n  \"Knight of Pentacles\",\n  \"Queen of Pentacles\",\n  \"King of Pentacles\",\n];\n\nconst GENDERS = [\"Male\", \"Female\"];\nconst CARD_POSITIONS = [\n  \"Seed\",\n  \"Virtue\",\n  \"Vice\",\n  \"Rising Power\",\n  \"Breaking Point\",\n  \"Fate\",\n];\n\nexport interface TarotCard {\n  position: string;\n  card_text: string;\n}\n\nexport interface AdventureSeeds {\n  goal: string;\n  gender: string;\n  race: string;\n  cards: TarotCard[];\n}\n\n/**\n * Generate adventure seeds (goal, gender, race, tarot cards) - replacement for Python script\n */\nexport function generateAdventureSeeds(): AdventureSeeds {\n  // Random goal\n  const goal = GOALS[Math.floor(Math.random() * GOALS.length)];\n\n  // Gender with 4:1 male:female ratio\n  const gender = Math.random() < 0.8 ? \"Male\" : \"Female\";\n\n  // Race - 50% chance for Human, otherwise weighted towards earlier entries\n  let race: string;\n  if (Math.random() < 0.5) {\n    race = SHADOWDARK_VILLAIN_TYPES[0]; // Human\n  } else {\n    // Weighted selection favoring earlier entries\n    const numRaces = SHADOWDARK_VILLAIN_TYPES.length;\n    const weights = Array.from(\n      { length: numRaces },\n      (_, i) => (numRaces - i) ** 2,\n    );\n    const totalWeight = weights.reduce((sum, w) => sum + w, 0);\n    const randomValue = Math.random() * totalWeight;\n\n    let currentWeight = 0;\n    for (let i = 0; i < numRaces; i++) {\n      currentWeight += weights[i];\n      if (randomValue <= currentWeight) {\n        race = SHADOWDARK_VILLAIN_TYPES[i];\n        break;\n      }\n    }\n    race = race || SHADOWDARK_VILLAIN_TYPES[0]; // Fallback\n  }\n\n  // Generate 6 tarot cards with orientations and positions\n  const cards: TarotCard[] = [];\n  for (let i = 0; i < 6; i++) {\n    const card = TAROT_CARDS[Math.floor(Math.random() * TAROT_CARDS.length)];\n    const orientation = Math.random() < 0.33 ? \"Reversed\" : \"Upright\"; // ~33% chance of reversed\n    cards.push({\n      position: CARD_POSITIONS[i],\n      card_text: `${card} (${orientation})`,\n    });\n  }\n\n  return {\n    goal,\n    gender,\n    race,\n    cards,\n  };\n}\n","import { RequestHandler } from \"express\";\nimport Anthropic from \"@anthropic-ai/sdk\";\nimport { spawn } from \"child_process\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { relationalDB } from \"../lib/relational-database\";\nimport {\n  generateNames as generateNamesTS,\n  isValidAlignment,\n} from \"../lib/name-generator\";\nimport {\n  getRandomLieutenantTypes,\n  getVillainTypes,\n  generateAdventureSeeds,\n} from \"../lib/adventure-utilities\";\nimport type {\n  AdventureGenerationRequest,\n  AdventureGenerationResponse,\n  NPC,\n  Creature,\n  Faction,\n  Thread,\n  Clue,\n} from \"../../shared/types\";\n\nconst anthropic = new Anthropic({\n  apiKey: process.env.ANTHROPIC_API_KEY ?? \"\",\n});\n\ninterface TarotCard {\n  position: string;\n  card_text: string;\n}\n\ninterface Lieutenant {\n  name: string;\n  description?: string; // Comprehensive description from AI\n  minions?: string; // What minions they command (if any)\n  tarot_spread: {\n    seed: string;\n    background: string;\n    location: string;\n    why_protect: string;\n    how_protect: string;\n    ability: string;\n  };\n}\n\ninterface VillainJson {\n  bbeg_name: string;\n  name_reasoning?: string;\n  bbeg_hook: string;\n  bbeg_motivation: string;\n  bbeg_detailed_description: string;\n  clues: string[];\n  high_tower_surprise: string;\n  lieutenants: Lieutenant[];\n  faction_name: string;\n  faction_description: string;\n  minions: string;\n}\n\n/**\n * Generates names using the TypeScript name generation implementation\n */\nconst generateNames = (\n  alignment: number,\n  numNames: number,\n): Promise<{ success: boolean; names?: string[]; error?: string }> => {\n  try {\n    if (!isValidAlignment(alignment)) {\n      return Promise.resolve({\n        success: false,\n        error: \"Alignment must be between 1 and 4\",\n      });\n    }\n\n    console.log(`Generating ${numNames} names with alignment ${alignment}`);\n\n    const result = generateNamesTS(alignment, numNames);\n    console.log(`Name generation result:`, result);\n\n    return Promise.resolve(result);\n  } catch (error) {\n    return Promise.resolve({\n      success: false,\n      error: error instanceof Error ? error.message : \"Name generation failed\",\n    });\n  }\n};\n\n/**\n * Gets random lieutenant types from the Python adventure generator script\n */\nconst getLieutenantTypes = (\n  count: number = 2,\n): Promise<{\n  success: boolean;\n  lieutenant_types?: string[];\n  error?: string;\n}> => {\n  try {\n    console.log(`Getting ${count} lieutenant types using TypeScript`);\n\n    const result = getRandomLieutenantTypes(count);\n    console.log(`Generated lieutenant types:`, result.lieutenant_types);\n\n    return Promise.resolve(result);\n  } catch (error) {\n    return Promise.resolve({\n      success: false,\n      error:\n        error instanceof Error\n          ? error.message\n          : \"Lieutenant types generation failed\",\n    });\n  }\n};\n\n/**\n * Cache for creature types to avoid repeated Python calls\n */\nlet cachedCreatureTypes: string[] | null = null;\n\n/**\n * Gets creature types from TypeScript implementation (with caching)\n */\nconst getCreatureTypes = async (): Promise<string[]> => {\n  if (cachedCreatureTypes) {\n    return cachedCreatureTypes;\n  }\n\n  try {\n    const result = getVillainTypes();\n    if (result.success && result.villain_types) {\n      cachedCreatureTypes = result.villain_types;\n      return cachedCreatureTypes;\n    } else {\n      throw new Error(result.error || \"Failed to get villain types\");\n    }\n  } catch (error) {\n    console.warn(\n      \"Failed to get creature types from TypeScript, using fallback:\",\n      error,\n    );\n    // Fallback types\n    cachedCreatureTypes = [\n      \"Human\",\n      \"Elf\",\n      \"Dwarf\",\n      \"Halfling\",\n      \"Hobgoblin\",\n      \"Drow\",\n      \"Duergar\",\n      \"Giant\",\n      \"Devil\",\n      \"Demon\",\n      \"Elemental\",\n      \"Fairy\",\n      \"Oni\",\n      \"Hag\",\n      \"Dragon\",\n      \"Orc\",\n      \"Goblin\",\n      \"Skeleton\",\n      \"Zombie\",\n      \"Ghost\",\n      \"Spirit\",\n      \"Wraith\",\n      \"Vampire\",\n      \"Werewolf\",\n      \"Troll\",\n      \"Ogre\",\n      \"Golem\",\n      \"Construct\",\n      \"Undead\",\n      \"Fiend\",\n      \"Celestial\",\n      \"Fey\",\n      \"Beast\",\n      \"Monstrosity\",\n    ];\n    return cachedCreatureTypes;\n  }\n};\n\n/**\n * Extracts race/species from a description text using creature types from Python\n */\nconst extractRaceFromDescription = async (\n  description: string,\n): Promise<string | null> => {\n  const creatureTypes = await getCreatureTypes();\n  const lowerDescription = description.toLowerCase();\n\n  // Look for explicit race mentions\n  for (const race of creatureTypes) {\n    if (lowerDescription.includes(race.toLowerCase())) {\n      return race;\n    }\n  }\n\n  // Look for common descriptive terms that indicate race\n  if (\n    lowerDescription.includes(\"squire\") ||\n    lowerDescription.includes(\"knight\") ||\n    lowerDescription.includes(\"soldier\")\n  ) {\n    return \"Human\";\n  }\n  if (\n    lowerDescription.includes(\"frost\") ||\n    lowerDescription.includes(\"ice\") ||\n    lowerDescription.includes(\"cold\")\n  ) {\n    return \"Elemental\";\n  }\n  if (\n    lowerDescription.includes(\"shadow\") ||\n    lowerDescription.includes(\"dark\") ||\n    lowerDescription.includes(\"soul\")\n  ) {\n    return \"Undead\";\n  }\n  if (\n    lowerDescription.includes(\"trader\") ||\n    lowerDescription.includes(\"merchant\") ||\n    lowerDescription.includes(\"crystal\")\n  ) {\n    return \"Human\";\n  }\n\n  return null;\n};\n\n/**\n * Standardizes minion descriptions by comparing with official creature types\n */\nconst standardizeMinions = (\n  minions: string,\n  creatureTypes: string[],\n): string => {\n  if (!minions || !minions.trim()) {\n    return minions;\n  }\n\n  const lowerMinions = minions.toLowerCase();\n\n  // Check for exact or close matches with official creature types\n  for (const creatureType of creatureTypes) {\n    const lowerType = creatureType.toLowerCase();\n\n    // Check for exact type name mention\n    if (lowerMinions.includes(lowerType)) {\n      // Check if it's a generic description that can be replaced\n      if (isGenericDescription(minions, creatureType)) {\n        console.log(\n          `Replacing generic minion description with official type: ${creatureType}`,\n        );\n        return creatureType;\n      }\n    }\n  }\n\n  // Check for common synonyms and patterns\n  const typeMapping: Record<string, string> = {\n    \"undead soldiers\": \"Skeleton\",\n    \"undead warriors\": \"Skeleton\",\n    zombified: \"Zombie\",\n    \"animated corpses\": \"Zombie\",\n    \"walking dead\": \"Zombie\",\n    skeletal: \"Skeleton\",\n    \"bone warriors\": \"Skeleton\",\n    \"shadow creatures\": \"Wraith\",\n    \"dark spirits\": \"Spirit\",\n    \"evil spirits\": \"Spirit\",\n    ghostly: \"Ghost\",\n    spectral: \"Ghost\",\n    \"demonic beings\": \"Demon\",\n    \"hellish creatures\": \"Devil\",\n    infernal: \"Devil\",\n    \"elemental forces\": \"Elemental\",\n    \"nature spirits\": \"Elemental\",\n    \"corrupted beasts\": \"Beast\",\n    \"twisted animals\": \"Beast\",\n    \"monstrous creatures\": \"Monstrosity\",\n    \"aberrant beings\": \"Monstrosity\",\n    \"green-skinned brutes\": \"Orc\",\n    \"brutish humanoids\": \"Orc\",\n    \"small goblinoids\": \"Goblin\",\n    \"tiny creatures\": \"Goblin\",\n  };\n\n  for (const [pattern, replacement] of Object.entries(typeMapping)) {\n    if (lowerMinions.includes(pattern)) {\n      // Only replace if the creature type exists in our official list\n      if (creatureTypes.includes(replacement)) {\n        console.log(\n          `Replacing \"${pattern}\" with official type: ${replacement}`,\n        );\n        return replacement;\n      }\n    }\n  }\n\n  // Keep original creative description if no good match found\n  return minions;\n};\n\n/**\n * Checks if a minion description is generic enough to be replaced with an official type\n */\nconst isGenericDescription = (\n  description: string,\n  officialType: string,\n): boolean => {\n  const lowerDesc = description.toLowerCase();\n  const lowerType = officialType.toLowerCase();\n\n  // If the description is mostly just describing the creature type without much detail\n  const simplePatterns = [\n    `${lowerType}s`,\n    `${lowerType} minions`,\n    `${lowerType} servants`,\n    `${lowerType} followers`,\n    `${lowerType} troops`,\n    `${lowerType} warriors`,\n    `undead ${lowerType}`,\n    `corrupted ${lowerType}`,\n    `evil ${lowerType}`,\n    `dark ${lowerType}`,\n  ];\n\n  for (const pattern of simplePatterns) {\n    if (lowerDesc.includes(pattern) && description.length < 100) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/**\n * Creates a comprehensive lieutenant description combining all tarot elements\n */\nconst createLieutenantDescription = (\n  lieutenant: Lieutenant,\n  race: string,\n  bbegName: string,\n  factionName?: string,\n): string => {\n  const tarot = lieutenant.tarot_spread;\n\n  // Build description parts\n  const parts = [\n    `${race} lieutenant serving ${bbegName}.`,\n    `Core Nature: ${tarot.seed}`,\n    `Background: ${tarot.background}`,\n    `Occupation: ${tarot.location}`,\n    `Loyalty: ${tarot.why_protect}`,\n    `Methods: ${tarot.how_protect}`,\n    `Special Ability: ${tarot.ability}`,\n  ];\n\n  // Add faction relationship if it exists\n  if (factionName && factionName.trim()) {\n    parts.push(`Connected to ${factionName}.`);\n  }\n\n  return parts.join(\" \");\n};\n\n/**\n * Express handler: creates a concise BBEG JSON object.\n */\nexport const generateAdventure: RequestHandler = async (req, res) => {\n  try {\n    /* ---------- 1. Seed data from Python ---------- */\n    const seeds = generateAdventureSeeds();\n\n    const {\n      theme = \"Dark Fantasy\",\n      tone = \"Mysterious\",\n      voice = \"Atmospheric\",\n      session_id,\n    } = req.body || {};\n    console.log(\"Adventure generation with style:\", { theme, tone, voice });\n    console.log(\"Session ID:\", session_id);\n\n    const cardsFormatted = seeds.cards\n      .map((c) => `${c.position}: ${c.card_text}`)\n      .join(\"\\n\");\n\n    /* ---------- 2. Claude call ---------- */\n    /* ---------- 2. Generate names using Python script ---------- */\n    console.log(\"Generating names for BBEG...\");\n\n    // Ask AI to determine BBEG's public persona for name generation\n    const personaPrompt = `Based on these tarot cards and style guidance, determine how this BBEG wants to appear to the public:\n\n### STYLE GUIDANCE\nTheme: ${theme}\nTone: ${tone}\nVoice: ${voice}\n\n### TAROT CARDS\n${cardsFormatted}\n\n### SOURCE DATA\nGoal: ${seeds.goal}\nGender: ${seeds.gender}\nRace: ${seeds.race}\n\nReturn a JSON object with your reasoning and choice:\n1 = Openly evil/threatening (dark names like \"Skurlth\", \"Veyak\")\n2 = Neutral/ambiguous (Slavic-style names like \"Miroslav\", \"Katya\")\n3 = Noble/respectable (Anglo-Saxon names like \"Aelfric\", \"Godwin\")\n4 = Ethereal/mystical (Elvish names like \"Elrond\", \"Galadriel\")\n\nConsider: Does this villain hide behind a facade of respectability? Are they a corrupt noble? A false prophet? Or do they embrace being feared?\n\nReturn JSON:\n{\n  \"alignment\": 1-4,\n  \"reasoning\": \"Brief explanation of why this BBEG would want to appear this way to the public\"\n}`;\n\n    const personaResponse = await anthropic.messages.create({\n      model: \"claude-3-5-sonnet-20241022\",\n      max_tokens: 150,\n      messages: [{ role: \"user\", content: personaPrompt }],\n    });\n\n    let alignment = 1;\n    let alignmentReasoning = \"Default to evil appearance\";\n\n    const rawPersonaResponse = personaResponse.content[0].text?.trim() || \"\";\n    console.log(\"Raw persona response:\", rawPersonaResponse);\n\n    try {\n      const personaData = JSON.parse(rawPersonaResponse);\n      alignment = parseInt(personaData.alignment) || 1;\n      alignmentReasoning = personaData.reasoning || \"No reasoning provided\";\n      console.log(\"Parsed persona data successfully:\", personaData);\n    } catch (e) {\n      console.log(\"JSON parsing failed, trying fallback...\");\n      // Fallback if JSON parsing fails - try to extract just a number\n      const numberMatch = rawPersonaResponse.match(/\\d+/);\n      alignment = numberMatch ? parseInt(numberMatch[0]) : 1;\n      console.log(\"Fallback alignment:\", alignment);\n    }\n\n    // Ensure alignment is valid (1-4)\n    if (isNaN(alignment) || alignment < 1 || alignment > 4) {\n      console.log(\"Invalid alignment detected, defaulting to 1\");\n      alignment = 1;\n    }\n\n    console.log(`\\n=== ALIGNMENT CHOICE ===`);\n    console.log(`AI determined public persona alignment: ${alignment}`);\n    console.log(`Reasoning: ${alignmentReasoning}`);\n    console.log(`========================\\n`);\n\n    const nameResult = await generateNames(alignment, 6);\n    if (!nameResult.success) {\n      throw new Error(`Name generation failed: ${nameResult.error}`);\n    }\n\n    console.log(\"Generated names:\", nameResult.names);\n\n    /* ---------- 2.5. Generate lieutenant types ---------- */\n    console.log(\"Getting random lieutenant types...\");\n\n    const lieutenantTypesResult = await getLieutenantTypes(2);\n    if (!lieutenantTypesResult.success) {\n      throw new Error(\n        `Lieutenant types generation failed: ${lieutenantTypesResult.error}`,\n      );\n    }\n\n    console.log(\n      \"Generated lieutenant types:\",\n      lieutenantTypesResult.lieutenant_types,\n    );\n\n    /* ---------- 3. Claude call ---------- */\n    const userPrompt =\n      `You are a narrative��design assistant tasked with forging a memorable Big Bad Evil Guy (BBEG) for a TTRPG campaign.  Work through the hidden reasoning steps below, **but reveal ONLY the JSON object requested in the Output section.**\n\n### STYLE GUIDANCE\nTheme: ${theme}\nTone: ${tone}\nVoice: ${voice}\n\n**IMPORTANT: All content must reflect the specified theme, tone, and voice. Let these guide every aspect of the BBEG's design, from their motivation to their methods to their presentation.**\n\n### SOURCE DATA\nGoal: ${seeds.goal}\nGender: ${seeds.gender}\nRace: ${seeds.race}\nTarot Spread:\\n${cardsFormatted}\n\n1. **Interpret each tarot card** in context of the villain's life.  Follow these shortcuts:\n   • Major Arcana = fate‑shaping forces.  • Suits and Wands: ambition; Cups: emotion/loyalty; Swords: ideology/conflict; Pentacles: resources/influence.\n   • Numbers��— Ace‑4: beginnings; 5‑7: struggle; 8‑10: climax; Court: Page(scout), Knight(enforcer), Queen(strategist), King(ruler).\n   • Reversed indicates blockage, secrecy, or excess.\n2. **Draft villain profile** (≈ 4 sentences): striking visual, core motivation, virtue‑vice contradiction, primary resource/lieutenant, hidden weakness, worst‑case future.\n3. **Generate 8 investigative clues** that heroes might discover about this BBEG. These should include:\n   • Clues pointing to the BBEG as the source of evil\n   • Hints about potential weaknesses or vulnerabilities\n   • Information about where the BBEG might be found or operates\n   • Evidence of the BBEG's evil doings\n   Make these diverse: rumors from NPCs, journal entries, prophecies/portents, signs in nature, direct physical evidence, etc. All clues must reflect the theme, tone, and voice.\n4. **Generate a High Tower Surprise** — a twist that escalates danger during the final confrontation of the campaign. This is a key narrative reversal or complication that alters the expected outcome at the climax.\n\nFollow these steps using Mythic GME rules:\n\n4.1. Ask a Complex Fate Question:\n   \"What unexpected event or revelation occurs during the final confrontation with the BBEG?\"\n\n4.2. Roll for:\n   - Chaos Factor (current value)\n   - Scene Setup: is this scene expected, altered, or interrupted?\n   - Event Focus + Meaning Table (if scene is altered or interrupted)\n\n4.3. Interpret the result as a surprising, thematic escalation:\n   - A new enemy appears?\n   - A ritual completes accidentally?\n   - The BBEG transforms or reveals a hidden agenda?\n   - An ally betrays the party?\n   - The location becomes unstable or cursed?\n\n4.4. Show your reasoning:\n   - Fate Question logic\n   - Chaos roll\n   - Scene setup determination\n   - Event Focus and Meaning rolls\n   - Justification for how this surprise fits with the BBEG's long-term arc\n\n5. Return the final result as a one-paragraph narrative twist to insert during the final battle\n\n5. **Select and enhance the BBEG name** from these pre-generated options:\n   Generated Names: ${nameResult.names?.join(\", \")}\n\n   • Choose the name that best fits the BBEG's character and the theme/tone\n   • Consider ease of pronunciation and memorability\n   • If appropriate for this type of villain, add a title such as:\n     - Lord/Lady [name] (for noble/aristocratic villains)\n     - [name] the [descriptor] (e.g., \"the Destroyer\", \"the Corrupted\", \"the Shadow\")\n     - Just [name] (for subtle or mysterious villains)\n   • Not all villains need titles - choose based on their nature and status\n   • IMPORTANT: Include your reasoning for the name choice in the \"name_reasoning\" field\n6. **Write a one‑sentence adventure hook** for the GM to read aloud, using the specified voice.\n\n7. **Define Common Minions** - Create a creature type that serves as the most likely minions for this BBEG that PCs will fight many of on their pathway toward defeating Lieutenants and the BBEG. This should be:\n   • A creature type that fits thematically with the BBEG and theme\n   • Common enough to be encountered frequently\n   • Challenging but not overwhelming for regular encounters\n   • Reflect the BBEG's influence and corruption\n   • 2-3 sentences describing their nature, appearance, and capabilities\n\n7.5. **Standardize Minions** - Review your minion description from step 7 and compare it with these official Shadowdark creature types: ${(await getCreatureTypes()).join(\", \")}\n   • If your minion description closely matches any of these official types (e.g., you described \"undead soldiers\" and \"Skeleton\" is in the list), replace your description with the official type name\n   • If your description is similar but more specific (e.g., \"frost-touched zombies\" vs \"Zombie\"), keep your creative description\n   • If nothing in the official list is close to what you created, keep your original creative description\n   • The goal is to use official types when they fit, but preserve unique creative minions when they don't\n   • Simply state the final minion type/description you're using\n\n8. **Generate exactly 2 Lieutenants** with the following requirements:\n\n    8.1 Use these randomly selected creature types for the Lieutenants:\n    Lieutenant 1: ${lieutenantTypesResult.lieutenant_types?.[0] || \"Human\"}\n    Lieutenant 2: ${lieutenantTypesResult.lieutenant_types?.[1] || \"Elf\"}\n\n   8.2 Identify one important feature or aspect of the BBEG (one different for each Lieutenant) and make the lieutenant the opposite. Examples:\n    BBEG is hideous creature and is female > First Lieutenant is a gorgeous elf or fairy, Second Lieutenant is male\n    BBEG is a male > Lieutenant is a female\n    BBEG leads hordes of creatures > Lieutenant acts alone.\n\n    8.3 Use the SAME tarot cards provided for the BBEG, but interpret each of the two Lieutenants differently. To do this, take the 6 tarot cards from the BBEG and re-order them randomly. Then answer the following questions with this new order, using the Tarot cards to inspire your narrative answers:\n       * Seed: What defines their core nature?\n       * Background: What is their origin story?\n       * Location (Occupation): What is the Lieutenant's occupation?\n       * Why Protect: What motivates their loyalty to the BBEG?\n       * How Protect: What methods do they use to serve/protect the BBEG?\n       * Ability: What unique ability, skill, power, or weapon does this lieutenant have that makes it unique?\n\n     IMPORTANT: Provide pure narrative answers without revealing the actual tarot card names. The player should see meaningful story explanations, not \"Five of Swords\" or \"The Emperor\". Keep each interpretation to 1-2 sentences of pure story content. Do this TWICE, once for each lieutenant.\n\n    8.4 Create comprehensive lieutenant descriptions and minion assignments:\n\n       A. **Names**: Create evocative names for each of the 2 lieutenants that reflect their race and nature\n\n       B. **Detailed Descriptions**: For each lieutenant, create a comprehensive description (3-4 sentences) that weaves together:\n          • Their race/species and how it influences their appearance and abilities\n          • All elements from their tarot reading (seed, background, occupation, motivations, methods, ability)\n          • Their relationship to the BBEG (loyalty, fear, alliance, etc.)\n          • Their role within the faction (if they're connected to it)\n          • How their unique ability manifests and aids the BBEG's goals\n\n       C. **Minion Leadership Analysis**: For each lieutenant, analyze whether they should lead minions:\n          • Consider their race, occupation, and role\n          • Ask: \"Would this lieutenant naturally command others?\"\n          • If YES: What type of creatures would follow them? (Same as BBEG's minions, their own race, or something thematic to their ability?)\n          • If NO: Why don't they have followers? (Solitary nature, ghost/incorporeal, assassin, etc.)\n          • Provide clear reasoning for your decision\n\n          Examples of lieutenants who WOULD have minions:\n          - Orc Warlord → Commands Orcs\n          - Thief Lord → Leads Thieves\n          - Guard Captain → Commands Soldiers\n          - Spider Queen → Controls Giant Spiders\n\n          Examples who would NOT have minions:\n          - Ancient Grimoire → Disembodied artifact\n          - Assassin → Works alone\n          - Ghost → Cannot command living beings\n          - Hermit Sage → Reclusive by nature\n\n9. **Create the Faction** which most aligns with the BBEG. It should reinforce the tone and theme of the adventure. Answer the following questions about it to create its details:\n   �� The faction should align to at least one of the two Lieutenants. Which one? And why?\n   • Is the faction loyal to the BBEG or do their motives just happen to align with it?\n   • What sort of domain or territory does the faction control?\n   • Provide a faction name and 2-3 sentence description that captures their nature, goals, and relationship to the BBEG\n\n--- OUTPUT ---\nReturn one clean JSON object and nothing else.  Keep values concise:\n• \"bbeg_name\" – the chosen name (title optional)\n• \"name_reasoning\" – brief explanation of why this name was chosen from the options\n��� \"bbeg_hook\" – the single sentence hook\n• \"bbeg_motivation\" – one concise sentence\n• \"bbeg_detailed_description\" – 3‑4 vivid sentences\n• \"clues\" – array of exactly 8 strings, each a different type of clue\n• \"high_tower_surprise\" ��� the major plot twist (2-3 sentences)\n• \"lieutenants\" – array of exactly 2 lieutenant objects, each with:\n  - \"name\": lieutenant's name\n  - \"description\": comprehensive 3-4 sentence description integrating race, tarot elements, and relationships\n  - \"minions\": description of what creatures they command (or empty string if none)\n  - \"tarot_spread\": object with seed, background, location, why_protect, how_protect, ability\n• \"faction_name\" – name of the aligned faction\n• \"faction_description\" – description of faction (2-3 sentences)\n• \"minions\" – description of common minion creature type (2-3 sentences)\n\n{\n  \"bbeg_name\": \"\",\n  \"name_reasoning\": \"\",\n  \"bbeg_hook\": \"\",\n  \"bbeg_motivation\": \"\",\n  \"bbeg_detailed_description\": \"\",\n  \"clues\": [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n  \"high_tower_surprise\": \"\",\n  \"lieutenants\": [\n    {\n      \"name\": \"\",\n      \"description\": \"\",\n      \"minions\": \"\",\n      \"tarot_spread\": {\n        \"seed\": \"\",\n        \"background\": \"\",\n        \"location\": \"\",\n        \"why_protect\": \"\",\n        \"how_protect\": \"\",\n        \"ability\": \"\"\n      }\n    }\n  ],\n  \"faction_name\": \"\",\n  \"faction_description\": \"\",\n  \"minions\": \"\"\n}`.trim();\n\n    const messages = [{ role: \"user\" as const, content: userPrompt }];\n\n    console.log(\"Making Claude API call with messages:\", messages.length);\n    console.log(\n      \"First message content preview:\",\n      messages[0].content.substring(0, 100),\n    );\n\n    const ai = await anthropic.messages.create({\n      model: \"claude-3-5-sonnet-20241022\",\n      system: \"Return only the JSON object requested.\",\n      max_tokens: 1200,\n      temperature: 0.5,\n      messages,\n    });\n\n    console.log(\"Claude API response structure:\", {\n      id: ai.id,\n      type: ai.type,\n      role: ai.role,\n      model: ai.model,\n      contentLength: ai.content?.length,\n      stopReason: ai.stop_reason,\n      usage: ai.usage,\n    });\n\n    console.log(\"Claude response received\");\n    console.log(\"Content array length:\", ai.content?.length);\n    console.log(\"First content type:\", ai.content?.[0]?.type);\n\n    const rawText = ai.content?.[0]?.type === \"text\" ? ai.content[0].text : \"\";\n    console.log(\"Raw response:\", rawText.substring(0, 200));\n\n    if (!rawText) {\n      throw new Error(\"No text content received from Claude\");\n    }\n\n    // Clean up the response to extract just the JSON\n    let jsonText = rawText.trim();\n\n    // Find JSON object in the response\n    const jsonStart = jsonText.indexOf(\"{\");\n    const jsonEnd = jsonText.lastIndexOf(\"}\");\n\n    if (jsonStart >= 0 && jsonEnd > jsonStart) {\n      jsonText = jsonText.substring(jsonStart, jsonEnd + 1);\n    }\n\n    console.log(\"Extracted JSON:\", jsonText);\n\n    let villain: VillainJson;\n    try {\n      villain = JSON.parse(jsonText);\n    } catch (parseError) {\n      console.error(\"JSON parse error:\", parseError);\n      console.error(\"Raw text that failed to parse:\", jsonText);\n      throw new Error(`Failed to parse Claude response as JSON: ${parseError}`);\n    }\n\n    console.log(\"Parsed villain:\", villain);\n\n    // Standardize minions by comparing with official creature types\n    const creatureTypes = await getCreatureTypes();\n    const originalMinions = villain.minions;\n    villain.minions = standardizeMinions(villain.minions, creatureTypes);\n\n    if (originalMinions !== villain.minions) {\n      console.log(`\\n=== MINION STANDARDIZATION ===`);\n      console.log(`Original: ${originalMinions}`);\n      console.log(`Standardized: ${villain.minions}`);\n      console.log(`===============================\\n`);\n    }\n\n    // Output name reasoning to console\n    console.log(`\\n=== NAME SELECTION ===`);\n    console.log(`Available names were: ${nameResult.names?.join(\", \")}`);\n    console.log(`AI chose: ${villain.bbeg_name}`);\n    console.log(\n      `Reasoning: ${villain.name_reasoning || \"No reasoning provided\"}`,\n    );\n    console.log(`=======================\\n`);\n\n    /* ---------- 3. Response ---------- */\n    // Write to database if session_id provided and database is available\n    if (session_id && relationalDB.isAvailable()) {\n      console.log(\"Writing adventure arc to database...\");\n\n      // Create adventure arc\n      const adventureArcId = await relationalDB.writeAdventureArc(session_id, {\n        bbeg_name: villain.bbeg_name,\n        bbeg_description: villain.bbeg_detailed_description,\n        bbeg_motivation: villain.bbeg_motivation,\n        bbeg_hook: villain.bbeg_hook,\n        high_tower_surprise: villain.high_tower_surprise || \"\",\n        // TODO: Link to minion monster when monster system is implemented\n      });\n\n      if (adventureArcId) {\n        // Create hidden campaign elements\n        const hiddenElements: {\n          creatures: Omit<Creature, \"session_id\">[];\n          factions: Omit<Faction, \"session_id\">[];\n          threads: Omit<Thread, \"session_id\">[];\n          clues: Omit<Clue, \"session_id\">[];\n        } = {\n          creatures: [],\n          factions: [],\n          threads: [],\n          clues: [],\n        };\n\n        // Add BBEG as hidden creature\n        const bbegId = `creature_${Date.now()}_bbeg`;\n        hiddenElements.creatures.push({\n          id: bbegId,\n          name: villain.bbeg_name,\n          race_species: seeds.race,\n          description: villain.bbeg_detailed_description,\n          creature_type: \"bbeg\",\n          npc_disposition: \"hostile\",\n          hidden: true,\n          bbeg_motivation: villain.bbeg_motivation,\n          bbeg_hook: villain.bbeg_hook,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        });\n\n        // Add BBEG minions as creatures if they exist\n        if (villain.minions && villain.minions.trim()) {\n          // Extract race from minions description or default to a generic type\n          const minionsRace =\n            (await extractRaceFromDescription(villain.minions)) || \"Monster\";\n\n          hiddenElements.creatures.push({\n            id: `creature_${Date.now()}_bbeg_minion`,\n            name: \"BBEG Minions\",\n            race_species: minionsRace,\n            description: villain.minions,\n            creature_type: \"monster\",\n            npc_disposition: \"hostile\",\n            hidden: true,\n            is_minion: true,\n            minion_creature_id: bbegId,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n          });\n        }\n\n        // Add lieutenants as hidden creatures and create their minions\n        for (\n          let index = 0;\n          index < (villain.lieutenants || []).length;\n          index++\n        ) {\n          const lieutenant = villain.lieutenants![index];\n          const lieutenantId = `creature_${Date.now()}_lt_${index}`;\n          // Get the lieutenant type from the generated types\n          const lieutenantType =\n            lieutenantTypesResult.types?.[index] || \"Monster\";\n\n          // Use AI-provided description or create fallback\n          const description =\n            lieutenant.description ||\n            createLieutenantDescription(\n              lieutenant,\n              lieutenantType,\n              villain.bbeg_name,\n              villain.faction_name,\n            );\n\n          hiddenElements.creatures.push({\n            id: lieutenantId,\n            name: lieutenant.name,\n            race_species: lieutenantType,\n            description: description,\n            creature_type: \"lieutenant\",\n            npc_disposition: \"hostile\",\n            hidden: true,\n            lieutenant_seed: lieutenant.tarot_spread.seed,\n            lieutenant_background: lieutenant.tarot_spread.background,\n            lieutenant_occupation: lieutenant.tarot_spread.location,\n            lieutenant_why_protect: lieutenant.tarot_spread.why_protect,\n            lieutenant_how_protect: lieutenant.tarot_spread.how_protect,\n            lieutenant_tarot_ability: lieutenant.tarot_spread.ability,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n          });\n\n          // Create lieutenant minions if specified\n          if (lieutenant.minions && lieutenant.minions.trim()) {\n            const lieutenantMinionsRace =\n              (await extractRaceFromDescription(lieutenant.minions)) ||\n              \"Monster\";\n\n            hiddenElements.creatures.push({\n              id: `creature_${Date.now()}_lt_${index}_minion`,\n              name: `${lieutenant.name}'s Minions`,\n              race_species: lieutenantMinionsRace,\n              description: lieutenant.minions,\n              creature_type: \"monster\",\n              npc_disposition: \"hostile\",\n              hidden: true,\n              is_minion: true,\n              minion_creature_id: lieutenantId,\n              created_at: new Date().toISOString(),\n              updated_at: new Date().toISOString(),\n            });\n          }\n        }\n\n        // Add faction as hidden faction\n        if (villain.faction_name) {\n          hiddenElements.factions.push({\n            id: `faction_${Date.now()}`,\n            adventure_arc_id: adventureArcId,\n            name: villain.faction_name,\n            description: villain.faction_description || \"\",\n            influence: \"moderate\",\n            relationship: \"opposed\",\n            hidden: true,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n          });\n        }\n\n        // Add clues as hidden clues\n        villain.clues?.forEach((clue, index) => {\n          hiddenElements.clues.push({\n            id: `clue_${Date.now()}_${index}`,\n            adventure_arc_id: adventureArcId,\n            description: clue,\n            discovered: false,\n            importance: \"moderate\",\n            hidden: true,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n          });\n        });\n\n        // Write all hidden elements to database\n        await relationalDB.addHiddenCampaignElements(\n          session_id,\n          adventureArcId,\n          hiddenElements,\n        );\n        console.log(\"Adventure data written to database successfully\");\n      }\n    }\n\n    // Write adventure arc to database for real-time updates\n    if (relationalDB.supabase) {\n      try {\n        await relationalDB.writeAdventureArcToSession(session_id, {\n          adventure_arc: {\n            bbeg: {\n              name: villain.bbeg_name,\n              description: villain.bbeg_detailed_description,\n              motivation: villain.bbeg_motivation,\n              hook: villain.bbeg_hook,\n            },\n            clues: villain.clues || [],\n            highTowerSurprise: villain.high_tower_surprise || \"\",\n            lieutenants: villain.lieutenants || [],\n            faction: {\n              name: villain.faction_name || \"\",\n              description: villain.faction_description || \"\",\n            },\n            minions: villain.minions || \"\",\n          },\n          campaign_elements: {\n            threads: [],\n            creatures: hiddenElements.creatures,\n            factions: hiddenElements.factions,\n            clues: hiddenElements.clues,\n          },\n        });\n        console.log(\"Adventure arc written to database successfully\");\n\n        // Simple success response when database is available\n        res.json({ success: true });\n      } catch (error) {\n        console.error(\"Failed to write adventure arc to database:\", error);\n        // Fall back to returning data if database write fails\n        res.json({\n          ...villain,\n          race: seeds.race,\n          lieutenant_types: lieutenantTypesResult.types,\n          success: true,\n          fallback: true,\n          message: \"Database unavailable, returning data directly\",\n        });\n      }\n    } else {\n      console.log(\"Database not available - returning data directly\");\n      // Fall back to returning data when no database\n      res.json({\n        ...villain,\n        race: seeds.race,\n        lieutenant_types: lieutenantTypesResult.types,\n        success: true,\n        fallback: true,\n        message: \"Database not configured, returning data directly\",\n      });\n    }\n  } catch (err) {\n    console.error(\"Adventure generation error:\", err);\n\n    // Provide more specific error messages based on error type\n    let errorMessage = \"Unknown error occurred\";\n    let statusCode = 500;\n\n    if (err instanceof Error) {\n      errorMessage = err.message;\n\n      // Handle specific API errors\n      if (errorMessage.includes(\"529\") || errorMessage.includes(\"overloaded\")) {\n        errorMessage =\n          \"Claude API is currently overloaded. Please try again in a few moments.\";\n        statusCode = 503; // Service Unavailable\n      } else if (\n        errorMessage.includes(\"401\") ||\n        errorMessage.includes(\"authentication\")\n      ) {\n        errorMessage = \"API authentication failed. Please check configuration.\";\n        statusCode = 401;\n      } else if (\n        errorMessage.includes(\"rate limit\") ||\n        errorMessage.includes(\"429\")\n      ) {\n        errorMessage = \"Rate limit exceeded. Please wait before trying again.\";\n        statusCode = 429;\n      } else if (errorMessage.includes(\"Invalid JSON\")) {\n        errorMessage = \"Failed to parse AI response. Please try again.\";\n        statusCode = 502; // Bad Gateway\n      } else if (errorMessage.includes(\"Python exited\")) {\n        errorMessage = \"Adventure seed generation failed. Please try again.\";\n        statusCode = 502;\n      }\n    }\n\n    res.status(statusCode).json({\n      success: false,\n      error: errorMessage,\n      retryable: statusCode === 503 || statusCode === 429,\n    });\n  }\n};\n","import { Request, Response } from \"express\";\nimport Anthropic from \"@anthropic-ai/sdk\";\nimport { spawn } from \"child_process\";\nimport path from \"path\";\nimport { relationalDB } from \"../lib/relational-database.js\";\n\n// Prevent concurrent scene generation requests\nlet isGeneratingScene = false;\n\nconst anthropic = new Anthropic({\n  apiKey: process.env.ANTHROPIC_API_KEY,\n});\n\ninterface SceneGenerationRequest {\n  session_id: string;\n  player_intentions?: string;\n  chaos_factor?: number;\n  character?: any;\n  campaign_elements?: any;\n}\n\nexport async function generateScene(req: Request, res: Response) {\n  // Prevent concurrent requests\n  if (isGeneratingScene) {\n    console.log(\"BLOCKING CONCURRENT SCENE GENERATION REQUEST\");\n    return res.status(429).json({\n      success: false,\n      error: \"Scene generation already in progress. Please wait.\",\n    });\n  }\n\n  isGeneratingScene = true;\n  console.log(\"ACQUIRED SCENE GENERATION LOCK\");\n\n  try {\n    const {\n      session_id,\n      player_intentions,\n      chaos_factor = 5,\n      character,\n      campaign_elements,\n    }: SceneGenerationRequest = req.body;\n\n    if (!session_id) {\n      return res.status(400).json({\n        success: false,\n        error: \"Session ID is required\",\n      });\n    }\n\n    console.log(\"=== STEP 1: Gathering Context Snapshot ===\");\n    console.log(\n      \"Received campaign_elements:\",\n      JSON.stringify(campaign_elements, null, 2),\n    );\n\n    // Add unique tracking ID\n    const trackingId = `TRACK_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    console.log(`${trackingId} - Starting scene generation`);\n    console.log(\n      `${trackingId} - Received campaign_elements.bbeg:`,\n      campaign_elements?.bbeg?.name,\n    );\n\n    // Note: Allow scene generation even without campaign elements\n    // We'll use fallback data if no campaign elements are provided\n    if (\n      !campaign_elements ||\n      !campaign_elements.bbeg ||\n      !campaign_elements.bbeg.name ||\n      campaign_elements.bbeg.name === \"Unknown BBEG\"\n    ) {\n      console.log(\n        \"WARNING: No valid campaign elements provided. Using fallback data for scene generation.\",\n      );\n    }\n\n    // Get current campaign data for context\n    console.log(\n      `${trackingId} - Calling gatherContextSnapshot with campaign_elements.bbeg:`,\n      campaign_elements?.bbeg?.name,\n    );\n    const contextSnapshot = await gatherContextSnapshot(\n      session_id,\n      character,\n      campaign_elements,\n      trackingId,\n    );\n\n    console.log(\"Context Snapshot:\", JSON.stringify(contextSnapshot, null, 2));\n    console.log(\n      \"Player Intentions:\",\n      player_intentions || \"No intentions specified\",\n    );\n\n    console.log(\"=== STEP 2: Creating Scene Expectations ===\");\n    console.log(\n      `${trackingId} - BEFORE createSceneExpectations - contextSnapshot.bbeg:`,\n      JSON.stringify(contextSnapshot.bbeg, null, 2),\n    );\n\n    // Get scene expectations from LLM\n    const sceneExpectations = await createSceneExpectations(\n      contextSnapshot,\n      player_intentions,\n      trackingId,\n    );\n\n    console.log(\"Scene Expectations:\", sceneExpectations.description);\n    console.log(\"Fate Rolls:\", sceneExpectations.fateRolls);\n\n    console.log(\"=== STEP 2 SUMMARY ===\");\n    console.log(`TIMESTAMP: ${new Date().toISOString()}`);\n    console.log(\"RESULTING SCENE SUMMARY:\");\n    console.log(sceneExpectations.description);\n    console.log(\"Fate Roll Results:\");\n    sceneExpectations.fateRolls.forEach((roll: any) => {\n      console.log(\n        `- ${roll.question}: ${roll.result} (likelihood: ${roll.likelihood})`,\n      );\n    });\n\n    console.log(\"=== STEP 3: Scene Setup with Mythic Rolls ===\");\n\n    // Perform Mythic rolls for scene setup\n    const sceneSetup = await performSceneSetup(chaos_factor, contextSnapshot);\n\n    console.log(\n      \"Chaos Roll:\",\n      sceneSetup.chaosRoll,\n      \"vs Chaos Factor:\",\n      chaos_factor,\n    );\n    console.log(\"Scene Type:\", sceneSetup.sceneType);\n    if (sceneSetup.randomEvent) {\n      console.log(\"Random Event:\", sceneSetup.randomEvent);\n    }\n\n    console.log(\"=== STEP 4: Establishing Scene Goal ===\");\n\n    // Establish scene goals\n    const sceneGoals = await establishSceneGoals(\n      sceneExpectations,\n      sceneSetup,\n      contextSnapshot,\n      player_intentions,\n    );\n\n    console.log(\"Scene Goal:\", sceneGoals.goal);\n    console.log(\"Success Conditions:\", sceneGoals.successConditions);\n\n    // Get next scene number\n    const sceneNumber = await getNextSceneNumber(session_id);\n\n    // Create scene record\n    const sceneIdResult = await runSceneIdGenerator();\n    const scene = {\n      id: sceneIdResult.scene_id,\n      session_id,\n      scene_number: sceneNumber,\n      title: sceneGoals.title,\n      description: sceneExpectations.description,\n      player_intentions: player_intentions || null,\n      context_snapshot: contextSnapshot,\n      scene_expectations: sceneExpectations.description,\n      fate_rolls: sceneExpectations.fateRolls,\n      chaos_factor,\n      chaos_roll: sceneSetup.chaosRoll,\n      scene_type: sceneSetup.sceneType,\n      random_event: sceneSetup.randomEvent || null,\n      scene_goal: sceneGoals.goal,\n      success_conditions: [], // Removed for now\n      status: \"active\" as const,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n    };\n\n    // Save to database if available\n    if (relationalDB.isAvailable()) {\n      await relationalDB.createScene(scene);\n    }\n\n    res.json({\n      success: true,\n      scene,\n    });\n  } catch (error) {\n    console.error(\"Scene generation error:\", error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error occurred\",\n    });\n  } finally {\n    isGeneratingScene = false;\n    console.log(\"RELEASED SCENE GENERATION LOCK\");\n  }\n}\n\nasync function gatherContextSnapshot(\n  sessionId: string,\n  character?: any,\n  campaignElements?: any,\n  trackingId?: string,\n) {\n  // Use provided campaign elements or fall back to empty data\n  console.log(\n    `${trackingId} - gatherContextSnapshot - campaignElements parameter:`,\n    JSON.stringify(campaignElements, null, 2),\n  );\n\n  const campaignData =\n    campaignElements || (await getCampaignElementsData(sessionId));\n  console.log(\n    `${trackingId} - gatherContextSnapshot - final campaignData:`,\n    JSON.stringify(campaignData, null, 2),\n  );\n\n  const characterData = character || (await getCharacterData(sessionId));\n  const adventureLog = await getAdventureLogData(sessionId);\n\n  // Extract BBEG from creatures array if present\n  const bbeg =\n    campaignData.creatures?.find(\n      (creature: any) => creature.creature_type === \"bbeg\",\n    ) ||\n    campaignData.bbeg ||\n    null;\n\n  // Extract NPCs/Lieutenants from creatures array\n  const npcs =\n    campaignData.creatures?.filter(\n      (creature: any) =>\n        creature.creature_type === \"npc\" ||\n        creature.creature_type === \"lieutenant\",\n    ) ||\n    campaignData.npcs ||\n    [];\n\n  return {\n    bbeg: bbeg\n      ? {\n          name: bbeg.name,\n          description: bbeg.description,\n          motivation: bbeg.bbeg_motivation || bbeg.motivation,\n        }\n      : null,\n    npcs: npcs,\n    plot_threads: campaignData.threads || campaignData.plot_threads || [],\n    factions: campaignData.factions || [],\n    adventure_log: adventureLog || [],\n    character: characterData\n      ? {\n          name: characterData.name || \"Unnamed Adventurer\",\n          level: characterData.level || 1,\n          class: characterData.className || characterData.class || \"Unknown\",\n          ancestry: characterData.ancestry || \"Human\",\n          background: characterData.background || \"Unknown\",\n        }\n      : {\n          name: \"Unnamed Adventurer\",\n          level: 1,\n          class: \"Unknown\",\n        },\n  };\n}\n\nasync function getCampaignElementsData(sessionId: string) {\n  // Return empty data - campaign elements should only exist if user generated them\n  // The frontend will pass campaign elements in the request if they exist\n  return {\n    bbeg: null,\n    npcs: [],\n    plot_threads: [],\n    factions: [],\n  };\n}\n\nasync function getCharacterData(sessionId: string) {\n  // Try to get real character data from session state\n  try {\n    // Read from session storage where character sheet data is stored\n    if (typeof sessionStorage !== \"undefined\") {\n      const characterData = sessionStorage.getItem(\"character\");\n      if (characterData) {\n        const character = JSON.parse(characterData);\n        return {\n          name: character.name || \"Unknown Adventurer\",\n          level: character.level || 1,\n          class: character.className || \"Fighter\",\n          ancestry: character.ancestry || \"Human\",\n          background: character.background || \"Unknown\",\n          stats: character.stats || {\n            STR: 10,\n            DEX: 10,\n            CON: 10,\n            INT: 10,\n            WIS: 10,\n            CHA: 10,\n          },\n          hitPoints: character.hitPoints || 1,\n          armorClass: character.armorClass || 10,\n        };\n      }\n    }\n\n    // Fallback for default character\n    return {\n      name: \"Unknown Adventurer\",\n      level: 1,\n      class: \"Fighter\",\n    };\n  } catch (error) {\n    console.error(\"Error getting character data:\", error);\n    return {\n      name: \"Unknown Adventurer\",\n      level: 1,\n      class: \"Fighter\",\n    };\n  }\n}\n\nasync function getAdventureLogData(sessionId: string) {\n  // Get adventure log entries - for now return empty until we have real adventure log data\n  try {\n    return [];\n  } catch (error) {\n    console.error(\"Error getting adventure log:\", error);\n    return [];\n  }\n}\n\nasync function createSceneExpectations(\n  contextSnapshot: any,\n  playerIntentions?: string,\n  trackingId?: string,\n) {\n  console.log(\n    `${trackingId} - === createSceneExpectations - contextSnapshot ===`,\n  );\n  console.log(\n    `${trackingId} - BBEG:`,\n    JSON.stringify(contextSnapshot.bbeg, null, 2),\n  );\n  console.log(\n    `${trackingId} - NPCs:`,\n    JSON.stringify(contextSnapshot.npcs, null, 2),\n  );\n  console.log(\n    `${trackingId} - Factions:`,\n    JSON.stringify(contextSnapshot.factions, null, 2),\n  );\n  console.log(\n    `${trackingId} - Plot Threads:`,\n    JSON.stringify(contextSnapshot.plot_threads, null, 2),\n  );\n\n  const prompt = `You are a GM for a Shadowdark RPG solo session. Create scene expectations based on the story context and player intentions.\n\nCONTEXT:\n${\n  contextSnapshot.bbeg\n    ? `BBEG: ${contextSnapshot.bbeg.name} - ${contextSnapshot.bbeg.description}\nMotivation: ${contextSnapshot.bbeg.motivation}\n\nDEBUG_BBEG_NAME: ${contextSnapshot.bbeg.name}\nDEBUG_BBEG_CHECK: The BBEG for this scene is named \"${contextSnapshot.bbeg.name}\" and must be referenced in the response.`\n    : `BBEG: None set - This is a general adventure scene without a specific Big Bad Evil Guy.\nDEBUG_BBEG_CHECK: No BBEG has been established for this adventure yet.`\n}\n\nCurrent Plot Threads:\n${contextSnapshot.plot_threads.map((thread: any) => `- ${thread.description} (${thread.status})`).join(\"\\n\")}\n\nNPCs:\n${contextSnapshot.npcs\n  .map((npc: any) => {\n    if (npc.tarot_spread) {\n      // Handle lieutenant structure with tarot spread\n      return `- ${npc.name}: ${npc.tarot_spread.seed || npc.tarot_spread.background || \"Lieutenant\"}`;\n    } else {\n      // Handle simple NPC structure\n      return `- ${npc.name}: ${npc.description || \"NPC\"} (${npc.disposition || \"unknown\"})`;\n    }\n  })\n  .join(\"\\n\")}\n\nFactions:\n${contextSnapshot.factions.map((faction: any) => `- ${faction.name}: ${faction.description} (${faction.relationship})`).join(\"\\n\")}\n\nPrevious Adventure Log:\n${contextSnapshot.adventure_log.map((entry: any) => `- ${entry.content}`).join(\"\\n\")}\n\nPLAYER INTENTIONS: ${playerIntentions || \"No specific intentions stated\"}\n\nFor each story element you want to include in this scene, make a FATE ROLL with a likelihood assessment and I'll tell you if it happens:\n\n1. Should the BBEG be directly involved in this scene?\n2. Should NPCs/Lieutenants appear in this scene?\n3. Should this scene advance the main plot thread?\n4. Should a faction be involved in this scene?\n5. Should there be immediate danger or conflict?\n\nCreate a scene that logically follows from the player's intentions and current story state. Focus on what would make narrative sense for the next part of the story.\n\nFor each fate roll question, assess the likelihood based on the current story context. Use one of these Mythic Fate Table likelihood levels:\n- very_likely\n- likely\n- 50_50\n- unlikely\n- very_unlikely\n\nReturn a JSON object with:\n{\n  \"description\": \"A paragraph describing what this scene is probably about\",\n  \"fateRolls\": [\n    {\n      \"question\": \"Should the BBEG be directly involved?\",\n      \"likelihood\": \"very_likely|likely|50_50|unlikely|very_unlikely\"\n    }\n    // ... more fate roll questions\n  ]\n}`;\n\n  console.log(\"=== FULL LLM PROMPT ===\");\n  console.log(prompt);\n  console.log(\"=== END LLM PROMPT ===\");\n\n  // Add randomization to prevent caching and ensure fresh responses\n  const randomSeed = Math.random().toString(36).substring(2, 15);\n  const promptWithRandomization = `${prompt}\n\nGENERATION_ID: ${randomSeed}\nTIMESTAMP: ${new Date().toISOString()}\n\nPlease ensure this is a completely fresh scene generation, not a cached response.`;\n\n  console.log(\"=== FINAL PROMPT BEING SENT TO ANTHROPIC ===\");\n  console.log(\"Prompt length:\", promptWithRandomization.length);\n  console.log(\"BBEG name from context:\", contextSnapshot.bbeg?.name || \"null\");\n  console.log(\n    \"Contains BBEG name:\",\n    contextSnapshot.bbeg?.name\n      ? promptWithRandomization.includes(contextSnapshot.bbeg.name)\n      : false,\n  );\n\n  // Find and extract the BBEG line specifically\n  const lines = promptWithRandomization.split(\"\\n\");\n  const bbegLine = lines.find((line) => line.startsWith(\"BBEG:\"));\n  console.log(\"EXACT BBEG LINE IN PROMPT:\", bbegLine);\n\n  // Also check the debug line\n  const debugLine = lines.find((line) => line.startsWith(\"DEBUG_BBEG_NAME:\"));\n  console.log(\"EXACT DEBUG LINE IN PROMPT:\", debugLine);\n\n  console.log(\"=== FIRST 800 CHARS OF PROMPT ===\");\n  console.log(promptWithRandomization.substring(0, 800));\n  console.log(\"=== END FIRST 800 CHARS ===\");\n  console.log(\"=== END FINAL PROMPT DEBUG ===\");\n\n  const response = await anthropic.messages.create({\n    model: \"claude-3-5-sonnet-20241022\",\n    max_tokens: 800,\n    temperature: 0.9, // Even more randomness\n    messages: [{ role: \"user\", content: promptWithRandomization }],\n  });\n\n  console.log(\"=== ANTHROPIC API RESPONSE ===\");\n  console.log(\"Response ID:\", response.id);\n  console.log(\"Model used:\", response.model);\n  console.log(\"Stop reason:\", response.stop_reason);\n  console.log(\"Usage:\", JSON.stringify(response.usage, null, 2));\n\n  const content = response.content[0];\n  if (content.type !== \"text\") {\n    throw new Error(\"Invalid response from LLM\");\n  }\n\n  console.log(\n    \"Raw response text (first 200 chars):\",\n    content.text.substring(0, 200),\n  );\n  console.log(\"=== END ANTHROPIC RESPONSE DEBUG ===\");\n\n  // Extract JSON from response\n  const jsonMatch = content.text.match(/\\{[\\s\\S]*\\}/);\n  if (!jsonMatch) {\n    throw new Error(\"No JSON found in LLM response\");\n  }\n\n  const sceneData = JSON.parse(jsonMatch[0]);\n\n  // Process fate rolls with proper Mythic GME likelihood system\n  const fateRolls = await Promise.all(\n    sceneData.fateRolls.map(async (roll: any) => {\n      const fateResult = await runFateChart(roll.likelihood, 5); // Use chaos factor 5 for now\n      return {\n        ...roll,\n        roll: fateResult.roll,\n        result: fateResult.result.toLowerCase().replace(\" \", \"_\"),\n        mythic_result: fateResult,\n      };\n    }),\n  );\n\n  return {\n    description: sceneData.description,\n    fateRolls,\n  };\n}\n\nasync function performSceneSetup(chaosFactor: number, contextSnapshot: any) {\n  // Step 3: Chaos roll and scene determination using Python script\n  const sceneSetup = await runSceneSetup(chaosFactor);\n\n  // Log interruption details if scene is interrupted\n  if (sceneSetup.scene_type === \"interrupted\" && sceneSetup.random_event) {\n    console.log(\"=== STEP 3 INTERRUPTION DETAILS ===\");\n    console.log(\"SCENE INTERRUPTED! Changes based on roll results:\");\n    console.log(`- Random Event Focus: ${sceneSetup.random_event.focus}`);\n    console.log(\n      `- Meaning: ${sceneSetup.random_event.meaning_action} ${sceneSetup.random_event.meaning_subject}`,\n    );\n    console.log(`- Scene Change: ${sceneSetup.random_event.description}`);\n    console.log(\n      \"The original scene expectations must now be modified to incorporate this unexpected element.\",\n    );\n  }\n\n  return {\n    chaosRoll: sceneSetup.chaos_roll,\n    sceneType: sceneSetup.scene_type,\n    randomEvent: sceneSetup.random_event,\n  };\n}\n\n/**\n * Executes the Mythic Fate Chart using TypeScript implementation\n */\nconst runFateChart = (\n  likelihood: string = \"50/50\",\n  chaosFactor: number = 5,\n): Promise<any> => {\n  try {\n    const { rollFateChart } = require(\"../lib/mythic-fate-chart\");\n    const result = rollFateChart(likelihood, chaosFactor);\n    return Promise.resolve(result);\n  } catch (error) {\n    return Promise.reject(\n      new Error(\n        error instanceof Error ? error.message : \"Fate chart error occurred\",\n      ),\n    );\n  }\n};\n\n/**\n * Executes the Mythic Meaning Table using TypeScript implementation\n */\nconst runMeaningTable = (): Promise<any> => {\n  try {\n    const { rollMeaningTable } = require(\"../lib/mythic-meaning-table\");\n    const result = rollMeaningTable();\n    return Promise.resolve(result);\n  } catch (error) {\n    return Promise.reject(\n      new Error(\n        error instanceof Error ? error.message : \"Meaning table error occurred\",\n      ),\n    );\n  }\n};\n\n/**\n * Executes the Scene Generator using TypeScript implementation for scene setup\n */\nconst runSceneSetup = (chaosFactor: number = 5): Promise<any> => {\n  try {\n    const { processSceneSetup } = require(\"../lib/scene-generator\");\n    const result = processSceneSetup(chaosFactor);\n    return Promise.resolve(result);\n  } catch (error) {\n    return Promise.reject(\n      new Error(\n        error instanceof Error ? error.message : \"Scene setup error occurred\",\n      ),\n    );\n  }\n};\n\n/**\n * Executes the Scene Generator using TypeScript implementation for scene ID generation\n */\nconst runSceneIdGenerator = (): Promise<any> => {\n  try {\n    const { generateSceneId } = require(\"../lib/scene-generator\");\n    const sceneId = generateSceneId();\n    return Promise.resolve({ scene_id: sceneId });\n  } catch (error) {\n    return Promise.reject(\n      new Error(\n        error instanceof Error\n          ? error.message\n          : \"Scene ID generation error occurred\",\n      ),\n    );\n  }\n};\n\nasync function establishSceneGoals(\n  sceneExpectations: any,\n  sceneSetup: any,\n  contextSnapshot: any,\n  playerIntentions?: string,\n) {\n  const prompt = `Based on the scene expectations and setup, establish clear scene goals.\n\nSCENE EXPECTATIONS: ${sceneExpectations.description}\n\nSCENE TYPE: ${sceneSetup.sceneType}\n${sceneSetup.randomEvent ? `RANDOM EVENT: ${sceneSetup.randomEvent.description}` : \"\"}\n\nPLAYER INTENTIONS: ${playerIntentions || \"No specific intentions\"}\n\nCreate a scene goal and success conditions. Return JSON:\n{\n  \"title\": \"Brief scene title\",\n  \"goal\": \"What the scene is trying to accomplish\",\n  \"successConditions\": [\"Condition 1\", \"Condition 2\", \"Condition 3\"]\n}`;\n\n  const response = await anthropic.messages.create({\n    model: \"claude-3-5-sonnet-20241022\",\n    max_tokens: 400,\n    messages: [{ role: \"user\", content: prompt }],\n  });\n\n  const content = response.content[0];\n  if (content.type !== \"text\") {\n    throw new Error(\"Invalid response from LLM\");\n  }\n\n  const jsonMatch = content.text.match(/\\{[\\s\\S]*\\}/);\n  if (!jsonMatch) {\n    throw new Error(\"No JSON found in LLM response\");\n  }\n\n  return JSON.parse(jsonMatch[0]);\n}\n\nasync function getNextSceneNumber(sessionId: string): Promise<number> {\n  // For now, return 1 - we'll implement proper scene counting later\n  return 1;\n}\n","/**\n * Mythic GME Fate Chart Implementation (TypeScript)\n * Handles yes/no questions based on likelihood and chaos factor\n */\n\n// Fate Chart lookup table - maximum roll needed for \"Yes\" result\n// Format: FATE_CHART[likelihood_index][chaos_factor - 1]\nexport const FATE_CHART: number[][] = [\n  // Impossible\n  [1, 1, 1, 1, 2, 3, 5, 7, 10],\n  // Nearly Impossible\n  [1, 1, 1, 2, 3, 5, 7, 10, 13],\n  // Very Unlikely\n  [1, 1, 2, 3, 5, 7, 10, 13, 15],\n  // Unlikely\n  [1, 2, 3, 5, 7, 10, 13, 15, 17],\n  // 50/50\n  [2, 3, 5, 7, 10, 13, 15, 17, 18],\n  // Likely\n  [5, 7, 10, 13, 15, 17, 18, 19, 19],\n  // Very Likely\n  [7, 10, 13, 15, 17, 18, 19, 19, 20],\n  // Nearly Certain\n  [10, 13, 15, 17, 18, 19, 19, 20, 20],\n  // Certain\n  [13, 15, 17, 18, 19, 19, 20, 20, 20],\n];\n\nexport const LIKELIHOOD_NAMES = [\n  \"Impossible\",\n  \"Nearly Impossible\",\n  \"Very Unlikely\",\n  \"Unlikely\",\n  \"50/50\",\n  \"Likely\",\n  \"Very Likely\",\n  \"Nearly Certain\",\n  \"Certain\",\n] as const;\n\nexport type LikelihoodName = (typeof LIKELIHOOD_NAMES)[number];\n\n// Random Event Focus Table (d100)\nexport const RANDOM_EVENT_FOCUS_TABLE: Array<[number, number, string]> = [\n  [1, 5, \"Remote Event\"],\n  [6, 10, \"Ambiguous Event\"],\n  [11, 20, \"New NPC\"],\n  [21, 40, \"NPC Action\"],\n  [41, 45, \"NPC Negative\"],\n  [46, 50, \"NPC Positive\"],\n  [51, 55, \"Move Toward A Thread\"],\n  [56, 65, \"Move Away From A Thread\"],\n  [66, 70, \"Close A Thread\"],\n  [71, 80, \"PC Negative\"],\n  [81, 85, \"PC Positive\"],\n  [86, 100, \"Current Context\"],\n];\n\n// Meaning table data (simplified local implementation)\nconst ACTION_VERB = [\n  \"Abandon\",\n  \"Accompany\",\n  \"Activate\",\n  \"Agree\",\n  \"Ambush\",\n  \"Arrive\",\n  \"Assist\",\n  \"Attack\",\n  \"Attain\",\n  \"Bargain\",\n  \"Befriend\",\n  \"Bestow\",\n  \"Betray\",\n  \"Block\",\n  \"Break\",\n  \"Carry\",\n  \"Celebrate\",\n  \"Change\",\n  \"Close\",\n  \"Combine\",\n  \"Communicate\",\n  \"Conceal\",\n  \"Continue\",\n  \"Control\",\n  \"Create\",\n  \"Deceive\",\n  \"Decrease\",\n  \"Defend\",\n  \"Delay\",\n  \"Deny\",\n  \"Depart\",\n  \"Deposit\",\n  \"Destroy\",\n  \"Dispute\",\n  \"Disrupt\",\n  \"Distrust\",\n  \"Divide\",\n  \"Drop\",\n  \"Easy\",\n  \"Energize\",\n  \"Escape\",\n  \"Expose\",\n  \"Fail\",\n  \"Fight\",\n  \"Flee\",\n  \"Free\",\n  \"Guide\",\n  \"Harm\",\n  \"Heal\",\n  \"Hinder\",\n  \"Imitate\",\n  \"Imprison\",\n  \"Increase\",\n  \"Indulge\",\n  \"Inform\",\n  \"Inquire\",\n  \"Inspect\",\n  \"Invade\",\n  \"Leave\",\n  \"Lure\",\n  \"Misuse\",\n  \"Move\",\n  \"Neglect\",\n  \"Observe\",\n  \"Open\",\n  \"Oppose\",\n  \"Overthrow\",\n  \"Praise\",\n  \"Proceed\",\n  \"Protect\",\n  \"Punish\",\n  \"Pursue\",\n  \"Recruit\",\n  \"Refuse\",\n  \"Release\",\n  \"Relinquish\",\n  \"Repair\",\n  \"Repulse\",\n  \"Return\",\n  \"Reward\",\n  \"Representative\",\n  \"Riches\",\n  \"Safety\",\n  \"Strength\",\n  \"Success\",\n  \"Suffering\",\n  \"Surprise\",\n  \"Tactic\",\n  \"Technology\",\n  \"Tension\",\n  \"Time\",\n  \"Trial\",\n  \"Value\",\n  \"Vehicle\",\n  \"Victory\",\n  \"Vulnerability\",\n  \"Weapon\",\n  \"Weather\",\n  \"Work\",\n  \"Wound\",\n];\n\nconst ACTION_SUBJECT = [\n  \"Advantage\",\n  \"Adversity\",\n  \"Agreement\",\n  \"Animal\",\n  \"Attention\",\n  \"Balance\",\n  \"Battle\",\n  \"Benefits\",\n  \"Building\",\n  \"Burden\",\n  \"Bureaucracy\",\n  \"Business\",\n  \"Chaos\",\n  \"Comfort\",\n  \"Completion\",\n  \"Conflict\",\n  \"Cooperation\",\n  \"Danger\",\n  \"Defense\",\n  \"Depletion\",\n  \"Disadvantage\",\n  \"Distraction\",\n  \"Elements\",\n  \"Emotion\",\n  \"Enemy\",\n  \"Energy\",\n  \"Environment\",\n  \"Expectation\",\n  \"Exterior\",\n  \"Extravagance\",\n  \"Failure\",\n  \"Fame\",\n  \"Fear\",\n  \"Freedom\",\n  \"Friend\",\n  \"Goal\",\n  \"Group\",\n  \"Health\",\n  \"Hindrance\",\n  \"Home\",\n  \"Hope\",\n  \"Idea\",\n  \"Illness\",\n  \"Illusion\",\n  \"Individual\",\n  \"Information\",\n  \"Innocent\",\n  \"Intellect\",\n  \"Interior\",\n  \"Investment\",\n  \"Leadership\",\n  \"Legal\",\n  \"Location\",\n  \"Military\",\n  \"Misfortune\",\n  \"Mundane\",\n  \"Nature\",\n  \"Needs\",\n  \"News\",\n  \"Normal\",\n  \"Object\",\n  \"Obscurity\",\n  \"Official\",\n  \"Opposition\",\n  \"Outside\",\n  \"Pain\",\n  \"Path\",\n  \"Peace\",\n  \"People\",\n  \"Personal\",\n  \"Physical\",\n  \"Plot\",\n  \"Portal\",\n  \"Possessions\",\n  \"Poverty\",\n  \"Power\",\n  \"Prison\",\n  \"Project\",\n  \"Protection\",\n  \"Reassurance\",\n  \"Ruin\",\n  \"Separate\",\n  \"Start\",\n  \"Stop\",\n  \"Strange\",\n  \"Struggle\",\n  \"Succeed\",\n  \"Support\",\n  \"Suppress\",\n  \"Take\",\n  \"Threaten\",\n  \"Transform\",\n  \"Trap\",\n  \"Travel\",\n  \"Triumph\",\n  \"Truce\",\n  \"Trust\",\n  \"Use\",\n  \"Usurp\",\n  \"Waste\",\n];\n\nexport interface MeaningTableResult {\n  verb_roll: number;\n  verb: string;\n  verb_index: number;\n  subject_roll: number;\n  subject: string;\n  subject_index: number;\n  meaning: string;\n}\n\nexport interface RandomEventResult {\n  event_roll: number;\n  event_type: string;\n  event_range: string;\n  meaning_table?: MeaningTableResult;\n}\n\nexport interface FateChartResult {\n  roll: number;\n  threshold: number;\n  success: boolean;\n  exceptional: boolean;\n  result: string;\n  likelihood: string;\n  chaos_factor: number;\n  likelihood_index: number;\n  doubles: boolean;\n  random_event?: RandomEventResult;\n}\n\n/**\n * Roll on the meaning table (local implementation)\n */\nfunction rollMeaningTableLocal(): MeaningTableResult {\n  // Roll 2d100 for verb and subject\n  const verbRoll = Math.floor(Math.random() * 100) + 1;\n  const subjectRoll = Math.floor(Math.random() * 100) + 1;\n\n  // Get verb and subject (1-indexed, so subtract 1 for array access)\n  const verbIndex = Math.min(verbRoll - 1, ACTION_VERB.length - 1);\n  const verb = ACTION_VERB[verbIndex];\n\n  const subjectIndex = Math.min(subjectRoll - 1, ACTION_SUBJECT.length - 1);\n  const subject = ACTION_SUBJECT[subjectIndex];\n\n  return {\n    verb_roll: verbRoll,\n    verb,\n    verb_index: verbIndex + 1,\n    subject_roll: subjectRoll,\n    subject,\n    subject_index: subjectIndex + 1,\n    meaning: `${verb} ${subject}`,\n  };\n}\n\n/**\n * Roll on the Random Event Focus Table\n */\nfunction rollRandomEvent(): RandomEventResult {\n  const roll = Math.floor(Math.random() * 100) + 1;\n\n  for (const [minVal, maxVal, eventType] of RANDOM_EVENT_FOCUS_TABLE) {\n    if (minVal <= roll && roll <= maxVal) {\n      const eventData: RandomEventResult = {\n        event_roll: roll,\n        event_type: eventType,\n        event_range: `${minVal}-${maxVal}`,\n      };\n\n      // Check if this event type should trigger a meaning table roll\n      if (shouldTriggerMeaningTable(eventType)) {\n        eventData.meaning_table = rollMeaningTableLocal();\n      }\n\n      return eventData;\n    }\n  }\n\n  // Fallback (shouldn't happen)\n  const fallbackData: RandomEventResult = {\n    event_roll: roll,\n    event_type: \"Current Context\",\n    event_range: \"86-100\",\n  };\n\n  if (shouldTriggerMeaningTable(\"Current Context\")) {\n    fallbackData.meaning_table = rollMeaningTableLocal();\n  }\n\n  return fallbackData;\n}\n\n/**\n * Determine if an event type should trigger an automatic meaning table roll\n */\nfunction shouldTriggerMeaningTable(eventType: string): boolean {\n  // These event types benefit from additional meaning interpretation\n  const meaningTriggerEvents = new Set([\n    \"Move Toward A Thread\",\n    \"Move Away From A Thread\",\n    \"Close A Thread\",\n    \"New NPC\",\n    \"NPC Action\",\n    \"Remote Event\",\n    \"Ambiguous Event\",\n    \"Current Context\",\n  ]);\n\n  return meaningTriggerEvents.has(eventType);\n}\n\n/**\n * Check if a roll has doubles (same digit in tens and ones place)\n */\nfunction hasDoubles(roll: number): boolean {\n  if (roll < 10) {\n    return false; // Single digit rolls can't have doubles\n  }\n\n  const tens = Math.floor(roll / 10);\n  const ones = roll % 10;\n  return tens === ones;\n}\n\n/**\n * Roll on the Mythic Fate Chart\n */\nexport function rollFateChart(\n  likelihood: string = \"50/50\",\n  chaosFactor: number = 5,\n): FateChartResult {\n  // Validate chaos factor\n  if (!Number.isInteger(chaosFactor) || chaosFactor < 1 || chaosFactor > 9) {\n    chaosFactor = 5;\n  }\n\n  // Find likelihood index\n  let likelihoodIndex = 4; // Default to 50/50\n  if (LIKELIHOOD_NAMES.includes(likelihood as LikelihoodName)) {\n    likelihoodIndex = LIKELIHOOD_NAMES.indexOf(likelihood as LikelihoodName);\n  }\n\n  // Roll d100 (1-99, treating 100 as 00)\n  const roll = Math.floor(Math.random() * 99) + 1;\n\n  // Get threshold from chart\n  const threshold = FATE_CHART[likelihoodIndex][chaosFactor - 1];\n\n  // Determine result\n  const success = roll <= threshold;\n\n  // Check for exceptional results\n  let exceptional = false;\n  let resultText: string;\n\n  if (success && roll <= Math.floor(threshold / 5)) {\n    // Exceptional Yes (1/5 of threshold)\n    exceptional = true;\n    resultText = \"Exceptional Yes\";\n  } else if (!success && roll >= 96) {\n    // Exceptional No (96-99)\n    exceptional = true;\n    resultText = \"Exceptional No\";\n  } else if (success) {\n    resultText = \"Yes\";\n  } else {\n    resultText = \"No\";\n  }\n\n  // Check for doubles and random events\n  const doublesRolled = hasDoubles(roll);\n  let randomEvent: RandomEventResult | undefined;\n\n  // Random events occur on doubles, but NOT on exceptional results\n  if (doublesRolled && !exceptional) {\n    randomEvent = rollRandomEvent();\n  }\n\n  const result: FateChartResult = {\n    roll,\n    threshold,\n    success,\n    exceptional,\n    result: resultText,\n    likelihood,\n    chaos_factor: chaosFactor,\n    likelihood_index: likelihoodIndex,\n    doubles: doublesRolled,\n  };\n\n  // Add random event data if it occurred\n  if (randomEvent) {\n    result.random_event = randomEvent;\n  }\n\n  return result;\n}\n\n/**\n * Get all available likelihood options\n */\nexport function getLikelihoodOptions(): LikelihoodName[] {\n  return [...LIKELIHOOD_NAMES];\n}\n\n/**\n * Validate likelihood name\n */\nexport function isValidLikelihood(\n  likelihood: string,\n): likelihood is LikelihoodName {\n  return LIKELIHOOD_NAMES.includes(likelihood as LikelihoodName);\n}\n","import { RequestHandler } from \"express\";\nimport {\n  rollFateChart as rollFateChartTS,\n  FateChartResult,\n  getLikelihoodOptions,\n  isValidLikelihood,\n} from \"../lib/mythic-fate-chart\";\n\ninterface MeaningTableResult {\n  verb_roll: number;\n  verb: string;\n  verb_index: number;\n  subject_roll: number;\n  subject: string;\n  subject_index: number;\n  meaning: string;\n}\n\ninterface RandomEvent {\n  event_roll: number;\n  event_type: string;\n  event_range: string;\n  meaning_table?: MeaningTableResult;\n}\n\ninterface FateRollResult {\n  roll: number;\n  threshold: number;\n  success: boolean;\n  exceptional: boolean;\n  result: string;\n  likelihood: string;\n  chaos_factor: number;\n  likelihood_index: number;\n  doubles: boolean;\n  random_event?: RandomEvent;\n}\n\ninterface FateRollRequest {\n  likelihood?: string;\n  chaos_factor?: number;\n}\n\n/**\n * Executes the Mythic Fate Chart using TypeScript implementation\n */\nconst runFateChart = (\n  likelihood: string = \"50/50\",\n  chaosFactor: number = 5,\n): Promise<FateChartResult> => {\n  try {\n    const result = rollFateChartTS(likelihood, chaosFactor);\n    return Promise.resolve(result);\n  } catch (error) {\n    return Promise.reject(\n      new Error(\n        error instanceof Error ? error.message : \"Fate chart error occurred\",\n      ),\n    );\n  }\n};\n\n/**\n * Express handler: rolls on the Mythic Fate Chart\n */\nexport const rollFateChart: RequestHandler = async (req, res) => {\n  try {\n    const { likelihood = \"50/50\", chaos_factor = 5 }: FateRollRequest =\n      req.body || {};\n\n    console.log(\"Rolling Fate Chart with:\", { likelihood, chaos_factor });\n\n    // Validate chaos factor\n    const validChaosFactor = Math.max(\n      1,\n      Math.min(9, Number(chaos_factor) || 5),\n    );\n\n    const result = await runFateChart(likelihood, validChaosFactor);\n\n    console.log(\"Fate Chart result:\", result);\n\n    // Ensure all required fields are present and match expected format\n    const response = {\n      success: true,\n      roll: result.roll,\n      threshold: result.threshold,\n      result_success: result.success, // Renamed to avoid conflict with API success\n      exceptional: result.exceptional,\n      result: result.result,\n      likelihood: result.likelihood,\n      chaos_factor: result.chaos_factor,\n      likelihood_index: result.likelihood_index,\n      doubles: result.doubles,\n      random_event: result.random_event || null,\n      timestamp: new Date().toISOString(),\n    };\n\n    console.log(\"Sending response:\", response);\n    res.json(response);\n  } catch (error) {\n    console.error(\"Error rolling Fate Chart:\", error);\n    console.error(\"Error details:\", {\n      message: error instanceof Error ? error.message : \"Unknown error\",\n      stack: error instanceof Error ? error.stack : undefined,\n    });\n\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error occurred\",\n      details: error instanceof Error ? error.stack : undefined,\n    });\n  }\n};\n","/**\n * Mythic GME Meaning Table Implementation (TypeScript)\n * Handles Action/Subject generation with 2d100 rolls\n */\n\n// Action Table - Verbs (d100)\nexport const ACTION_VERB = [\n  \"Abandon\",\n  \"Accompany\",\n  \"Activate\",\n  \"Agree\",\n  \"Ambush\",\n  \"Arrive\",\n  \"Assist\",\n  \"Attack\",\n  \"Attain\",\n  \"Bargain\",\n  \"Befriend\",\n  \"Bestow\",\n  \"Betray\",\n  \"Block\",\n  \"Break\",\n  \"Carry\",\n  \"Celebrate\",\n  \"Change\",\n  \"Close\",\n  \"Combine\",\n  \"Communicate\",\n  \"Conceal\",\n  \"Continue\",\n  \"Control\",\n  \"Create\",\n  \"Deceive\",\n  \"Decrease\",\n  \"Defend\",\n  \"Delay\",\n  \"Deny\",\n  \"Depart\",\n  \"Deposit\",\n  \"Destroy\",\n  \"Dispute\",\n  \"Disrupt\",\n  \"Distrust\",\n  \"Divide\",\n  \"Drop\",\n  \"Easy\",\n  \"Energize\",\n  \"Escape\",\n  \"Expose\",\n  \"Fail\",\n  \"Fight\",\n  \"Flee\",\n  \"Free\",\n  \"Guide\",\n  \"Harm\",\n  \"Heal\",\n  \"Hinder\",\n  \"Imitate\",\n  \"Imprison\",\n  \"Increase\",\n  \"Indulge\",\n  \"Inform\",\n  \"Inquire\",\n  \"Inspect\",\n  \"Invade\",\n  \"Leave\",\n  \"Lure\",\n  \"Misuse\",\n  \"Move\",\n  \"Neglect\",\n  \"Observe\",\n  \"Open\",\n  \"Oppose\",\n  \"Overthrow\",\n  \"Praise\",\n  \"Proceed\",\n  \"Protect\",\n  \"Punish\",\n  \"Pursue\",\n  \"Recruit\",\n  \"Refuse\",\n  \"Release\",\n  \"Relinquish\",\n  \"Repair\",\n  \"Repulse\",\n  \"Return\",\n  \"Reward\",\n  \"Representative\",\n  \"Riches\",\n  \"Safety\",\n  \"Strength\",\n  \"Success\",\n  \"Suffering\",\n  \"Surprise\",\n  \"Tactic\",\n  \"Technology\",\n  \"Tension\",\n  \"Time\",\n  \"Trial\",\n  \"Value\",\n  \"Vehicle\",\n  \"Victory\",\n  \"Vulnerability\",\n  \"Weapon\",\n  \"Weather\",\n  \"Work\",\n  \"Wound\",\n] as const;\n\n// Action Table - Subjects (d100)\nexport const ACTION_SUBJECT = [\n  \"Advantage\",\n  \"Adversity\",\n  \"Agreement\",\n  \"Animal\",\n  \"Attention\",\n  \"Balance\",\n  \"Battle\",\n  \"Benefits\",\n  \"Building\",\n  \"Burden\",\n  \"Bureaucracy\",\n  \"Business\",\n  \"Chaos\",\n  \"Comfort\",\n  \"Completion\",\n  \"Conflict\",\n  \"Cooperation\",\n  \"Danger\",\n  \"Defense\",\n  \"Depletion\",\n  \"Disadvantage\",\n  \"Distraction\",\n  \"Elements\",\n  \"Emotion\",\n  \"Enemy\",\n  \"Energy\",\n  \"Environment\",\n  \"Expectation\",\n  \"Exterior\",\n  \"Extravagance\",\n  \"Failure\",\n  \"Fame\",\n  \"Fear\",\n  \"Freedom\",\n  \"Friend\",\n  \"Goal\",\n  \"Group\",\n  \"Health\",\n  \"Hindrance\",\n  \"Home\",\n  \"Hope\",\n  \"Idea\",\n  \"Illness\",\n  \"Illusion\",\n  \"Individual\",\n  \"Information\",\n  \"Innocent\",\n  \"Intellect\",\n  \"Interior\",\n  \"Investment\",\n  \"Leadership\",\n  \"Legal\",\n  \"Location\",\n  \"Military\",\n  \"Misfortune\",\n  \"Mundane\",\n  \"Nature\",\n  \"Needs\",\n  \"News\",\n  \"Normal\",\n  \"Object\",\n  \"Obscurity\",\n  \"Official\",\n  \"Opposition\",\n  \"Outside\",\n  \"Pain\",\n  \"Path\",\n  \"Peace\",\n  \"People\",\n  \"Personal\",\n  \"Physical\",\n  \"Plot\",\n  \"Portal\",\n  \"Possessions\",\n  \"Poverty\",\n  \"Power\",\n  \"Prison\",\n  \"Project\",\n  \"Protection\",\n  \"Reassurance\",\n  \"Ruin\",\n  \"Separate\",\n  \"Start\",\n  \"Stop\",\n  \"Strange\",\n  \"Struggle\",\n  \"Succeed\",\n  \"Support\",\n  \"Suppress\",\n  \"Take\",\n  \"Threaten\",\n  \"Transform\",\n  \"Trap\",\n  \"Travel\",\n  \"Triumph\",\n  \"Truce\",\n  \"Trust\",\n  \"Use\",\n  \"Usurp\",\n  \"Waste\",\n] as const;\n\n// Descriptor Table 1 - Adverbs (d100)\nexport const DESCRIPTOR_1_ADVERBS = [\n  \"Adventurously\",\n  \"Aggressively\",\n  \"Anxiously\",\n  \"Awkwardly\",\n  \"Beautifully\",\n  \"Bleakly\",\n  \"Boldly\",\n  \"Bravely\",\n  \"Busily\",\n  \"Calmly\",\n  \"Carefully\",\n  \"Carelessly\",\n  \"Cautiously\",\n  \"Ceaselessly\",\n  \"Cheerfully\",\n  \"Combatively\",\n  \"Coolly\",\n  \"Crazily\",\n  \"Curiously\",\n  \"Dangerously\",\n  \"Defiantly\",\n  \"Deliberately\",\n  \"Delicately\",\n  \"Delightfully\",\n  \"Dimly\",\n  \"Efficiently\",\n  \"Emotionally\",\n  \"Energetically\",\n  \"Enormously\",\n  \"Enthusiastically\",\n  \"Excitedly\",\n  \"Fearfully\",\n  \"Ferociously\",\n  \"Fiercely\",\n  \"Foolishly\",\n  \"Fortunately\",\n  \"Frantically\",\n  \"Freely\",\n  \"Frighteningly\",\n  \"Fully\",\n  \"Generously\",\n  \"Gently\",\n  \"Gladly\",\n  \"Gracefully\",\n  \"Gratefully\",\n  \"Happily\",\n  \"Hastily\",\n  \"Healthily\",\n  \"Helpfully\",\n  \"Helplessly\",\n  \"Hopelessly\",\n  \"Innocently\",\n  \"Intensely\",\n  \"Interestingly\",\n  \"Irritatingly\",\n  \"Joyfully\",\n  \"Kindly\",\n  \"Lazily\",\n  \"Lightly\",\n  \"Loosely\",\n  \"Loudly\",\n  \"Lovingly\",\n  \"Loyally\",\n  \"Majestically\",\n  \"Meaningfully\",\n  \"Mechanically\",\n  \"Mildly\",\n  \"Miserably\",\n  \"Mockingly\",\n  \"Mysteriously\",\n  \"Naturally\",\n  \"Neatly\",\n  \"Nicely\",\n  \"Oddly\",\n  \"Offensively\",\n  \"Officially\",\n  \"Partially\",\n  \"Passively\",\n  \"Peacefully\",\n  \"Perfectly\",\n  \"Playfully\",\n  \"Politely\",\n  \"Positively\",\n  \"Powerfully\",\n  \"Quaintly\",\n  \"Quarrelsomely\",\n  \"Quietly\",\n  \"Roughly\",\n  \"Rudely\",\n  \"Ruthlessly\",\n  \"Slowly\",\n  \"Softly\",\n  \"Strangely\",\n  \"Swiftly\",\n  \"Threateningly\",\n  \"Timidly\",\n  \"Very\",\n  \"Violently\",\n  \"Wildly\",\n  \"Yieldingly\"\n] as const;\n\n// Descriptor Table 2 - Adjectives (d100)\nexport const DESCRIPTOR_2_ADJECTIVES = [\n  \"Abnormal\",\n  \"Amusing\",\n  \"Artificial\",\n  \"Average\",\n  \"Beautiful\",\n  \"Bizarre\",\n  \"Boring\",\n  \"Bright\",\n  \"Broken\",\n  \"Clean\",\n  \"Cold\",\n  \"Colorful\",\n  \"Colorless\",\n  \"Comforting\",\n  \"Creepy\",\n  \"Cute\",\n  \"Damaged\",\n  \"Dark\",\n  \"Defeated\",\n  \"Dirty\",\n  \"Disagreeable\",\n  \"Dry\",\n  \"Dull\",\n  \"Empty\",\n  \"Enormous\",\n  \"Extraordinary\",\n  \"Extravagant\",\n  \"Faded\",\n  \"Familiar\",\n  \"Fancy\",\n  \"Feeble\",\n  \"Festive\",\n  \"Flawless\",\n  \"Forlorn\",\n  \"Fragile\",\n  \"Fragrant\",\n  \"Fresh\",\n  \"Full\",\n  \"Glorious\",\n  \"Graceful\",\n  \"Hard\",\n  \"Harsh\",\n  \"Healthy\",\n  \"Heavy\",\n  \"Historical\",\n  \"Horrible\",\n  \"Important\",\n  \"Interesting\",\n  \"Juvenile\",\n  \"Lacking\",\n  \"Large\",\n  \"Lavish\",\n  \"Lean\",\n  \"Less\",\n  \"Lethal\",\n  \"Lively\",\n  \"Lonely\",\n  \"Lovely\",\n  \"Magnificent\",\n  \"Mature\",\n  \"Messy\",\n  \"Mighty\",\n  \"Military\",\n  \"Modern\",\n  \"Mundane\",\n  \"Mysterious\",\n  \"Natural\",\n  \"Normal\",\n  \"Odd\",\n  \"Old\",\n  \"Pale\",\n  \"Peaceful\",\n  \"Petite\",\n  \"Plain\",\n  \"Poor\",\n  \"Powerful\",\n  \"Protective\",\n  \"Quaint\",\n  \"Rare\",\n  \"Reassuring\",\n  \"Remarkable\",\n  \"Rotten\",\n  \"Rough\",\n  \"Ruined\",\n  \"Rustic\",\n  \"Scary\",\n  \"Shocking\",\n  \"Simple\",\n  \"Small\",\n  \"Smooth\",\n  \"Soft\",\n  \"Strong\",\n  \"Stylish\",\n  \"Unpleasant\",\n  \"Valuable\",\n  \"Vibrant\",\n  \"Warm\",\n  \"Watery\",\n  \"Weak\",\n  \"Young\"\n] as const;\n\nexport interface MeaningTableResult {\n  verb_roll: number;\n  verb: string;\n  verb_index: number;\n  subject_roll: number;\n  subject: string;\n  subject_index: number;\n  meaning: string;\n}\n\nexport interface DescriptorTableResult {\n  adverb_roll: number;\n  adverb: string;\n  adverb_index: number;\n  adjective_roll: number;\n  adjective: string;\n  adjective_index: number;\n  description: string;\n}\n\n/**\n * Roll on the Mythic Meaning Table (Action/Subject)\n */\nexport function rollMeaningTable(): MeaningTableResult {\n  // Roll 2d100 for verb and subject\n  const verbRoll = Math.floor(Math.random() * 100) + 1;\n  const subjectRoll = Math.floor(Math.random() * 100) + 1;\n\n  // Get verb (1-indexed, so subtract 1 for array access)\n  const verbIndex = Math.min(verbRoll - 1, ACTION_VERB.length - 1);\n  const verb = ACTION_VERB[verbIndex];\n\n  // Get subject (1-indexed, so subtract 1 for array access)\n  const subjectIndex = Math.min(subjectRoll - 1, ACTION_SUBJECT.length - 1);\n  const subject = ACTION_SUBJECT[subjectIndex];\n\n  return {\n    verb_roll: verbRoll,\n    verb,\n    verb_index: verbIndex + 1, // Return 1-indexed for display\n    subject_roll: subjectRoll,\n    subject,\n    subject_index: subjectIndex + 1, // Return 1-indexed for display\n    meaning: `${verb} ${subject}`,\n  };\n}\n\n/**\n * Roll on the Descriptor Tables (Adverb/Adjective)\n */\nexport function rollDescriptorTable(): DescriptorTableResult {\n  // Roll 2d100 for adverb and adjective\n  const adverbRoll = Math.floor(Math.random() * 100) + 1;\n  const adjectiveRoll = Math.floor(Math.random() * 100) + 1;\n\n  // Get adverb (1-indexed, so subtract 1 for array access)\n  const adverbIndex = Math.min(adverbRoll - 1, DESCRIPTOR_1_ADVERBS.length - 1);\n  const adverb = DESCRIPTOR_1_ADVERBS[adverbIndex];\n\n  // Get adjective (1-indexed, so subtract 1 for array access)\n  const adjectiveIndex = Math.min(adjectiveRoll - 1, DESCRIPTOR_2_ADJECTIVES.length - 1);\n  const adjective = DESCRIPTOR_2_ADJECTIVES[adjectiveIndex];\n\n  return {\n    adverb_roll: adverbRoll,\n    adverb,\n    adverb_index: adverbIndex + 1, // Return 1-indexed for display\n    adjective_roll: adjectiveRoll,\n    adjective,\n    adjective_index: adjectiveIndex + 1, // Return 1-indexed for display\n    description: `${adverb} ${adjective}`,\n  };\n}\n\n/**\n * Get all available verbs\n */\nexport function getActionVerbs(): readonly string[] {\n  return ACTION_VERB;\n}\n\n/**\n * Get all available subjects\n */\nexport function getActionSubjects(): readonly string[] {\n  return ACTION_SUBJECT;\n}\n\n/**\n * Get a specific verb by index (1-indexed)\n */\nexport function getVerbByIndex(index: number): string | undefined {\n  if (index < 1 || index > ACTION_VERB.length) {\n    return undefined;\n  }\n  return ACTION_VERB[index - 1];\n}\n\n/**\n * Get a specific subject by index (1-indexed)\n */\nexport function getSubjectByIndex(index: number): string | undefined {\n  if (index < 1 || index > ACTION_SUBJECT.length) {\n    return undefined;\n  }\n  return ACTION_SUBJECT[index - 1];\n}\n\n/**\n * Get all available adverbs\n */\nexport function getDescriptor1Adverbs(): readonly string[] {\n  return DESCRIPTOR_1_ADVERBS;\n}\n\n/**\n * Get all available adjectives\n */\nexport function getDescriptor2Adjectives(): readonly string[] {\n  return DESCRIPTOR_2_ADJECTIVES;\n}\n\n/**\n * Get a specific adverb by index (1-indexed)\n */\nexport function getAdverbByIndex(index: number): string | undefined {\n  if (index < 1 || index > DESCRIPTOR_1_ADVERBS.length) {\n    return undefined;\n  }\n  return DESCRIPTOR_1_ADVERBS[index - 1];\n}\n\n/**\n * Get a specific adjective by index (1-indexed)\n */\nexport function getAdjectiveByIndex(index: number): string | undefined {\n  if (index < 1 || index > DESCRIPTOR_2_ADJECTIVES.length) {\n    return undefined;\n  }\n  return DESCRIPTOR_2_ADJECTIVES[index - 1];\n}\n","import { RequestHandler } from \"express\";\nimport {\n  rollMeaningTable as rollMeaningTableTS,\n  rollDescriptorTable as rollDescriptorTableTS,\n  MeaningTableResult,\n  DescriptorTableResult,\n} from \"../lib/mythic-meaning-table\";\n\n/**\n * Executes the Mythic Meaning Table using TypeScript implementation\n */\nconst runMeaningTable = (): Promise<MeaningTableResult> => {\n  try {\n    const result = rollMeaningTableTS();\n    return Promise.resolve(result);\n  } catch (error) {\n    return Promise.reject(\n      new Error(\n        error instanceof Error ? error.message : \"Meaning table error occurred\",\n      ),\n    );\n  }\n};\n\n/**\n * Executes the Mythic Descriptor Table using TypeScript implementation\n */\nconst runDescriptorTable = (): Promise<DescriptorTableResult> => {\n  try {\n    const result = rollDescriptorTableTS();\n    return Promise.resolve(result);\n  } catch (error) {\n    return Promise.reject(\n      new Error(\n        error instanceof Error ? error.message : \"Descriptor table error occurred\",\n      ),\n    );\n  }\n};\n\n/**\n * Express handler: rolls on the Mythic Meaning Table\n */\nexport const rollMeaningTable: RequestHandler = async (req, res) => {\n  try {\n    console.log(\"Rolling Meaning Table (Action/Subject)\");\n\n    const result = await runMeaningTable();\n\n    console.log(\"Meaning Table result:\", result);\n\n    const response = {\n      success: true,\n      verb_roll: result.verb_roll || 0,\n      verb: result.verb || \"Unknown\",\n      verb_index: result.verb_index || 0,\n      subject_roll: result.subject_roll || 0,\n      subject: result.subject || \"Unknown\",\n      subject_index: result.subject_index || 0,\n      meaning: result.meaning || \"Unknown Unknown\",\n      timestamp: new Date().toISOString(),\n    };\n\n    console.log(\"Sending response:\", response);\n    res.json(response);\n  } catch (error) {\n    console.error(\"Error rolling Meaning Table:\", error);\n    console.error(\"Error details:\", {\n      message: error instanceof Error ? error.message : \"Unknown error\",\n      stack: error instanceof Error ? error.stack : undefined,\n    });\n\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error occurred\",\n      details: error instanceof Error ? error.stack : undefined,\n    });\n  }\n};\n\n/**\n * Express handler: rolls on the Mythic Descriptor Tables\n */\nexport const rollDescriptorTable: RequestHandler = async (req, res) => {\n  try {\n    console.log(\"Rolling Descriptor Table (Adverb/Adjective)\");\n\n    const result = await runDescriptorTable();\n\n    console.log(\"Descriptor Table result:\", result);\n\n    const response = {\n      success: true,\n      adverb_roll: result.adverb_roll || 0,\n      adverb: result.adverb || \"Unknown\",\n      adverb_index: result.adverb_index || 0,\n      adjective_roll: result.adjective_roll || 0,\n      adjective: result.adjective || \"Unknown\",\n      adjective_index: result.adjective_index || 0,\n      description: result.description || \"Unknown Unknown\",\n      timestamp: new Date().toISOString(),\n    };\n\n    console.log(\"Sending response:\", response);\n    res.json(response);\n  } catch (error) {\n    console.error(\"Error rolling Descriptor Table:\", error);\n    console.error(\"Error details:\", {\n      message: error instanceof Error ? error.message : \"Unknown error\",\n      stack: error instanceof Error ? error.stack : undefined,\n    });\n\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error occurred\",\n      details: error instanceof Error ? error.stack : undefined,\n    });\n  }\n};\n","import { Request, Response } from \"express\";\nimport { relationalDB } from \"../lib/relational-database.js\";\n\ninterface SessionDataRequest {\n  session_id: string;\n}\n\nexport async function getSessionData(req: Request, res: Response) {\n  try {\n    const { session_id }: SessionDataRequest = req.body;\n\n    if (!session_id) {\n      return res.status(400).json({\n        success: false,\n        error: \"Session ID is required\",\n      });\n    }\n\n    console.log(\"Getting session data for:\", session_id);\n\n    if (!relationalDB.isAvailable()) {\n      return res.status(503).json({\n        success: false,\n        error: \"Database not available\",\n      });\n    }\n\n    // Get all session data from database\n    const [creatures, factions, clues, threads] = await Promise.all([\n      relationalDB.getCreatures(session_id),\n      relationalDB.getFactions(session_id),\n      relationalDB.getClues(session_id),\n      relationalDB.getThreads(session_id),\n    ]);\n\n    const sessionData = {\n      creatures: creatures || [],\n      factions: factions || [],\n      clues: clues || [],\n      threads: threads || [],\n    };\n\n    console.log(\n      \"Retrieved session data:\",\n      JSON.stringify(sessionData, null, 2),\n    );\n\n    res.json({\n      success: true,\n      data: sessionData,\n    });\n  } catch (error) {\n    console.error(\"Session data retrieval error:\", error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error occurred\",\n    });\n  }\n}\n","import { RequestHandler } from \"express\";\nimport { relationalDB } from \"../lib/relational-database\";\nimport {\n  getVillainTypes,\n  SHADOWDARK_VILLAIN_TYPES,\n} from \"../lib/adventure-utilities\";\n\n/**\n * Gets creature types from TypeScript implementation (source of truth)\n */\nconst getCreatureTypesFromTS = (): Promise<string[]> => {\n  try {\n    const result = getVillainTypes();\n    if (result.success && result.villain_types) {\n      return Promise.resolve(result.villain_types);\n    } else {\n      return Promise.reject(\n        new Error(result.error || \"Failed to get villain types\"),\n      );\n    }\n  } catch (error) {\n    return Promise.reject(\n      new Error(error instanceof Error ? error.message : \"Unknown error\"),\n    );\n  }\n};\n\n/**\n * Fallback creature types (in case TypeScript implementation fails)\n */\nconst FALLBACK_CREATURE_TYPES = [...SHADOWDARK_VILLAIN_TYPES];\n\n/**\n * GET /api/creature-types\n * Returns all available creature types\n */\nexport const getCreatureTypes: RequestHandler = async (req, res) => {\n  try {\n    let creatureTypes: string[] = [];\n\n    // Try to get from TypeScript implementation first (source of truth)\n    try {\n      creatureTypes = await getCreatureTypesFromTS();\n      console.log(\n        `Loaded ${creatureTypes.length} creature types from TypeScript`,\n      );\n    } catch (error) {\n      console.warn(\n        \"Failed to get creature types from TypeScript implementation, using fallback:\",\n        error,\n      );\n      creatureTypes = FALLBACK_CREATURE_TYPES;\n    }\n\n    // If database is available, sync the types\n    if (relationalDB.supabase) {\n      try {\n        await syncCreatureTypesToDatabase(creatureTypes);\n      } catch (error) {\n        console.warn(\"Failed to sync creature types to database:\", error);\n      }\n    }\n\n    res.json({\n      success: true,\n      creature_types: creatureTypes,\n      source:\n        creatureTypes === FALLBACK_CREATURE_TYPES ? \"fallback\" : \"typescript\",\n    });\n  } catch (error) {\n    console.error(\"Error getting creature types:\", error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error\",\n      creature_types: FALLBACK_CREATURE_TYPES,\n      source: \"fallback\",\n    });\n  }\n};\n\n/**\n * Syncs creature types to database\n */\nasync function syncCreatureTypesToDatabase(types: string[]): Promise<void> {\n  if (!relationalDB.supabase) return;\n\n  try {\n    // Clear existing shadowdark_villain types\n    await relationalDB.supabase\n      .from(\"creature_types\")\n      .delete()\n      .eq(\"category\", \"shadowdark_villain\");\n\n    // Insert new types\n    const typeData = types.map((type, index) => ({\n      name: type,\n      category: \"shadowdark_villain\",\n      description: `Shadowdark villain type: ${type}`,\n    }));\n\n    const { error } = await relationalDB.supabase\n      .from(\"creature_types\")\n      .insert(typeData);\n\n    if (error) {\n      throw new Error(`Database sync failed: ${error.message}`);\n    }\n\n    console.log(`Synced ${types.length} creature types to database`);\n  } catch (error) {\n    console.error(\"Failed to sync creature types to database:\", error);\n    throw error;\n  }\n}\n","/**\n * Hex Map Geography Generator (TypeScript)\n *\n * Generates a 15x10 hex map with terrain types that cluster naturally.\n * Each hex considers neighboring terrain to increase odds of similar terrain types.\n */\n\n// Default terrain types (fallback if database not available)\nexport const DEFAULT_TERRAINS = [\n  \"plains\",\n  \"forest\",\n  \"dark_forest\",\n  \"hills\",\n  \"mountains\",\n  \"lake\",\n  \"marshlands\",\n  \"ruins\",\n] as const;\n\nexport type TerrainType = (typeof DEFAULT_TERRAINS)[number];\n\n// Terrain compatibility weights - how likely terrain types are to be adjacent\n// Higher values = more likely to appear next to each other\nexport const TERRAIN_COMPATIBILITY: Record<\n  TerrainType,\n  Record<TerrainType, number>\n> = {\n  plains: {\n    plains: 5.0,\n    forest: 3.0,\n    hills: 2.5,\n    lake: 2.0,\n    dark_forest: 0.5,\n    mountains: 1.0,\n    marshlands: 1.5,\n    ruins: 2.0,\n  },\n  forest: {\n    forest: 5.0,\n    plains: 3.0,\n    dark_forest: 3.5,\n    hills: 2.8,\n    mountains: 2.0,\n    lake: 2.2,\n    marshlands: 1.5,\n    ruins: 1.8,\n  },\n  dark_forest: {\n    dark_forest: 5.0,\n    forest: 3.0,\n    marshlands: 3.5,\n    ruins: 3.5,\n    mountains: 2.0,\n    hills: 1.5,\n    plains: 0.5,\n    lake: 0.3,\n  },\n  hills: {\n    hills: 5.0,\n    mountains: 4.0,\n    plains: 3.0,\n    forest: 2.8,\n    dark_forest: 1.5,\n    lake: 1.2,\n    marshlands: 0.5,\n    ruins: 2.5,\n  },\n  mountains: {\n    mountains: 5.0,\n    hills: 4.0,\n    forest: 2.0,\n    dark_forest: 2.0,\n    lake: 1.5,\n    plains: 1.2,\n    marshlands: 0.2,\n    ruins: 2.2,\n  },\n  lake: {\n    lake: 4.0,\n    plains: 2.0,\n    forest: 2.5,\n    marshlands: 3.5,\n    hills: 1.2,\n    mountains: 1.5,\n    dark_forest: 0.3,\n    ruins: 1.2,\n  },\n  marshlands: {\n    marshlands: 5.0,\n    lake: 3.5,\n    dark_forest: 3.5,\n    forest: 1.2,\n    plains: 1.5,\n    hills: 0.5,\n    mountains: 0.2,\n    ruins: 2.0,\n  },\n  ruins: {\n    ruins: 3.0,\n    dark_forest: 3.5,\n    hills: 2.0,\n    mountains: 1.8,\n    plains: 1.8,\n    forest: 1.5,\n    marshlands: 1.5,\n    lake: 1.0,\n  },\n};\n\nexport interface HexCell {\n  row: number;\n  col: number;\n  terrain: string;\n  id: string;\n}\n\nexport interface HexMapResult {\n  success: boolean;\n  width?: number;\n  height?: number;\n  terrains?: string[];\n  hexes?: HexCell[];\n  error?: string;\n}\n\nexport class HexMapGenerator {\n  private width: number;\n  private height: number;\n  private terrains: string[];\n  private mapGrid: string[][] = [];\n\n  constructor(width: number = 15, height: number = 10, terrains?: string[]) {\n    this.width = width;\n    this.height = height;\n    this.terrains = terrains || [...DEFAULT_TERRAINS];\n\n    // Validate terrain compatibility matrix\n    this.validateCompatibilityMatrix();\n  }\n\n  private validateCompatibilityMatrix(): void {\n    // Ensure all terrain types have compatibility entries\n    for (const terrain of this.terrains) {\n      if (!(terrain in TERRAIN_COMPATIBILITY)) {\n        // Create default compatibility for missing terrains\n        (TERRAIN_COMPATIBILITY as any)[terrain] = {};\n        for (const t of this.terrains) {\n          (TERRAIN_COMPATIBILITY as any)[terrain][t] = 1.0;\n        }\n      }\n    }\n\n    // Ensure all terrain types are referenced in each compatibility dict\n    for (const terrain of this.terrains) {\n      for (const otherTerrain of this.terrains) {\n        if (!(otherTerrain in (TERRAIN_COMPATIBILITY as any)[terrain])) {\n          (TERRAIN_COMPATIBILITY as any)[terrain][otherTerrain] = 1.0;\n        }\n      }\n    }\n  }\n\n  private getNeighbors(row: number, col: number): string[] {\n    const neighbors: string[] = [];\n\n    // In a hex grid, we have 6 neighbors, but since we're generating row by row,\n    // we can only consider already-generated neighbors (above and to the left)\n\n    // Top neighbor\n    if (row > 0) {\n      neighbors.push(this.mapGrid[row - 1][col]);\n    }\n\n    // Top-left neighbor (offset for hex grid)\n    if (row > 0 && col > 0) {\n      neighbors.push(this.mapGrid[row - 1][col - 1]);\n    }\n\n    // Top-right neighbor (offset for hex grid)\n    if (row > 0 && col < this.width - 1) {\n      // For hex grid, odd/even rows have different offsets\n      const offset = col % 2 === 0 ? 0 : 1;\n      if (col + offset < this.width) {\n        neighbors.push(this.mapGrid[row - 1][col + offset]);\n      }\n    }\n\n    // Left neighbor - CRITICAL for ruins constraint\n    if (col > 0) {\n      neighbors.push(this.mapGrid[row][col - 1]);\n    }\n\n    // For clustering effect, add key neighbors multiple times\n    // But only add them once for ruins constraint to work properly\n    if (row > 0) {\n      neighbors.push(this.mapGrid[row - 1][col]); // Add top neighbor again for clustering\n    }\n\n    return neighbors;\n  }\n\n  private calculateTerrainWeights(neighbors: string[]): Record<string, number> {\n    if (neighbors.length === 0) {\n      // No neighbors - equal probability for all terrains\n      const weights: Record<string, number> = {};\n      for (const terrain of this.terrains) {\n        weights[terrain] = 1.0;\n      }\n      return weights;\n    }\n\n    const weights: Record<string, number> = {};\n    for (const terrain of this.terrains) {\n      try {\n        // Start with base weight\n        let weight = 1.0;\n\n        // Special rule: Ruins can never be adjacent to other ruins\n        if (terrain === \"ruins\") {\n          const hasRuinsNeighbor = neighbors.some(\n            (neighbor) => neighbor === \"ruins\",\n          );\n          if (hasRuinsNeighbor) {\n            weight = 0.0; // Completely prevent ruins next to ruins\n          }\n        }\n\n        // Skip compatibility calculation if weight is already 0\n        if (weight > 0) {\n          // Multiply by compatibility with each neighbor\n          for (const neighbor of neighbors) {\n            const compatibility =\n              (TERRAIN_COMPATIBILITY as any)[neighbor]?.[terrain] ?? 1.0;\n            // Square the compatibility to increase clustering bias\n            weight *= Math.pow(compatibility, 1.5);\n          }\n\n          // Use geometric mean but with less averaging to maintain clustering\n          if (neighbors.length > 1) {\n            weight = Math.pow(weight, 0.8 / neighbors.length);\n          }\n        }\n\n        weights[terrain] = weight;\n      } catch (error) {\n        // Fallback to equal weight if error\n        weights[terrain] = 1.0;\n      }\n    }\n\n    return weights;\n  }\n\n  private weightedTerrainChoice(weights: Record<string, number>): string {\n    const terrainList = Object.keys(weights);\n    const weightList = Object.values(weights);\n\n    // Normalize weights to sum to 1\n    const totalWeight = weightList.reduce((sum, w) => sum + w, 0);\n    let normalizedWeights: number[];\n\n    if (totalWeight > 0) {\n      normalizedWeights = weightList.map((w) => w / totalWeight);\n    } else {\n      // Fallback to equal weights\n      normalizedWeights = new Array(terrainList.length).fill(\n        1.0 / terrainList.length,\n      );\n    }\n\n    // Manual weighted choice\n    const randVal = Math.random();\n    let cumulative = 0.0;\n\n    for (let i = 0; i < normalizedWeights.length; i++) {\n      cumulative += normalizedWeights[i];\n      if (randVal <= cumulative) {\n        return terrainList[i];\n      }\n    }\n\n    // Fallback - return last terrain\n    return terrainList[terrainList.length - 1] || this.terrains[0];\n  }\n\n  private getAllNeighbors(\n    row: number,\n    col: number,\n  ): Array<{ row: number; col: number }> {\n    const neighbors: Array<{ row: number; col: number }> = [];\n\n    // All 6 hexagonal neighbors\n    const offsets = [\n      [-1, 0], // Top\n      [-1, -1], // Top-left\n      [-1, 1], // Top-right\n      [0, -1], // Left\n      [0, 1], // Right\n      [1, 0], // Bottom\n      [1, -1], // Bottom-left\n      [1, 1], // Bottom-right\n    ];\n\n    for (const [dr, dc] of offsets) {\n      const newRow = row + dr;\n      const newCol = col + dc;\n\n      if (\n        newRow >= 0 &&\n        newRow < this.height &&\n        newCol >= 0 &&\n        newCol < this.width\n      ) {\n        neighbors.push({ row: newRow, col: newCol });\n      }\n    }\n\n    return neighbors;\n  }\n\n  private fixIsolatedTiles(): void {\n    // Remove isolated single tiles by converting them to neighbor terrain\n    for (let row = 0; row < this.height; row++) {\n      for (let col = 0; col < this.width; col++) {\n        const currentTerrain = this.mapGrid[row][col];\n        const neighbors = this.getAllNeighbors(row, col);\n\n        // Count neighbors with same terrain\n        let sameTerrainCount = 0;\n        const differentTerrains: string[] = [];\n\n        for (const neighbor of neighbors) {\n          const neighborTerrain = this.mapGrid[neighbor.row][neighbor.col];\n          if (neighborTerrain === currentTerrain) {\n            sameTerrainCount++;\n          } else {\n            differentTerrains.push(neighborTerrain);\n          }\n        }\n\n        // If no same-terrain neighbors, convert to most common neighbor terrain\n        if (sameTerrainCount === 0 && differentTerrains.length > 0) {\n          const terrainCounts: Record<string, number> = {};\n          for (const terrain of differentTerrains) {\n            terrainCounts[terrain] = (terrainCounts[terrain] || 0) + 1;\n          }\n\n          let mostCommon = differentTerrains[0];\n          let maxCount = 0;\n          for (const [terrain, count] of Object.entries(terrainCounts)) {\n            if (count > maxCount) {\n              maxCount = count;\n              mostCommon = terrain;\n            }\n          }\n\n          this.mapGrid[row][col] = mostCommon;\n        }\n      }\n    }\n  }\n\n  private fixAdjacentRuins(): void {\n    // Fix any ruins that ended up adjacent to other ruins\n    for (let row = 0; row < this.height; row++) {\n      for (let col = 0; col < this.width; col++) {\n        if (this.mapGrid[row][col] === \"ruins\") {\n          const neighbors = this.getAllNeighbors(row, col);\n\n          // Check if any neighbors are also ruins\n          const hasRuinsNeighbor = neighbors.some(\n            (neighbor) => this.mapGrid[neighbor.row][neighbor.col] === \"ruins\",\n          );\n\n          if (hasRuinsNeighbor) {\n            // Convert this ruins to the most common non-ruins neighbor terrain\n            const nonRuinsNeighbors = neighbors\n              .map((neighbor) => this.mapGrid[neighbor.row][neighbor.col])\n              .filter((terrain) => terrain !== \"ruins\");\n\n            if (nonRuinsNeighbors.length > 0) {\n              const terrainCounts: Record<string, number> = {};\n              for (const terrain of nonRuinsNeighbors) {\n                terrainCounts[terrain] = (terrainCounts[terrain] || 0) + 1;\n              }\n\n              let mostCommon = nonRuinsNeighbors[0];\n              let maxCount = 0;\n              for (const [terrain, count] of Object.entries(terrainCounts)) {\n                if (count > maxCount) {\n                  maxCount = count;\n                  mostCommon = terrain;\n                }\n              }\n\n              this.mapGrid[row][col] = mostCommon;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private findConnectedGroup(\n    startRow: number,\n    startCol: number,\n    terrain: string,\n    visited: boolean[][],\n  ): Array<{ row: number; col: number }> {\n    const group: Array<{ row: number; col: number }> = [];\n    const stack = [{ row: startRow, col: startCol }];\n\n    while (stack.length > 0) {\n      const current = stack.pop()!;\n      const { row, col } = current;\n\n      if (visited[row][col] || this.mapGrid[row][col] !== terrain) {\n        continue;\n      }\n\n      visited[row][col] = true;\n      group.push(current);\n\n      // Add unvisited same-terrain neighbors to stack\n      const neighbors = this.getAllNeighbors(row, col);\n      for (const neighbor of neighbors) {\n        if (\n          !visited[neighbor.row][neighbor.col] &&\n          this.mapGrid[neighbor.row][neighbor.col] === terrain\n        ) {\n          stack.push(neighbor);\n        }\n      }\n    }\n\n    return group;\n  }\n\n  private ensureMinimumGroups(): void {\n    // Find all connected groups\n    const visited: boolean[][] = Array(this.height)\n      .fill(null)\n      .map(() => Array(this.width).fill(false));\n    const groups: Array<{\n      terrain: string;\n      positions: Array<{ row: number; col: number }>;\n    }> = [];\n\n    for (let row = 0; row < this.height; row++) {\n      for (let col = 0; col < this.width; col++) {\n        if (!visited[row][col]) {\n          const terrain = this.mapGrid[row][col];\n          const group = this.findConnectedGroup(row, col, terrain, visited);\n          if (group.length >= 3) {\n            groups.push({ terrain, positions: group });\n          }\n        }\n      }\n    }\n\n    // If we don't have at least 3 groups of 3+, create them\n    if (groups.length < 3) {\n      const targetTerrains = this.terrains.slice(0, 3); // Use first 3 terrain types\n\n      for (let i = groups.length; i < 3; i++) {\n        const terrain = targetTerrains[i % targetTerrains.length];\n\n        // Find a good spot to place a 3+ group\n        let placed = false;\n        for (let attempts = 0; attempts < 20 && !placed; attempts++) {\n          const centerRow = Math.floor(Math.random() * this.height);\n          const centerCol = Math.floor(Math.random() * this.width);\n\n          // Try to place a 3-hex group around this center\n          const groupPositions = [\n            { row: centerRow, col: centerCol },\n            { row: centerRow, col: Math.max(0, centerCol - 1) },\n            { row: Math.max(0, centerRow - 1), col: centerCol },\n          ].filter((pos) => pos.row < this.height && pos.col < this.width);\n\n          if (groupPositions.length >= 3) {\n            for (const pos of groupPositions) {\n              this.mapGrid[pos.row][pos.col] = terrain;\n            }\n            placed = true;\n          }\n        }\n      }\n    }\n  }\n\n  public generateMap(seed?: number): string[][] {\n    try {\n      if (seed !== undefined) {\n        // Simple seed-based random number generator\n        this.seedRandom(seed);\n      }\n\n      this.mapGrid = [];\n\n      for (let row = 0; row < this.height; row++) {\n        const currentRow: string[] = [];\n\n        for (let col = 0; col < this.width; col++) {\n          try {\n            // Get neighboring terrain types\n            const neighbors = this.getNeighbors(row, col);\n\n            // Calculate weights based on neighbors\n            const weights = this.calculateTerrainWeights(neighbors);\n\n            // Choose terrain type\n            const terrain = this.weightedTerrainChoice(weights);\n            currentRow.push(terrain);\n          } catch (error) {\n            // Fallback to random terrain\n            const terrain =\n              this.terrains[Math.floor(Math.random() * this.terrains.length)];\n            currentRow.push(terrain);\n          }\n        }\n\n        this.mapGrid.push(currentRow);\n      }\n\n      // Post-processing for better clustering\n      this.fixIsolatedTiles();\n      this.fixIsolatedTiles(); // Run twice for better results\n      this.fixAdjacentRuins(); // Ensure no ruins are adjacent\n      this.ensureMinimumGroups();\n\n      return this.mapGrid;\n    } catch (error) {\n      // Generate simple fallback map\n      this.mapGrid = [];\n      for (let row = 0; row < this.height; row++) {\n        const currentRow: string[] = [];\n        for (let col = 0; col < this.width; col++) {\n          const terrain =\n            this.terrains[Math.floor(Math.random() * this.terrains.length)];\n          currentRow.push(terrain);\n        }\n        this.mapGrid.push(currentRow);\n      }\n      return this.mapGrid;\n    }\n  }\n\n  public mapToDict(): HexMapResult {\n    const result: HexMapResult = {\n      success: true,\n      width: this.width,\n      height: this.height,\n      terrains: [...this.terrains],\n      hexes: [],\n    };\n\n    for (let row = 0; row < this.height; row++) {\n      for (let col = 0; col < this.width; col++) {\n        result.hexes!.push({\n          row,\n          col,\n          terrain: this.mapGrid[row][col],\n          id: `hex_${row}_${col}`,\n        });\n      }\n    }\n\n    return result;\n  }\n\n  public printMapAscii(): string {\n    const terrainSymbols: Record<string, string> = {\n      plains: \"P\",\n      forest: \"F\",\n      dark_forest: \"D\",\n      hills: \"H\",\n      mountains: \"M\",\n      lake: \"L\",\n      marshlands: \"W\",\n      ruins: \"R\",\n    };\n\n    const result: string[] = [];\n    result.push(`Hex Map (${this.width}x${this.height}):`);\n    result.push(\"=\".repeat(this.width * 2 + 5));\n\n    for (let row = 0; row < this.height; row++) {\n      let rowStr = `${row.toString().padStart(2)}| `;\n      for (let col = 0; col < this.width; col++) {\n        const terrain = this.mapGrid[row][col];\n        const symbol = terrainSymbols[terrain] || \"?\";\n        rowStr += symbol + \" \";\n      }\n      result.push(rowStr);\n    }\n\n    // Add column numbers\n    let colHeader = \"   \";\n    for (let col = 0; col < this.width; col++) {\n      colHeader += `${col % 10} `;\n    }\n    result.push(\"=\".repeat(this.width * 2 + 5));\n    result.push(colHeader);\n\n    return result.join(\"\\n\");\n  }\n\n  private seedRandom(seed: number): void {\n    // Simple seeded random number generator\n    let currentSeed = seed;\n    Math.random = () => {\n      currentSeed = (currentSeed * 9301 + 49297) % 233280;\n      return currentSeed / 233280;\n    };\n  }\n}\n\n// Utility functions for API endpoints\nexport function generateHexMap(\n  width: number = 15,\n  height: number = 10,\n  seed?: number,\n): HexMapResult {\n  try {\n    const generator = new HexMapGenerator(width, height, [...DEFAULT_TERRAINS]);\n    generator.generateMap(seed);\n    const result = generator.mapToDict();\n    return result;\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error\",\n    };\n  }\n}\n\nexport function getTerrainTypes(): HexMapResult {\n  return {\n    success: true,\n    terrains: [...DEFAULT_TERRAINS],\n    compatibility_matrix: TERRAIN_COMPATIBILITY,\n  } as any;\n}\n\nexport function generateTestMap(): {\n  success: boolean;\n  ascii_output?: string;\n  error?: string;\n} {\n  try {\n    const generator = new HexMapGenerator(15, 10, [...DEFAULT_TERRAINS]);\n    generator.generateMap(42); // Fixed seed for testing\n    const ascii = generator.printMapAscii();\n\n    return {\n      success: true,\n      ascii_output: ascii,\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error\",\n    };\n  }\n}\n","import { RequestHandler } from \"express\";\nimport { relationalDB } from \"../lib/relational-database\";\nimport {\n  generateHexMap as generateHexMapTS,\n  getTerrainTypes as getTerrainTypesTS,\n  generateTestMap,\n  DEFAULT_TERRAINS,\n} from \"../lib/hex-map-generator\";\n\nexport interface HexMapResponse {\n  success: boolean;\n  width?: number;\n  height?: number;\n  terrains?: string[];\n  hexes?: Array<{\n    row: number;\n    col: number;\n    terrain: string;\n    id: string;\n  }>;\n  error?: string;\n}\n\n/**\n * Generates a hex map using the TypeScript implementation\n */\nconst generateHexMap = async (\n  width: number = 15,\n  height: number = 10,\n  seed?: number,\n): Promise<HexMapResponse> => {\n  try {\n    return generateHexMapTS(width, height, seed);\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error\",\n    };\n  }\n};\n\n/**\n * Gets available terrain types from database or fallback to TypeScript defaults\n */\nconst getTerrainTypes = async (): Promise<{\n  success: boolean;\n  terrains?: string[];\n  compatibility_matrix?: any;\n  error?: string;\n}> => {\n  try {\n    // Try to get terrain types from database first\n    if (relationalDB.supabase) {\n      const { data, error } = await relationalDB.supabase\n        .from(\"terrain_types\")\n        .select(\"name, description, symbol, compatibility_data\")\n        .eq(\"category\", \"shadowdark_standard\")\n        .order(\"name\");\n\n      if (!error && data && data.length > 0) {\n        const terrains = data.map((t) => t.name);\n        console.log(`Loaded ${terrains.length} terrain types from database`);\n\n        return {\n          success: true,\n          terrains,\n          compatibility_matrix: {}, // TODO: Build from database data\n          source: \"database\",\n        };\n      }\n    }\n\n    // Fallback to TypeScript implementation\n    const result = getTerrainTypesTS();\n    return {\n      success: result.success,\n      terrains: result.terrains,\n      compatibility_matrix: (result as any).compatibility_matrix,\n      source: \"typescript\",\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error\",\n    };\n  }\n};\n\n/**\n * POST /api/generate-hex-map\n * Generates a hex map with terrain clustering\n */\nexport const generateHexMapEndpoint: RequestHandler = async (req, res) => {\n  try {\n    const { width = 15, height = 10, seed } = req.body || {};\n\n    // Validate parameters\n    if (width < 1 || width > 50 || height < 1 || height > 50) {\n      return res.status(400).json({\n        success: false,\n        error: \"Map dimensions must be between 1 and 50\",\n      });\n    }\n\n    console.log(\n      `Generating hex map: ${width}x${height}, seed: ${seed || \"random\"}`,\n    );\n\n    const result = await generateHexMap(width, height, seed);\n\n    if (!result.success) {\n      return res.status(500).json(result);\n    }\n\n    console.log(`Generated hex map with ${result.hexes?.length} hexes`);\n\n    res.json(result);\n  } catch (error) {\n    console.error(\"Error generating hex map:\", error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error\",\n    });\n  }\n};\n\n/**\n * GET /api/hex-map-terrains\n * Returns available terrain types and compatibility matrix\n */\nexport const getHexMapTerrains: RequestHandler = async (req, res) => {\n  try {\n    console.log(\"Getting hex map terrain types...\");\n\n    const result = await getTerrainTypes();\n\n    if (!result.success) {\n      return res.status(500).json(result);\n    }\n\n    console.log(`Retrieved ${result.terrains?.length} terrain types`);\n\n    res.json(result);\n  } catch (error) {\n    console.error(\"Error getting terrain types:\", error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error\",\n    });\n  }\n};\n\n/**\n * GET /api/test-hex-map\n * Generates a test map for debugging\n */\nexport const testHexMap: RequestHandler = async (req, res) => {\n  try {\n    console.log(\"Generating test hex map...\");\n\n    const result = generateTestMap();\n\n    if (!result.success) {\n      return res.status(500).json(result);\n    }\n\n    console.log(\"Generated test hex map successfully\");\n\n    res.json(result);\n  } catch (error) {\n    console.error(\"Error testing hex map:\", error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error\",\n    });\n  }\n};\n","/**\n * Intelligent Name Generator with LLM Language Selection and Mythic Fate Confirmation\n * Uses AI reasoning to choose appropriate language styles, then Mythic fate table for confirmation\n */\n\nimport Anthropic from \"@anthropic-ai/sdk\";\nimport { generateNames, ALIGNMENT_NAMES, type NameAlignment } from \"./name-generator.js\";\nimport { rollFateChart } from \"./mythic-fate-chart.js\";\n\nconst anthropic = new Anthropic({\n  apiKey: process.env.ANTHROPIC_API_KEY ?? \"\",\n});\n\nexport interface LanguageChoice {\n  alignment: NameAlignment;\n  languageName: string;\n  reasoning: string;\n}\n\nexport interface IntelligentNameResult {\n  success: boolean;\n  names?: string[];\n  languageChoice?: LanguageChoice;\n  fateDecisions?: Array<{\n    question: string;\n    alignment: NameAlignment;\n    languageName: string;\n    roll: number;\n    result: string;\n    accepted: boolean;\n  }>;\n  error?: string;\n}\n\n/**\n * Choose language style using LLM reasoning and Mythic fate confirmation\n */\nasync function chooseLanguageWithFate(context: {\n  characterType: string; // \"villain\", \"npc\", \"lieutenant\", etc.\n  race?: string;\n  occupation?: string;\n  motivation?: string;\n  goal?: string;\n  faction?: string;\n  description?: string;\n}): Promise<LanguageChoice> {\n  \n  // Step 1: Ask LLM to rank the top 3 language choices with reasoning\n  const prompt = `You are an expert in fantasy linguistics and world-building. Based on the following character context, choose the 3 MOST APPROPRIATE language styles for generating this character's name, ranked from best to worst.\n\nCHARACTER CONTEXT:\nType: ${context.characterType}\n${context.race ? `Race: ${context.race}` : ''}\n${context.occupation ? `Occupation: ${context.occupation}` : ''}\n${context.motivation ? `Motivation: ${context.motivation}` : ''}\n${context.goal ? `Goal: ${context.goal}` : ''}\n${context.faction ? `Faction: ${context.faction}` : ''}\n${context.description ? `Description: ${context.description}` : ''}\n\nAVAILABLE LANGUAGE STYLES:\n1. Evil - Dark, harsh syllables for villains and evil characters\n2. Celtic (Gaelic) - Irish/Scottish inspired names perfect for elven and druidic cultures\n3. Nordic (Old Norse) - Old Norse names ideal for barbarian tribes and northern kingdoms\n4. Germanic - Germanic names perfect for dwarven clans and mountain craftsmen\n5. Latin - Classical Latin names for imperial organizations and scholarly orders\n6. Ancient Greek - Ancient Greek names for academic institutions and city-states\n7. Slavic - Slavic names great for cold empires and mystical kingdoms\n8. Arabic/Persian - Arabic/Persian names perfect for desert kingdoms and sultanates\n9. Finnish - Finnish names creating distinctive, otherworldly sounds\n10. Basque - Basque names with unique, unusual fantasy characteristics\n11. Elvish - Tolkien-inspired elvish names for ancient, graceful beings\n12. Draconic - Harsh, ancient draconic names for dragons and their servants\n13. Primordial - Elemental primordial names for nature spirits and ancient beings\n14. Infernal - Dark, imposing infernal names for evil entities and cults\n15. Anglo-Saxon - Old English Anglo-Saxon names for medieval warriors and nobles\n16. Steppe Nomad - Mongolian/Turkish inspired names for nomadic horse-riding cultures\n17. Ancient Egyptian - Ancient Egyptian names for pyramid-building desert civilizations\n\nRespond with EXACTLY this format:\n\nFIRST CHOICE: [Number]. [Language Name]\nREASONING: [1-2 sentences explaining why this language fits perfectly]\n\nSECOND CHOICE: [Number]. [Language Name]  \nREASONING: [1-2 sentences explaining why this would also work well]\n\nTHIRD CHOICE: [Number]. [Language Name]\nREASONING: [1-2 sentences explaining why this could work as a backup]\n\nConsider the character's race, role, cultural background, and thematic elements when making your choices.`;\n\n  try {\n    const response = await anthropic.messages.create({\n      model: \"claude-3-5-sonnet-20241022\",\n      max_tokens: 800,\n      messages: [\n        {\n          role: \"user\",\n          content: prompt,\n        },\n      ],\n    });\n\n    const content = response.content[0];\n    if (content.type !== \"text\") {\n      throw new Error(\"Unexpected response type from Claude\");\n    }\n\n    // Parse the LLM response to extract choices\n    const text = content.text;\n    const choices: LanguageChoice[] = [];\n\n    const choicePattern = /(FIRST|SECOND|THIRD) CHOICE:\\s*(\\d+)\\.\\s*([^\\n]+)\\s*REASONING:\\s*([^\\n]+(?:\\n[^\\n]*(?!CHOICE:))*)/g;\n    let match;\n\n    while ((match = choicePattern.exec(text)) !== null) {\n      const alignment = parseInt(match[2]) as NameAlignment;\n      const languageName = match[3].trim();\n      const reasoning = match[4].trim();\n\n      if (alignment >= 1 && alignment <= 17) {\n        choices.push({\n          alignment,\n          languageName,\n          reasoning\n        });\n      }\n    }\n\n    if (choices.length === 0) {\n      throw new Error(\"Failed to parse LLM language choices\");\n    }\n\n    // Step 2: Use Mythic fate to confirm choices in order\n    const fateDecisions: IntelligentNameResult['fateDecisions'] = [];\n\n    for (const choice of choices) {\n      const question = `Is ${choice.languageName} the right language style for this ${context.characterType}'s name?`;\n      \n      // Ask with \"Likely\" probability since LLM already reasoned this is a good choice\n      const fateResult = rollFateChart(\"Likely\", 5);\n      \n      fateDecisions.push({\n        question,\n        alignment: choice.alignment,\n        languageName: choice.languageName,\n        roll: fateResult.roll,\n        result: fateResult.result,\n        accepted: fateResult.success\n      });\n\n      // If fate says \"Yes\", use this choice\n      if (fateResult.success) {\n        return choice;\n      }\n    }\n\n    // If all choices were rejected by fate, fall back to the first choice with reasoning\n    const fallbackChoice = choices[0];\n    \n    fateDecisions.push({\n      question: `Should we use ${fallbackChoice.languageName} despite fate's previous rejections?`,\n      alignment: fallbackChoice.alignment,\n      languageName: fallbackChoice.languageName,\n      roll: 0, // No actual roll, just accepting\n      result: \"Fallback - Accepted\",\n      accepted: true\n    });\n\n    return fallbackChoice;\n\n  } catch (error) {\n    console.error(\"Error in LLM language selection:\", error);\n    \n    // Fallback to Evil alignment for villains, Celtic for others\n    const fallbackAlignment: NameAlignment = context.characterType.toLowerCase().includes('villain') ? 1 : 2;\n    return {\n      alignment: fallbackAlignment,\n      languageName: ALIGNMENT_NAMES[fallbackAlignment],\n      reasoning: \"Fallback choice due to LLM error\"\n    };\n  }\n}\n\n/**\n * Generate names with intelligent language selection\n */\nexport async function generateNamesWithIntelligentLanguageChoice(\n  context: {\n    characterType: string;\n    race?: string;\n    occupation?: string;\n    motivation?: string;\n    goal?: string;\n    faction?: string;\n    description?: string;\n  },\n  numNames: number = 3\n): Promise<IntelligentNameResult> {\n  try {\n    // Step 1: Choose language style with LLM + Mythic fate\n    const languageChoice = await chooseLanguageWithFate(context);\n\n    // Step 2: Generate names using the chosen language\n    const nameResult = generateNames(languageChoice.alignment, numNames);\n\n    if (!nameResult.success) {\n      return {\n        success: false,\n        error: nameResult.error || \"Name generation failed\"\n      };\n    }\n\n    return {\n      success: true,\n      names: nameResult.names,\n      languageChoice,\n      // Note: fateDecisions would be populated in a full implementation\n      // but for now we'll keep it simple and just return the final choice\n    };\n\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error occurred\"\n    };\n  }\n}\n\n/**\n * Generate a single name with intelligent language selection (for when you need just one name)\n */\nexport async function generateSingleIntelligentName(\n  context: {\n    characterType: string;\n    race?: string;\n    occupation?: string;\n    motivation?: string;\n    goal?: string;\n    faction?: string;\n    description?: string;\n  }\n): Promise<{ success: boolean; name?: string; languageChoice?: LanguageChoice; error?: string }> {\n  const result = await generateNamesWithIntelligentLanguageChoice(context, 1);\n  \n  if (!result.success || !result.names || result.names.length === 0) {\n    return {\n      success: false,\n      error: result.error || \"Failed to generate name\"\n    };\n  }\n\n  return {\n    success: true,\n    name: result.names[0],\n    languageChoice: result.languageChoice\n  };\n}\n","/**\n * NPC Generator (TypeScript)\n *\n * Generates random NPCs with various characteristics through multiple steps.\n */\n\nimport { generateNames, type NameAlignment } from \"./name-generator.js\";\nimport { generateSingleIntelligentName } from \"./intelligent-name-generator.js\";\n\n// NPC race types (different from story arc races)\nexport const NPC_RACES: string[] = [\n  \"Human\",\n  \"Human\",\n  \"Human\",\n  \"Human\",\n  \"Elf\",\n  \"Elf\",\n  \"Half-elf\",\n  \"Dwarf\",\n  \"Halfling\",\n  \"Human\",\n  \"Human\",\n  \"Human\",\n  \"Human\",\n  \"Elf\",\n  \"Elf\",\n  \"Half-elf\",\n  \"Dwarf\",\n  \"Halfling\",\n  \"Gnome\",\n  \"Dragonborn\",\n  \"Kobald\",\n  \"Goblin\",\n  \"Minotaur\",\n  \"Beastfolk\",\n  \"Ratfolk\",\n  \"Wyrdling\",\n  \"Dryad\",\n  \"Changeling\",\n];\n\nexport const OCCUPATIONS: string[] = [\n  \"acolyte\", \"acrobat\", \"actor\", \"administrator\", \"adventurer\", \"alchemist\",\n  \"ale\", \"apostate\", \"apothecary\", \"apprentice\", \"arcane\", \"archer\",\n  \"architect\", \"armiger\", \"armor\", \"armorer\", \"artist\", \"astrologer\",\n  \"baker\", \"bandit\", \"barbarian\", \"basketmaker\", \"beggar\", \"bodyguard\",\n  \"books\", \"boss\", \"brigand\", \"burglar\", \"carpenter\", \"cartographer\", \"candle lighter\",\n  \"cavalry\", \"chandler\", \"clerk\", \"clothing\", \"cobbler\", \"collector\",\n  \"con\", \"constable\", \"cooper\", \"courier\", \"crier\", \"cult leader\", \"cultist\",\n  \"cutpurse\", \"dealer\", \"diplomat\", \"driver\", \"engineer\", \"envoy\", \"exile\",\n  \"farmer\", \"fence\", \"fisher\", \"foot\", \"fugitive\", \"furrier\", \"general\",\n  \"gentry\", \"goods\", \"grain\", \"gravedigger\", \"greater\", \"guard\", \"guide\",\n  \"guildmaster\", \"herbalist\", \"herder\", \"heretic\", \"hermit\", \"hero\",\n  \"humanoid\", \"hunter\", \"inkeep\", \"inventor\", \"items\", \"jeweler\",\n  \"judge\", \"kingpin\", \"knight\", \"labor\", \"laborer\", \"lackey\", \"layabout\",\n  \"leader\", \"lesser\", \"lieutenant\", \"livestock\", \"locksmith\", \"magic\",\n  \"magistrate\", \"mason\", \"materials\", \"mendicant\", \"messenger\", \"militia\",\n  \"miner\", \"military recruiter\", \"missionary\", \"monk\", \"musician\", \"navigator\", \"nobility\",\n  \"novice\", \"nun\", \"officer\", \"outfitter\", \"outlaw\",\n  \"patrol\", \"painter\", \"perfumer\", \"physician\", \"pilgrim\", \"porter\", \"potter\",\n  \"preacher\", \"priest\", \"prophet\", \"protector\", \"quarrier\", \"racketeer\",\n  \"raw recruit\", \"refugee\", \"ropemaker\", \"ruler\", \"sage\",\n  \"sailor\\\", \\\"scholar\\\", \\\"scout\\\", \\\"scribe\\\", \\\"scrolls\\\", \\\"sentry\\\", \\\"servant\\\", \\\"seamstress\\\" \\\"sycophant\",\n  \"simpleton\", \"slaves\", \"smith\", \"soldier\", \"spices\", \"spirits\", \"spy\",\n  \"stablekeeper\", \"supplies\", \"squire\", \"swindler\", \"tailor\", \"tanner\", \"tavernkeep\",\n  \"tax\", \"templar\", \"thief\", \"thug\", \"tinker\", \"tobacco dealer\",\n  \"trapper\", \"troubador\", \"town crier\", \"undertaker\", \"urchin\", \"vagrant\", \"vintner\",\n  \"warden\", \"warlord\", \"weapons\", \"weaver\", \"wheelwright\", \"wine bibber\",\n  \"wizard\", \"zealot\"\n];\n\nexport const MOTIVATIONS: string[] = [\n  \"Becoming an adventurer\", \"Being famous\", \"Being powerful\", \"Being respected\", \"Being rich\",\n  \"Being self-sufficient\", \"Bringing peace to the world\", \"Buying a big property\", \"Changing of occupation\",\n  \"Discovering something new\", \"Dominating others\", \"Finding true love\", \"Helping others\",\n  \"Living a peaceful life\", \"Living elsewhere\", \"Organizing an event\", \"Starting a family\",\n  \"Touring the world\", \"Writing a book\", \"Writing their memoirs\", \"Avenging a destroyed village\",\n  \"Avenging the death of a loved one\", \"Becoming a champion fistfighter\", \"Becoming a great warrior\",\n  \"Becoming a model for the underrealm's top fashion brand\", \"Becoming a respected miner like their father\",\n  \"Breaking into the royal treasury\", \"Bringing inspiration and excitement to life\",\n  \"Bringing medical aid to someone in need\", \"Bringing someone to the top of undermountain\",\n  \"Building a vessel that can move underwater\", \"Collecting romance novels\", \"Converting people to their religion\",\n  \"Creating a new economic theory\", \"Discovering a new bat species\", \"Escaping poverty\",\n  \"Escorting someone to a destination\", \"Exploring a legendary black tower\", \"Fighting in the Great Cliff Dive\",\n  \"Finding a cure before it's too late\", \"Finding inspiration and excitement\", \"Finding someone to marry\",\n  \"Finding the royal family\", \"Finding treasure\", \"Fitting into high society\",\n  \"Following a crystal ball's instructions\", \"Following a marked treasure map\", \"Following the right tunnel\",\n  \"Funding a startup\", \"Getting a painting into a museum\", \"Gaining entrance to high society\",\n  \"Gaining the ear of the queen\", \"Getting married\", \"Getting medical attention for disease\",\n  \"Getting revenge on goblins\", \"Getting vengeance for a village attack\", \"Helping a cursed individual\",\n  \"Hunting a thief who burglarized their home\", \"Investigating magical card rumors\",\n  \"Joining a royal family\", \"Keeping a mine running\", \"Killing a sorcerer who cursed them\",\n  \"Living a peaceful life\", \"Looking for a comfortable cavern\", \"Making ends meet through begging\",\n  \"Making money with a red dragon and a pipe organ\", \"Making the best cheese and pie\",\n  \"Modeling for CavernGuy\", \"Needing a hug\", \"Opening a bakery\", \"Opening the first subterranean skyport\",\n  \"Owning a house in the poshest area\", \"Performing quickie weddings\", \"Publishing a memoir\",\n  \"Reclaiming lost memory\", \"Rescuing a kidnapped sister\", \"Rescuing friends from the shadow plane\",\n  \"Researching bat droppings\", \"Returning to civilization\", \"Running a clinic trial\",\n  \"Searching for the legendary black tower\", \"Searching for trouble\", \"Searching for investors\",\n  \"Searching for the royal family\", \"Seeking father's respect as a miner\", \"Seeking the truth about the heir\",\n  \"Speaking with demons\", \"Speaking with the dead\", \"Stamping out evil\", \"Starting a family\",\n  \"Swimming in a golden pond\", \"Talking to anything humanoid\", \"Talking to the dead\",\n  \"Talking to someone\", \"Tracking a goblin tribe\", \"Traveling to regain memory\",\n  \"Trying to collect all romance novels\", \"Trying to get promoted\", \"Trying to infiltrate a fortress\",\n  \"Trying to open the royal vault\", \"Trying to reach high society\", \"Trying to rescue someone\",\n  \"Trying to speak to the dead\", \"Trying to survive\", \"Unloading a cursed dagger\", \"Winning a fistfight tournament\",\n  \"Redemption for past mistake\"\n];\n\nexport const SECRETS: string[] = [\n  \"Believes they are a great hero from the past, reborn\",\n  \"Believes they will shortly turn into a troglodyte\",\n  \"Can literally smell fear\",\n  \"Can only tell the truth\",\n  \"Can read minds via touch\",\n  \"Can speak with animals (but finds them pretty boring)\",\n  \"Can still hear the screams of their evaporating companions\",\n  \"Can't remember their name\",\n  \"Can't stand the sight of blood\",\n  \"Comes from a disgraced family\",\n  \"Distrusts at least one party member\",\n  \"Doesn't know how to ask nicely\",\n  \"Habitually wets the bed\",\n  \"Had a dream where they saw the entire party turned to ash\",\n  \"Has a dark past\",\n  \"Has a huge debt\",\n  \"Has a problem with a giant spider infestation\",\n  \"Has a tattoo marking them as a murderer\",\n  \"Has a weak heart\",\n  \"Has developed blindsight\",\n  \"Has multiple spirits living in their head\",\n  \"Has never worked a day in their life\",\n  \"Has short-term memory loss\",\n  \"Has stolen someone's identity\",\n  \"Has stolen something\",\n  \"Has the self-confidence of a soggy biscuit\",\n  \"Has uncontrollable flatulence\",\n  \"Has yet to exhibit any evidence that they are anything other than an absolute loony\",\n  \"Hides an illness/mutation\",\n  \"Insists they are a displaced royal\",\n  \"Insists they are reinventing the wheel\",\n  \"Is a happy-go-lucky necromancer\",\n  \"Is a lycanthrope\",\n  \"Is a magic school dropout\",\n  \"Is a newly made vampire\",\n  \"Is a pacifist\",\n  \"Is a satyr in disguise\",\n  \"Is a silver dragon in disguise\",\n  \"Is absolutely from the future\",\n  \"Is addicted to a local drug\",\n  \"Is being blackmailed\",\n  \"Is being hunted by the city guards\",\n  \"Is being pursued by a jilted lover\",\n  \"Is cursed with creeping barkskin disease\",\n  \"Is haunted by their grandfather's spirit\",\n  \"Is illiterate\",\n  \"Is immortal\",\n  \"Is in deep with a local crime boss\",\n  \"Is missing their tongue\",\n  \"Is on the run for tax evasion\",\n  \"Is on the run from hired killers out for their blood\",\n  \"Is overwhelmingly lazy\",\n  \"Is part of a secret organization\",\n  \"Is plagued with extreme social anxiety\",\n  \"Is possessed by a low level devil\",\n  \"Is possessed by the spirit of a god\",\n  \"Is possessed by the spirit of an ancient ruler\",\n  \"Is prone to fainting at the sight of blood\",\n  \"Is self-obsessed\",\n  \"Is slowly losing their ability to speak\",\n  \"Is terrible at all forms of combat\",\n  \"Is testing a regenerative treatment that has a 50/50 chance of turning users into a bullywug\",\n  \"Is the victim of a long con\",\n  \"Is up to their eyeballs in gambling debt\",\n  \"Is working against the party's interests\",\n  \"Knows of a forgotten pirate hoard hidden at the bottom of an underground lake infested with evil fishfolk\",\n  \"Knows the ritual they're planning will require the blood of at least two adventurers\",\n  \"Knows their potion of fly will only last another half hour\",\n  \"May have made a pact with a demon\",\n  \"Must steal a rare flower that can provide an antidote to their beloved's sickness\",\n  \"Needs to make it to the surface pronto\",\n  \"Owns a dog that can speak Common\",\n  \"Runs an illegal fighting ring nearby\",\n  \"Sees via echolocation\",\n  \"Serves a talking cow\",\n  \"Spends their spare time writing action novels\",\n  \"Struggles with their dad's expectations\",\n  \"Suffers from narcolepsy\",\n  \"Thinks healers are out to kill them\",\n  \"Thinks humans are useless\",\n  \"Thinks they are the smartest person in the room\",\n  \"Uses a puppet to talk\",\n  \"Wants to gain access to other dimensions\",\n  \"Was adopted\",\n  \"Was an escaped convict in their youth\",\n  \"Was dared to start fights with 16 different strangers\",\n  \"Was once kidnapped/abducted\",\n  \"Was, until today, a shut-in\",\n  \"Will do anything to obtain power over their father\"\n];\n\nexport const PHYSICAL_APPEARANCES: string[] = [\n  \"Disfigured (missing teeth, eye, etc.)\",\n  \"Lasting injury (bad leg, arm, etc.)\",\n  \"Tattooed, pockmarked, or scarred\",\n  \"Unkempt, shabby, or grubby\",\n  \"Big, thick, or brawny\",\n  \"Small, scrawny, or emaciated\",\n  \"Notable hair (wild, long, none, etc.)\",\n  \"Notable nose (big, hooked, etc.)\",\n  \"Notable eyes (blue, bloodshot, etc.)\",\n  \"Clean, well-dressed, or well-groomed\",\n  \"Attractive, handsome, or stunning\",\n  \"Shaggy hair and a slight overbite\",\n  \"Deep-set eyes and an upturned nose\",\n  \"A wide smile and a fashionable mole\",\n  \"A steady gaze and pursed lips\",\n  \"A deep facial scar and a gruff exterior\",\n  \"A pug nose and lots of freckles\",\n  \"A round face and rosy cheeks\",\n  \"A few hairs springing out of a wart on their face\",\n  \"A heavy limp and a can-do attitude\",\n  \"A kind face and a slow drawl\",\n  \"Shifting eyes and a hushed voice\",\n  \"A few missing teeth and a hungry gaze\",\n  \"A massive nose and a tight mouth\",\n  \"Hooded eyes and a casual tone\",\n  \"Wild hair and a sweating brow\",\n  \"Oily skin and whistling nostrils\",\n  \"Large ears and an oval face\",\n  \"A strong jaw and a hearty laugh\",\n  \"A slack jaw and a tendency to mouthbreathe\",\n  \"A gap-toothed grin and grey eyes\",\n  \"A pot belly and an infectious giggle\",\n  \"A blank expression and wild ear hair\",\n  \"A face full of piercings\",\n  \"More tattoos than uninked skin\",\n  \"Buns of steel and armor to match\",\n  \"Scabby knuckles they won't stop cracking\",\n  \"A sick pompadour haircut\",\n  \"Wearing the corset of a slimmer person\",\n  \"A slack face on one side impeding their speech\",\n  \"A tongue seemingly too big for their mouth\",\n  \"A posh attitude and clothes to match\",\n  \"A dour expression\",\n  \"The biggest head of all time\",\n  \"Broad shoulders and a low-cut tunic\",\n  \"A hunched back and sores\",\n  \"Friendly eyes and the grace of a dancer\",\n  \"Devoid of eyebrows and a sense of humor\",\n  \"A soot-covered face\",\n  \"A dent in their skull that's healed over\",\n  \"In a purple tunic, ascot and patent leather boots\",\n  \"Covered in black tar and white feathers\",\n  \"A broken arrow stuck in the side of their head\",\n  \"Black eyes that lack irises\",\n  \"Face buried in a book about geese\",\n  \"Holding a tiny dog and fighting back tears\",\n  \"Humming to themselves and scratching flaky skin\",\n  \"A narrow face and fine, almost too-perfect features\",\n  \"A bruised eye and a busted lip\",\n  \"A lumpy nose that looks a bit infected\",\n  \"A beehive hairdo that makes them seem taller\",\n  \"Has a neck twice as wide as their face\",\n  \"Has a face that appears stitched together\",\n  \"Looks like they're about to vomit\",\n  \"Is dripping in sweat\",\n  \"Is expertly juggling a trio of daggers\",\n  \"Has a drippy nose and red cheeks\",\n  \"Is wearing clothes that are three sizes too big\",\n  \"Looks twice their age\",\n  \"A pretty face and big ideas\",\n  \"Wearing goggles and chomping a smoldering cigar\",\n  \"The energy of an overstimulated child\",\n  \"Bangs that everyone agrees do not suit their face\",\n  \"Nervously chewing their upper lip\",\n  \"Blind, but making it work\",\n  \"Still sporting the scars from a rogue owlbear attack\",\n  \"Has one of those faces\",\n  \"A chin that could block out the sun\",\n  \"A whisper-quiet voice\",\n  \"A cute smile and belt of knives\",\n  \"Wearing far too many belts and silver jewelry\",\n  \"The biggest, bushiest beard\",\n  \"Is blessed with lavish curves\",\n  \"Is a scythe-wielding farmer\",\n  \"Armor that shines like the sun\",\n  \"An almost hypnotic voice and air of importance\",\n  \"Who looks like they just woke up\",\n  \"In a tight-fitting, red-scaled jacket\",\n  \"Wearing temple robes and a surprised expression\",\n  \"Greasy hair and hands to match\",\n  \"A hard, weathered face\",\n  \"Walks with the grace of a dancer\",\n  \"Wearing a crop top to show off their impressive abs\",\n  \"In black leather and a pair of sharp, heeled boots\",\n  \"A permanent squint and a stiff upper lip\",\n  \"Who appears as if they were struck by lightning\",\n  \"A smile that's all teeth and no joy\",\n  \"Flashy pink hair\",\n  \"A smell that is off-putting\",\n  \"Bloody, nail-free fingertips\",\n  \"In a droopy robe\",\n  \"In a hat that's as tall as they are\",\n  \"No arms, but two mage hands\",\n  \"Bare feet and freckled cheeks\",\n  \"Dressed in a patchwork coat of dozens of fabrics\",\n  \"One leg, and a hangman's scar on their neck\",\n  \"Is deaf and uses gestures to communicate\",\n  \"Shaggy hair, baggy clothes and a chill attitude\",\n  \"Cheekbones that could cut glass and eyes to match\",\n  \"Wearing a hood that covers their gaunt face\",\n  \"A handsome face and sure, kind smile\",\n  \"Who is 5 feet tall and thin as a rail\",\n  \"Who is heavy in the torso yet light on their toes\",\n  \"As bald and beardless as a baby\",\n  \"Wearing a fancy ballgown and expensive jewelry\",\n  \"Scabs all over their body\",\n  \"Food-stain covered clothes\",\n  \"Small stature and a nervous demeanor\",\n  \"Heavy eyelids and a constant yawn\",\n  \"Shaggy red hair and a giant mole on their lip\",\n  \"A hook for a hand and wearing an oversized hat\",\n  \"Pale white eyes and large black ears aside their head\",\n  \"Their nose turned to the sky and wearing purple robes\",\n  \"A sly grin, chewing tobacco\",\n  \"Menacing black plate armor\",\n  \"Who shuffles along slowly, their body covered in bark\",\n  \"Wild hair and leather pants\",\n  \"High green pigtails and a pseudodragon perched on their shoulder\",\n  \"A bright orange jumpsuit and several knives in their belt\",\n  \"An ox sled of fresh food and wearing a wide-brimmed hat\",\n  \"A pink crop top and wielding twin shortswords\",\n  \"A leather apron and an ironworker's mask\",\n  \"Ragged clothes, and some fabric scraps shoved up their nose\",\n  \"Popping veins and a mouth frothing with excitement\",\n  \"Open robes and angular face paint\",\n  \"Eager eyes and silver hair\",\n  \"Blue hair and a kindly attitude\",\n  \"Immaculate white robes and a monocle\",\n  \"A plump figure and serene attitude\",\n  \"Staring intently at a large crystal ball they are carrying\",\n  \"Effortlessly mussed hair and photogenic face\",\n  \"Sharp features, dark hair and a ragged black cloak\",\n  \"A shaven head, odd green scales on their neck and a curious fishy odor\",\n  \"A long red beard thrown over their shoulder and deepset black eyes\",\n  \"A long white mohawk, sparkling blue eyes, and toned physique\",\n  \"Arcane tattoos over every visible surface of their body\",\n  \"A squat body, close cropped hair and large rat perched on their shoulder\",\n  \"Ragged clothes, blind eyes and a steel walking stick sharpened to a lethal point\",\n  \"A bald head, black beard and the longest fingernails you've ever seen\",\n  \"Dark skin, long, sleek blue hair and matching spiral tattoos on both sides of their neck\",\n  \"Bulging, watery eyes, large webbed hands and a humped back\",\n  \"Fine dress, regal bearing and an entitled attitude\",\n  \"Short dark hair, an impressively curled mustache and teeth filed to points\",\n  \"Curly brown hair, travelers garb and a patch over one eye\",\n  \"A tattered white robe, long white hair and missing one arm\",\n  \"Wrinkled face, deep set eyes, blackened and pitted teeth and noxious breath\",\n  \"A large broken nose, gallon-sized fists and wiry gray hair\",\n  \"Expressive eyebrows, a lilting voice and several nose, lip and ear piercings\",\n  \"Bow legs and a thick middle, red hair and a thick bushy beard\",\n  \"An easy smile, friendly attitude and terribly sarcastic demeanor\",\n  \"Riddled with scabs and small cuts\"\n];\n\nexport const ECONOMIC_STATUSES: string[] = [\n  \"Destitute / homeless\",\n  \"Destitute / homeless\",\n  \"Destitute / homeless\",\n  \"Poor\",\n  \"Poor\",\n  \"Poor\",\n  \"Poor\",\n  \"Poor\",\n  \"Just getting by\",\n  \"Just getting by\",\n  \"Just getting by\",\n  \"Just getting by\",\n  \"Can support themselves\",\n  \"Can support themselves\",\n  \"Can support themselves\",\n  \"Climbing the ladder\",\n  \"Climbing the ladder\",\n  \"Comfortable\",\n  \"Comfortable\",\n  \"Well-off\",\n  \"Rich\",\n  \"Extremely wealthy\"\n];\n\nexport const QUIRKS: string[] = [\n  \"a bald head, black beard and the longest fingernails you’ve ever seen\",\n  \"a beehive hairdo that makes them seem taller\",\n  \"a blank expression and wild ear hair\",\n  \"a bright orange jumpsuit and several knives in their belt\",\n  \"a broken arrow stuck in the side of their head\",\n  \"a chin that could block out the sun\",\n  \"a crystalline growths sprouting from their shoulder\",\n  \"a deep facial scar and a gruff exterior\",\n  \"a dent in their skull that’s healed over\",\n  \"a dour expression\",\n  \"a face full of piercings\",\n  \"a few hairs springing out of a wart on their face\",\n  \"a few missing teeth and a hungry gaze\",\n  \"a flashy pink hair\",\n  \"a gap-toothed grin and grey eyes\",\n  \"a hard, weathered face\",\n  \"a halo of buzzing fireflies or will-o'-wisps\",\n  \"a handsome face and sure, kind smile\",\n  \"a heavy limp and a can-do attitude\",\n  \"a hook for a hand and wearing an oversized hat\",\n  \"a hunched back and sores\",\n  \"a kind face and a slow drawl\",\n  \"a long red beard thrown over their shoulder and deepset black eyes\",\n  \"a long white mohawk, sparkling blue eyes, and toned physique\",\n  \"a lumpy nose that looks a bit infected\",\n  \"a massive nose and a tight mouth\",\n  \"a metallic arm etched with runes\",\n  \"a narrow face and fine, almost too-perfect features\",\n  \"a pink crop top and wielding twin shortswords\",\n  \"a plump figure and serene attitude\",\n  \"a posh attitude and clothes to match\",\n  \"a pretty face and big ideas\",\n  \"a pug nose and lots of freckles\",\n  \"a round face and rosy cheeks\",\n  \"a shimmering mark on their forehead that pulses with arcane energy\",\n  \"a sick pompadour haircut\",\n  \"a slack face on one side impeding their speech\",\n  \"a slack jaw and a tendency to mouthbreathe\",\n  \"a sly grin, chewing tobacco\",\n  \"a smile that’s all teeth and no joy\",\n  \"a spectral tail they try to hide\",\n  \"a steady gaze and pursed lips\",\n  \"a strong jaw and a hearty laugh\",\n  \"a tattered white robe, long white hair and missing one arm\",\n  \"a third eye that opens when they lie\",\n  \"a tongue seemingly too big for their mouth\",\n  \"a wide smile and a fashionable mole\",\n  \"a whisper-quiet voice\",\n  \"addict (sweets, drugs, sex, etc.)\",\n  \"always covered in glitter, soot, or chalk\",\n  \"always slightly wet, as though recently emerged from a lake\",\n  \"always wears gloves, even when inappropriate\",\n  \"antlers growing from their head like a crown\",\n  \"armor that shines like the sun\",\n  \"artistic, dreamer, or delusional\",\n  \"as bald and beardless as a baby\",\n  \"asks riddles compulsively and grows irritated if you don’t answer\",\n  \"attractive/handsome/stunning\",\n  \"avoids being touched at all costs\",\n  \"avoids eye contact entirely\",\n  \"bangs that everyone agrees do not suit their face\",\n  \"bare feet and freckled cheeks\",\n  \"becomes eerily calm in stressful situations\",\n  \"believes they’re the reincarnation of a god\",\n  \"big/thick/brawny\",\n  \"black eyes that lack irises\",\n  \"bloody, nail-free fingertips\",\n  \"blue hair and a kindly attitude\",\n  \"broad shoulders and a low-cut tunic\",\n  \"buns of steel and armor to match\",\n  \"bark-like skin with leaves in their hair\",\n  \"cannot stop performing slight-of-hand tricks\",\n  \"cheekbones that could cut glass and eyes to match\",\n  \"clean/well-dressed/well-groomed\",\n  \"clothing stitched from shadows and moonlight\",\n  \"constantly gives unsolicited advice\",\n  \"constantly trailing faint wisps of smoke\",\n  \"constantly writing letters to someone named 'the moon'\",\n  \"covered in black tar and white feathers\",\n  \"curly brown hair, travelers garb and a patch over one eye\",\n  \"dark skin, long, sleek blue hair and matching spiral tattoos on both sides of their neck\",\n  \"devoid of eyebrows and a sense of humor\",\n  \"dresses like they're from a different century\",\n  \"eccentric hairstyle\",\n  \"effortlessly mussed hair and photogenic face\",\n  \"eager eyes and silver hair\",\n  \"expressive eyebrows, a lilting voice and several nose, lip and ear piercings\",\n  \"face buried in a book about geese\",\n  \"feathers instead of hair on one side of their head\",\n  \"fine dress, regal bearing and an entitled attitude\",\n  \"flashy pink hair\",\n  \"food-stain covered clothes\",\n  \"frequently interrupts with cryptic prophecies\",\n  \"friendly eyes and the grace of a dancer\",\n  \"glowing eyes that shift color with their mood\",\n  \"greasy hair and hands to match\",\n  \"greets people by sniffing them\",\n  \"has a drippy nose and red cheeks\",\n  \"has a face that appears stitched together\",\n  \"has a neck twice as wide as their face\",\n  \"has an unusual laugh (wheeze, cackle, snort)\",\n  \"has one of those faces\",\n  \"heavy eyelids and a constant yawn\",\n  \"hooved feet and a noble gait\",\n  \"holding a tiny dog and fighting back tears\",\n  \"hooded eyes and a casual tone\",\n  \"humanoid bark-covered skin\",\n  \"humming to themselves and scratching flaky skin\",\n  \"immaculate white robes and a monocle\",\n  \"in a droopy robe\",\n  \"in a hat that’s as tall as they are\",\n  \"in a purple tunic, ascot and patent leather boots\",\n  \"in black leather and a pair of sharp, heeled boots\",\n  \"insecure, racist, or xenophobic\",\n  \"is a scythe-wielding farmer\",\n  \"is blessed with lavish curves\",\n  \"is deaf and uses gestures to communicate\",\n  \"is dripping in sweat\",\n  \"is expertly juggling a trio of daggers\",\n  \"keeps a live insect or animal in their pocket\",\n  \"keeps looking over their shoulder as if being followed\",\n  \"laughs as if they know a terrible secret\",\n  \"laughs when they're about to cry\",\n  \"looks like they’re about to vomit\",\n  \"looks twice their age\",\n  \"menacing black plate armor\",\n  \"mimics others' accents unconsciously\",\n  \"miser or pack-rat\",\n  \"more tattoos than uninked skin\",\n  \"naive or idealistic\",\n  \"never finishes their sentences\",\n  \"no arms, but two mage hands\",\n  \"notable eyes (blue, bloodshot, etc.)\",\n  \"notable hair (wild, long, none, etc.)\",\n  \"notable nose (big, hooked, etc.)\",\n  \"obsessed with collecting shiny objects, like a magpie\",\n  \"oil-slicked skin and whistling nostrils\",\n  \"open robes and angular face paint\",\n  \"over-explains everything\",\n  \"overly formal speech\",\n  \"overly touchy with strangers\",\n  \"pale white eyes and large black ears aside their head\",\n  \"phobia (spiders, fire, darkness, etc.)\",\n  \"piercings\",\n  \"popping veins and a mouth frothing with excitement\",\n  \"pot belly and an infectious giggle\",\n  \"rare eye color\",\n  \"records every interaction in a massive grimoire\",\n  \"refers to themselves in the third person\",\n  \"refuses to speak directly, only through rhymed couplets\",\n  \"refuses to wear shoes\",\n  \"riddled with scabs and small cuts\",\n  \"scar(s)\",\n  \"scabs all over their body\",\n  \"scabby knuckles they won’t stop cracking\",\n  \"shadow always seems a step out of sync\",\n  \"shaggy hair and a slight overbite\",\n  \"shaggy red hair and a giant mole on their lip\",\n  \"shaggy hair, baggy clothes and a chill attitude\",\n  \"sharp features, dark hair and a ragged black cloak\",\n  \"short dark hair, an impressively curled mustache and teeth filed to points\",\n  \"skeptic or paranoid\",\n  \"skin that sparkles faintly in sunlight\",\n  \"small stature and a nervous demeanor\",\n  \"small/scrawny/emaciated\",\n  \"smart aleck or know-it-all\",\n  \"spendthrift or wastrel\",\n  \"staring intently at a large crystal ball they are carrying\",\n  \"still sporting the scars from a rogue owlbear attack\",\n  \"superstitious, devout, or fanatical\",\n  \"talks to themselves constantly\",\n  \"tattoo(s)\",\n  \"tattooed/pockmarked/scarred\",\n  \"the biggest head of all time\",\n  \"the biggest, bushiest beard\",\n  \"their nose turned to the sky and wearing purple robes\",\n  \"tries to barter with everything, even conversations\",\n  \"unusual laugh (wheeze, cackle, snort)\",\n  \"unkempt/shabby/grubby\",\n  \"uses made-up slang\",\n  \"uses overly elaborate titles for themselves and everyone else\",\n  \"walks with an exaggerated swagger\",\n  \"walks with the grace of a dancer\",\n  \"wearing a crop top to show off their impressive abs\",\n  \"wearing a fancy ballgown and expensive jewelry\",\n  \"wearing far too many belts and silver jewelry\",\n  \"wearing goggles and chomping a smoldering cigar\",\n  \"wearing temple robes and a surprised expression\",\n  \"whispers arcane syllables under their breath when nervous\",\n  \"who appears as if they were struck by lightning\",\n  \"who is 5 feet tall and thin as a rail\",\n  \"who is heavy in the torso yet light on their toes\",\n  \"who looks like they just woke up\",\n  \"who shuffles along slowly, their body covered in bark\"\n];\n\nexport const COMPETENCE: string[] = [\n  \"A liability\",\n  \"Competent\",\n  \"Fully capable\",\n  \"Exceptional\"\n];\n\nexport const FIRST_NAMES: string[] = [\n  \"Aja\", \"Alma\", \"Alric\", \"Amriel\", \"Ann\", \"Annie\", \"Aran\", \"Ardo\", \"Arthur\", \"Astrid\",\n  \"Axidor\", \"Barvin\", \"Bella\", \"Benny\", \"Borg\", \"Brak\", \"Bram\", \"Brenna\", \"Brielle\", \"Brolga\",\n  \"Bruga\", \"Bruno\", \"Cecilia\", \"Clara\", \"Cora\", \"Cyrwin\", \"Daeniel\", \"David\", \"Darvin\", \"Deeg\",\n  \"Denton\", \"Dina\", \"Drago\", \"Elga\", \"Eliza\", \"Eliara\", \"Elyon\", \"Finn\", \"Fink\", \"Fiora\",\n  \"Fitz\", \"Galira\", \"Georg\", \"Gendry\", \"Giralt\", \"Godfrey\", \"Gordie\", \"Gralk\", \"Grimm\", \"Grix\",\n  \"Hank\", \"Helen\", \"Hilde\", \"Hiralia\", \"Hirok\", \"Hobb\", \"Hrogar\", \"Iggs\", \"Ishana\", \"Isolde\",\n  \"Ithior\", \"Ingol\", \"Ivara\", \"Jasmin\", \"Jasper\", \"Jennie\", \"John\", \"Jirwyn\", \"Junnor\", \"Karina\",\n  \"Klara\", \"Korv\", \"Krull\", \"Lenk\", \"Lilly\", \"Lienna\", \"Lothiel\", \"Lydia\", \"Malchor\", \"Marga\",\n  \"Marie\", \"Marlow\", \"Mirena\", \"Mona\", \"Morgan\", \"Natinel\", \"Nattias\", \"Naugrim\", \"Nayra\", \"Nibs\",\n  \"Nix\", \"Norbert\", \"Oscar\", \"Pike\", \"Prim\", \"Ranna\", \"Riggs\", \"Rina\", \"Rizzo\", \"Rogar\",\n  \"Roke\", \"Rose\", \"Ruhiel\", \"Ryarn\", \"Sariel\", \"Sarna\", \"Shiraal\", \"Sophie\", \"Squib\", \"Tamra\",\n  \"Tarin\", \"Tark\", \"Thomas\", \"Tila\", \"Tilly\", \"Tisha\", \"Tirolas\", \"Torbin\", \"Torson\", \"Tragan\",\n  \"Tucker\", \"Tulk\", \"Ulara\", \"Ulfgar\", \"Vara\", \"Varos\", \"Vidrid\", \"Will\", \"Willow\", \"Wulf\",\n  \"Yark\", \"Yelena\", \"Yuri\", \"Zali\", \"Zaphiel\", \"Zasha\", \"Zeb\", \"Zoraan\"\n];\n\nexport const LAST_NAMES: string[] = [\n  \"Abdou\", \"Aberrich\", \"Aefrim\", \"Aibolsun\", \"Altas\", \"Avilseer\", \"Axeson\", \"Baelmai\", \"Bako\", \"Bingletrite\", \"Blackreed\",\n  \"Briggs\", \"Bronzebeard\", \"Bronzestein\", \"Burrows\", \"Button\", \"Carter\", \"Claymore\", \"Cogturner\", \"Coldstone\",\n  \"Coppercrown\", \"Coppernose\", \"Cragenmore\", \"Cray\", \"Crowbender\", \"Crysalis\", \"Darabound\", \"Darksteele\", \"Datesi\",\n  \"Deepstone\", \"Diamondtoe\", \"Didor\", \"Dwandra\", \"Eastlake\", \"Eaves\", \"Emo\", \"Etellor\", \"Excellente\", \"Faemoira\",\n  \"Fauxmont\", \"Fenyara\", \"Finch\", \"Firebeard\", \"Firsell\", \"Fishtoe\", \"Flint\", \"Flintheart\", \"Flintshine\", \"Forgefoot\",\n  \"Foxglove\", \"Frostarms\", \"Geasfoot\", \"Gibbs\", \"Gigak\", \"Gnazbright\", \"Goldarm\", \"Goldcask\", \"Griffith\", \"Gulnurkan\",\n  \"Hammerstrike\", \"Hartley\", \"Head\", \"Honeyeater\", \"Hook\", \"Hoover\", \"Huneldth\", \"Hutchrice\", \"Iasbex\", \"Icruxias\", \"Ide\",\n  \"Igrild\", \"Illa\", \"Illynmah\", \"Immamura\", \"Jarfalsa\", \"Jaytai\", \"Jeffries\", \"Justice\", \"Kavius\", \"Keystina\",\n  \"Khilltahrn\", \"Koahath\", \"Leagallow\", \"Lillyfitz\", \"Lloyd\", \"Luckdodger\", \"Lukewill\", \"Mavcius\", \"Merigu\", \"Mishala\",\n  \"Mogumir\", \"Moore\", \"Narrick\", \"Neeves\", \"Neriyra\", \"Noire\", \"Noosecatcher\", \"Ootati\", \"Oldfur\", \"Olley\", \"Oremen\",\n  \"Orgulas\", \"Petra\", \"Plackard\", \"Polaan\", \"Poole\", \"Poutine\", \"Powell\", \"Protheroe\", \"Puddleswish\", \"Questar\",\n  \"Quickstoke\", \"Q'tharas\", \"Quid\", \"Rainn\", \"Randmork\", \"Reagle\", \"Reebsa\", \"Ren\", \"Requiess\", \"Reyhana\", \"Rivershale\",\n  \"Robinson\", \"Roamshadow\", \"Rosenmer\", \"Rumsdeep\", \"Rygoss\", \"Sarberos\", \"Seidanur\", \"Shatterblade\", \"Shaw\", \"Silverock\",\n  \"Silverseek\", \"Silviu\", \"SindaSalt\", \"Slane\", \"Smith\", \"Stumpfoot\", \"Strongale\", \"Strongsmith\", \"Stringsaw\",\n  \"Suresnail\", \"Tanko\", \"Taylor\", \"Thanar\", \"Thaneson\", \"Thermobolt\", \"Therundlin\", \"Tighfield\", \"Underbough\", \"Ugdough\",\n  \"Us\", \"Uvaes\", \"Valarnith\", \"Vainweather\", \"Veindeep\", \"Vendorform\", \"Volto\", \"Wapronk\", \"Wheelmaiden\", \"Wolfsbane\",\n  \"Woolyboon\", \"Wright\", \"Xas\", \"Xencord\", \"Xeran\", \"Yahsquin\", \"Yeoman\", \"Yesvyre\", \"Yiu\", \"Zakari\", \"Zeagan\", \"Zimet\",\n  \"Zytal\"\n];\n\nexport interface GeneratedNPC {\n  race: string;\n  occupation: string;\n  motivation: string;\n  secret: string;\n  physicalAppearance: string;\n  economicStatus: string;\n  quirk: string;\n  competence: string;\n  firstName: string;\n  lastName: string;\n}\n\nexport class NPCGenerator {\n  private getRandomElement<T>(array: T[]): T {\n    if (array.length === 0) {\n      throw new Error(\"Cannot select from empty array\");\n    }\n    const randomIndex = Math.floor(Math.random() * array.length);\n    return array[randomIndex];\n  }\n\n  private generateRace(): string {\n    if (NPC_RACES.length === 0) {\n      return \"Human\"; // Fallback\n    }\n    return this.getRandomElement(NPC_RACES);\n  }\n\n  private generateOccupation(): string {\n    if (OCCUPATIONS.length === 0) {\n      return \"Commoner\"; // Fallback\n    }\n    return this.getRandomElement(OCCUPATIONS);\n  }\n\n  private generateMotivation(): string {\n    if (MOTIVATIONS.length === 0) {\n      return \"Seeking Adventure\"; // Fallback\n    }\n    return this.getRandomElement(MOTIVATIONS);\n  }\n\n  private generateSecret(): string {\n    if (SECRETS.length === 0) {\n      return \"Harbors a Dark Secret\"; // Fallback\n    }\n    return this.getRandomElement(SECRETS);\n  }\n\n  private generatePhysicalAppearance(): string {\n    if (PHYSICAL_APPEARANCES.length === 0) {\n      return \"Average Looking\"; // Fallback\n    }\n    return this.getRandomElement(PHYSICAL_APPEARANCES);\n  }\n\n  private generateEconomicStatus(): string {\n    if (ECONOMIC_STATUSES.length === 0) {\n      return \"Middle Class\"; // Fallback\n    }\n    return this.getRandomElement(ECONOMIC_STATUSES);\n  }\n\n  private generateQuirk(): string {\n    if (QUIRKS.length === 0) {\n      return \"Has an Unusual Hobby\"; // Fallback\n    }\n\n    // 25% chance of having two quirks\n    if (Math.random() < 0.25) {\n      const firstQuirk = this.getRandomElement(QUIRKS);\n      let secondQuirk = this.getRandomElement(QUIRKS);\n\n      // Ensure we don't get the same quirk twice\n      let attempts = 0;\n      while (secondQuirk === firstQuirk && attempts < 10) {\n        secondQuirk = this.getRandomElement(QUIRKS);\n        attempts++;\n      }\n\n      return `${firstQuirk} & ${secondQuirk}`;\n    }\n\n    return this.getRandomElement(QUIRKS);\n  }\n\n  private generateCompetence(): string {\n    if (COMPETENCE.length === 0) {\n      return \"Competent\"; // Fallback\n    }\n    return this.getRandomElement(COMPETENCE);\n  }\n\n  private generateFirstName(): string {\n    if (FIRST_NAMES.length === 0) {\n      return \"John\"; // Fallback\n    }\n    return this.getRandomElement(FIRST_NAMES);\n  }\n\n  private generateLastName(): string {\n    if (LAST_NAMES.length === 0) {\n      return \"Smith\"; // Fallback\n    }\n    return this.getRandomElement(LAST_NAMES);\n  }\n\n  /**\n   * Generate an intelligent name based on NPC characteristics\n   */\n  private async generateIntelligentName(npcData: {\n    race: string;\n    occupation: string;\n    motivation: string;\n    secret: string;\n  }): Promise<{ firstName: string; lastName: string }> {\n    try {\n      const result = await generateSingleIntelligentName({\n        characterType: \"NPC\",\n        race: npcData.race,\n        occupation: npcData.occupation,\n        motivation: npcData.motivation,\n        description: `${npcData.race} ${npcData.occupation} with secret: ${npcData.secret}`\n      });\n\n      if (result.success && result.name) {\n        // Split the generated name into first and last name\n        const nameParts = result.name.split(/\\s+/);\n        if (nameParts.length >= 2) {\n          return {\n            firstName: nameParts[0],\n            lastName: nameParts.slice(1).join(' ')\n          };\n        } else {\n          return {\n            firstName: nameParts[0] || this.generateFirstName(),\n            lastName: this.generateLastName()\n          };\n        }\n      }\n    } catch (error) {\n      console.error(\"Error generating intelligent name:\", error);\n    }\n\n    // Fallback to traditional name generation\n    return {\n      firstName: this.generateFirstName(),\n      lastName: this.generateLastName()\n    };\n  }\n\n  public generateNPC(): GeneratedNPC {\n    try {\n      return {\n        race: this.generateRace(),\n        occupation: this.generateOccupation(),\n        motivation: this.generateMotivation(),\n        secret: this.generateSecret(),\n        physicalAppearance: this.generatePhysicalAppearance(),\n        economicStatus: this.generateEconomicStatus(),\n        quirk: this.generateQuirk(),\n        competence: this.generateCompetence(),\n        firstName: this.generateFirstName(),\n        lastName: this.generateLastName(),\n      };\n    } catch (error) {\n      // Fallback NPC if generation fails\n      return {\n        race: \"Human\",\n        occupation: \"Commoner\",\n        motivation: \"Seeking Adventure\",\n        secret: \"Harbors a Dark Secret\",\n        physicalAppearance: \"Average Looking\",\n        economicStatus: \"Middle Class\",\n        quirk: \"Has an Unusual Hobby\",\n        competence: \"Competent\",\n        firstName: \"John\",\n        lastName: \"Smith\",\n      };\n    }\n  }\n\n  public generateStep(step: keyof GeneratedNPC): string {\n    switch (step) {\n      case 'race':\n        return this.generateRace();\n      case 'occupation':\n        return this.generateOccupation();\n      case 'motivation':\n        return this.generateMotivation();\n      case 'secret':\n        return this.generateSecret();\n      case 'physicalAppearance':\n        return this.generatePhysicalAppearance();\n      case 'economicStatus':\n        return this.generateEconomicStatus();\n      case 'quirk':\n        return this.generateQuirk();\n      case 'competence':\n        return this.generateCompetence();\n      case 'firstName':\n        return this.generateFirstName();\n      case 'lastName':\n        return this.generateLastName();\n      default:\n        throw new Error(`Unknown NPC generation step: ${step}`);\n    }\n  }\n}\n\nexport function generateNPC(): GeneratedNPC {\n  const generator = new NPCGenerator();\n  return generator.generateNPC();\n}\n\n/**\n * Generate an NPC with intelligent name selection based on characteristics\n */\nexport async function generateIntelligentNPC(): Promise<GeneratedNPC> {\n  const generator = new NPCGenerator();\n\n  try {\n    // Generate all characteristics first\n    const race = generator.generateRace();\n    const occupation = generator.generateOccupation();\n    const motivation = generator.generateMotivation();\n    const secret = generator.generateSecret();\n    const physicalAppearance = generator.generatePhysicalAppearance();\n    const economicStatus = generator.generateEconomicStatus();\n    const quirk = generator.generateQuirk();\n    const competence = generator.generateCompetence();\n\n    // Generate intelligent name based on characteristics\n    const nameData = await generator.generateIntelligentName({\n      race,\n      occupation,\n      motivation,\n      secret\n    });\n\n    return {\n      race,\n      occupation,\n      motivation,\n      secret,\n      physicalAppearance,\n      economicStatus,\n      quirk,\n      competence,\n      firstName: nameData.firstName,\n      lastName: nameData.lastName,\n    };\n  } catch (error) {\n    console.error(\"Error generating intelligent NPC:\", error);\n    // Fallback to regular generation\n    return generator.generateNPC();\n  }\n}\n\nexport function generateNPCStep(step: keyof GeneratedNPC): string {\n  const generator = new NPCGenerator();\n  return generator.generateStep(step);\n}\n","/**\n * Global LLM Instructions for All Narrative Generation\n * \n * This file contains standardized restrictions and guidelines that apply \n * to ALL AI narrative generation across the entire application.\n */\n\nexport const GLOBAL_NARRATIVE_RESTRICTIONS = `\nGLOBAL NARRATIVE RESTRICTIONS (Apply to ALL content):\n\nYou are a master Dungeons and Dragons Game Master. Use words to craft narratively rich, but also simple and meaningful, role playing game world building elements. Write with wit, theatrical flair, and engaging storytelling that brings fantasy worlds to life.\n\n\n- NEVER include any adventure hooks, plot hooks, or suggestions for player character activities\n- NEVER include narratives about strange lights, glows, or mysterious illumination that can be seen at night from miles away\n- NEVER mention things glowing on the horizon at night\n- NEVER use the phrase \"stands as a testament\" or \"a testament to\" or any variation with the word \"testament\"\n- DO NOT include any content that suggests what players should do or where they should go\n- AVOID clichéd fantasy tropes like mysterious lights, ominous glows, or prophetic warnings\n- Keep descriptions atmospheric but practical, focusing on what exists rather than what might happen`;\n\n/**\n * Gets the global restrictions formatted for inclusion in any LLM prompt\n */\nexport function getGlobalNarrativeRestrictions(): string {\n  return GLOBAL_NARRATIVE_RESTRICTIONS;\n}\n\n/**\n * Appends global restrictions to any existing prompt restrictions\n */\nexport function appendGlobalRestrictions(existingRestrictions?: string): string {\n  if (existingRestrictions) {\n    return `${existingRestrictions}\\n\\n${GLOBAL_NARRATIVE_RESTRICTIONS}`;\n  }\n  return GLOBAL_NARRATIVE_RESTRICTIONS;\n}\n","import { Request, Response } from \"express\";\nimport { generateNPC, generateNPCStep, generateIntelligentNPC, GeneratedNPC } from \"../lib/npc-generator.js\";\nimport Anthropic from \"@anthropic-ai/sdk\";\nimport { getGlobalNarrativeRestrictions } from \"../lib/llm-instructions.js\";\n\nconst anthropic = new Anthropic({\n  apiKey: process.env.ANTHROPIC_API_KEY ?? \"\",\n});\n\n// Generate a complete NPC with all characteristics\nexport async function generateCompleteNPC(req: Request, res: Response) {\n  try {\n    const npc = await generateIntelligentNPC();\n\n    res.json({\n      success: true,\n      npc: npc,\n    });\n  } catch (error) {\n    console.error(\"Error generating NPC:\", error);\n    res.status(500).json({\n      success: false,\n      error: \"Failed to generate NPC\",\n    });\n  }\n}\n\n// Generate a specific step of NPC creation\nexport function generateNPCStepRoute(req: Request, res: Response) {\n  try {\n    const { step } = req.body;\n\n    if (!step) {\n      return res.status(400).json({\n        success: false,\n        error: \"Step parameter is required\",\n      });\n    }\n\n    const validSteps: (keyof GeneratedNPC)[] = [\n      'race', 'occupation', 'motivation', 'secret',\n      'physicalAppearance', 'economicStatus', 'quirk', 'competence',\n      'firstName', 'lastName'\n    ];\n\n    if (!validSteps.includes(step)) {\n      return res.status(400).json({\n        success: false,\n        error: `Invalid step. Valid steps are: ${validSteps.join(', ')}`,\n      });\n    }\n\n    const result = generateNPCStep(step as keyof GeneratedNPC);\n\n    res.json({\n      success: true,\n      step: step,\n      result: result,\n    });\n  } catch (error) {\n    console.error(\"Error generating NPC step:\", error);\n    res.status(500).json({\n      success: false,\n      error: \"Failed to generate NPC step\",\n    });\n  }\n}\n\n// Generate a coherent narrative for an NPC\nexport async function generateNPCNarrative(req: Request, res: Response) {\n  try {\n    const { npc } = req.body;\n\n    if (!npc) {\n      return res.status(400).json({\n        success: false,\n        error: \"NPC data is required\",\n      });\n    }\n\n    const prompt = `Create a coherent character narrative based on these NPC details:\n\nName: ${npc.firstName} ${npc.lastName}\nRace: ${npc.race}\nOccupation: ${npc.occupation}\nPhysical Appearance: ${npc.physicalAppearance}\nEconomic Status: ${npc.economicStatus}\nQuirk: ${npc.quirk}\nCompetence: ${npc.competence}\nMotivation: ${npc.motivation}\nSecret: ${npc.secret}\n\nPlease create a compelling narrative that:\n1. Determines if this character is male or female based on the name and context\n2. Describes their race and physical appearance in detail\n3. Explains their quirk and how it affects their daily life\n4. Creates a cohesive backstory that connects their secret, motivation, economic status, occupation, and competence level\n5. Makes the character feel like a real person with depth and believable motivations\n6. If any details seem contradictory or don't make logical sense together, feel free to modify them or reinterpret them in a way that creates a more believable character\n\nWrite this as a 2-3 paragraph character description that a GM could use to roleplay this NPC effectively. Focus on personality, background, and how all these elements work together to create a memorable character.\n\n${getGlobalNarrativeRestrictions()}\n\nThen, in a separate section below the character description, add:\n\n**GM Notes:** If you modified, reinterpreted, or left out any of the provided details to create a more coherent character, explain what changes you made and why. If all details worked well together as-is, simply state \"All provided details were incorporated as given.\"`;\n\n    const response = await anthropic.messages.create({\n      model: \"claude-3-5-sonnet-20241022\",\n      max_tokens: 1000,\n      messages: [{\n        role: \"user\",\n        content: prompt\n      }]\n    });\n\n    const narrative = response.content[0].type === \"text\" ? response.content[0].text : \"Failed to generate narrative\";\n\n    res.json({\n      success: true,\n      narrative: narrative,\n    });\n  } catch (error) {\n    console.error(\"Error generating NPC narrative:\", error);\n    res.status(500).json({\n      success: false,\n      error: \"Failed to generate NPC narrative\",\n    });\n  }\n}\n","/**\n * Steading Generator (TypeScript)\n *\n * Generates random settlements (steadings) with various characteristics.\n * Converted from Python D&D settlement generator script.\n */\n\nimport { rollDescriptorTable } from './mythic-meaning-table.js';\n\n// Settlement types\nexport const CIVILIAN_SETTLEMENTS = [\"Hamlet\", \"Village\", \"City\"];\nexport const CLASS_SETTLEMENTS = [\"Castle\", \"Tower\", \"Abbey\"];\nexport const ALL_SETTLEMENT_TYPES = [...CIVILIAN_SETTLEMENTS, ...CLASS_SETTLEMENTS];\n\n// Structure table for name generation\nexport const STRUCTURE_TABLE: Record<number, string> = {\n  1: \"BA\", 2: \"BF\", 3: \"BHF\", 4: \"BH\", 5: \"CA\", 6: \"CF\", 7: \"CH\", 8: \"D\",\n  9: \"DA\", 10: \"DF\", 11: \"DH\", 12: \"D-by-sea\", 13: \"D-in-D\", 14: \"D-le-D\",\n  15: \"D-les-bains\", 16: \"D-on-the-Nisme-on-the-hill\", 17: \"Dington\",\n  18: \"Dsby\", 19: \"Dthorpe\", 20: \"Dton\", 21: \"EA\", 22: \"EB\", 23: \"ED\",\n  24: \"EF\", 25: \"EH\", 26: \"GB\", 27: \"GD\", 28: \"Trou-au-D\", 29: \"Trou-de-D\",\n  30: \"Val-D\"\n};\n\n// Name generation tables\nexport const BUILDINGS_OUTDOORS = [\n  \"Abbey\", \"Arch\", \"Bank\", \"Barrack\", \"Bench\", \"Bridge\", \"Castle\", \"Chapel\",\n  \"Church\", \"Court\", \"Cross\", \"Farm\", \"Forge\", \"Gate\", \"Hall\", \"Home\",\n  \"Hospital\", \"House\", \"Inn\", \"Mall\", \"Market\", \"Mill\", \"Mine\", \"Post\",\n  \"Road\", \"Stall\", \"Temple\", \"Tower\", \"Union\", \"Wall\"\n];\n\nexport const NOUNS = [\n  \"Acorn\", \"Angel\", \"Apple\", \"Atelier\", \"Autumn\", \"Axe\", \"Baker\", \"Bard\",\n  \"Baron\", \"Barrow\", \"Berry\", \"Birch\", \"Bird\", \"Boar\", \"Book\", \"Bow\",\n  \"Butcher\", \"Candle\", \"Cheese\", \"Cloud\", \"Corn\", \"Cow\", \"Crow\", \"Dawn\",\n  \"Day\", \"Deer\", \"Demon\", \"Dragon\", \"Dream\", \"Dusk\", \"Dust\", \"Dwarf\",\n  \"Eagle\", \"Elf\", \"Feather\", \"Fire\", \"Fish\", \"Flower\", \"Fog\", \"Fox\",\n  \"Frog\", \"Ghost\", \"Gnoll\", \"Goblin\", \"Grave\", \"Halfling\", \"Hare\", \"Hawk\",\n  \"Heaven\", \"Hell\", \"Hook\", \"Hope\", \"Horn\", \"Horse\", \"Hunter\", \"Knight\",\n  \"Kobold\", \"Leaf\", \"Letter\", \"Lion\", \"Mage\", \"Moon\", \"Night\", \"Oak\",\n  \"Orchid\", \"Pine\", \"Pork\", \"Rabbit\", \"Rain\", \"Ram\", \"River\", \"Robin\",\n  \"Rose\", \"Salt\", \"Seed\", \"Sky\", \"Snake\", \"Snow\", \"Sorrow\", \"Spice\",\n  \"Spring\", \"Squirrel\", \"Star\", \"Summer\", \"Sun\", \"Sword\", \"Thief\", \"Thorn\",\n  \"Thunder\", \"Toad\", \"Tournament\", \"Tulip\", \"Violet\", \"Warrior\", \"Water\",\n  \"Wind\", \"Winter\", \"Witch\", \"Wolf\", \"Wyvern\"\n];\n\nexport const FIRST_NAMES = [\n  \"Anna\", \"Arthur\", \"Bernard\", \"Charles\", \"Elizabeth\", \"Fanny\", \"George\",\n  \"Helen\", \"Ilia\", \"John\", \"Kathleen\", \"King\", \"Louis\", \"Marcus\", \"Mary\",\n  \"Nicholas\", \"Prince\", \"Princess\", \"Queen\", \"Tilly\"\n];\n\nexport const CITY_NAMES = [\n  \"Avery\", \"Bayley\", \"Carm\", \"Dun\", \"Ensal\", \"Folton\", \"Galgar\", \"Haye\",\n  \"Idar\", \"Julvet\", \"Kanth\", \"Loy\", \"Marsan\", \"Nisme\", \"Ourar\", \"Peulin\",\n  \"Rundur\", \"Solin\", \"Thaas\", \"Unvary\", \"Vanau\", \"Wark\", \"Yverne\", \"Zalek\"\n];\n\nexport const ADJECTIVES_COLORS = [\n  \"Bad\", \"Black\", \"Bloody\", \"Blue\", \"Bone\", \"Brave\", \"Brown\", \"Burnt\",\n  \"Charming\", \"Coal\", \"Cold\", \"Copper\", \"Coral\", \"Crystal\", \"Damp\", \"Dark\",\n  \"Dry\", \"Dusty\", \"False\", \"Fast\", \"Free\", \"Giant\", \"Glass\", \"Gold\", \"Golden\",\n  \"Good\", \"Great\", \"Green\", \"Gray\", \"Hidden\", \"Hot\", \"Indigo\", \"Iron\", \"Light\",\n  \"Long\", \"Metal\", \"Mithral\", \"Obsidian\", \"Purple\", \"Red\", \"Rock\", \"Royal\",\n  \"Silent\", \"Silver\", \"Small\", \"Stone\", \"True\", \"White\", \"Wild\", \"Wine\", \"Yellow\"\n];\n\nexport const SETTLEMENT_TYPES_TABLE = [\n  \"Borough\", \"Bourg\", \"Camp\", \"Cester\", \"Citadel\", \"City\", \"County\", \"Dorf\",\n  \"Ham\", \"Hamlet\", \"Haven\", \"Heim\", \"Keep\", \"Stead\", \"Town\", \"Village\",\n  \"Ville\", \"Ward\", \"Wihr\", \"Worth\"\n];\n\nexport const DIRECTIONS_ADJECTIVES = [\n  \"Bottom\", \"Down\", \"East\", \"Far\", \"Fort\", \"Haute\", \"High\", \"Little\",\n  \"Lost\", \"Low\", \"Mount\", \"New\", \"North\", \"Old\", \"Port\", \"Saint\", \"South\",\n  \"Under\", \"Up\", \"West\"\n];\n\nexport const NATURE_TOPOGRAPHY = [\n  \"Bay\", \"Beach\", \"Bone\", \"Break\", \"Burrow\", \"Cliff\", \"Corner\", \"Creek\",\n  \"Dale\", \"End\", \"Fall\", \"Field\", \"Forest\", \"Garden\", \"Glade\", \"Glen\",\n  \"Grove\", \"Head\", \"Helm\", \"Hill\", \"Hold\", \"Hole\", \"Hollow\", \"Island\",\n  \"Lake\", \"Land\", \"Limit\", \"Marsh\", \"Mont\", \"Moor\", \"Mount\", \"Mountain\",\n  \"Park\", \"Pass\", \"Path\", \"Peak\", \"Plain\", \"Point\", \"Pool\", \"Rest\", \"Run\",\n  \"Source\", \"Summit\", \"Trail\", \"Tree\", \"Valley\", \"View\", \"Way\", \"Well\", \"Wood\"\n];\n\nexport const DISPOSITIONS = [\n  \"Attack on sight\",\n  \"Hostile\", \n  \"Hostile\",\n  \"Neutral\",\n  \"Neutral\", \n  \"Neutral\",\n  \"Welcoming\",\n  \"Welcoming\",\n  \"Welcoming\",\n  \"Enthusiastic\"\n];\n\n// Castle specific name parts\nexport const CASTLE_FIRST_PARTS = [\n  \"Apple\", \"Battle\", \"Black\", \"Bleak\", \"Blood\", \"Bright\", \"Broken\", \"Cloud\",\n  \"Dark\", \"Dawn\", \"Dragon\", \"Dusk\", \"Fire\", \"Gold\", \"Hammer\", \"Hawk\",\n  \"Horse\", \"Ice\", \"Light\", \"Lion\", \"Moon\", \"Oak\", \"Raven\", \"Red\",\n  \"River\", \"Rose\", \"Silver\", \"Star\", \"Stone\", \"Wind\"\n];\n\nexport const CASTLE_SECOND_PARTS = [\n  \"Bane\", \"Bridge\", \"Fall\", \"Fang\", \"Foot\", \"Heart\", \"Herd\", \"Hold\",\n  \"Hook\", \"Keep\", \"Maw\", \"Mist\", \"Moor\", \"Peak\", \"Rock\", \"Shield\",\n  \"Skull\", \"Song\", \"Soul\", \"Storm\", \"Thorn\", \"Vale\", \"Way\", \"Wood\"\n];\n\n// Abbey saints for naming\nexport const ABBEY_SAINTS = [\n  \"Adélie\", \"Agath\", \"Alexia\", \"Aubreda\", \"Bardolphus\", \"Barthélemy\",\n  \"Beatrix\", \"Bérengérius\", \"Bernard\", \"Cecilia\", \"Cédany\", \"Émelote\",\n  \"Gaufridus\", \"Geffrey\", \"Géroldin\", \"Guillotin\", \"Jaclyn\", \"Jacomus\",\n  \"Madeleine\", \"Marion\", \"Marjorie\", \"Martin\", \"Mary\", \"Melchior\",\n  \"Paul\", \"Pétasse\", \"Peter\", \"Remy\", \"Thomasse\", \"Victor\"\n];\n\n// Settlement interfaces\nexport interface BaseSettlement {\n  category: \"Civilian\" | \"Class-related\";\n  type: string;\n  name: string;\n  nameVariations: string[];\n  disposition: string;\n}\n\nexport interface HamletData extends BaseSettlement {\n  type: \"Hamlet\";\n  mainBuilding: string;\n  peasantHouses: number;\n  totalBuildings: number;\n  layout: string;\n  secret?: string;\n  descriptors?: {\n    adverb: string;\n    adjective: string;\n    description: string;\n  };\n}\n\nexport interface VillageData extends BaseSettlement {\n  type: \"Village\";\n  size: string;\n  sizeMultiplier: number;\n  population: number;\n  occupation: string;\n  layout: string;\n  pointsOfInterest: {\n    general: string[];\n    special: string[];\n  };\n  defense: {\n    features: string[];\n    guards: number;\n  };\n  ruler: string;\n  rulerDisposition: string;\n  notableNPCs: string[];\n  secret?: string;\n  events?: {\n    timing: string;\n    event: string;\n  };\n}\n\nexport interface CityData extends BaseSettlement {\n  type: \"City\";\n  size: string;\n  sizeMultiplier: number;\n  population: number;\n  occupations: string[];\n  characteristics: string[];\n  appearance: string;\n  pointsOfInterest: {\n    special: Array<{\n      location: string;\n      descriptors: {\n        adverb: string;\n        adjective: string;\n        description: string;\n      };\n    }>;\n  };\n  buildingsOfInterest: Array<{\n    building: string;\n    descriptors: {\n      adverb: string;\n      adjective: string;\n      description: string;\n    };\n  }>;\n  defense: {\n    walled: boolean;\n    entrances?: string[];\n    siegeSupplies?: string;\n    guards: number;\n  };\n  ruler: string;\n  rulerDisposition: string;\n  notableNPCs: string[];\n  events?: {\n    timing: string;\n    event: string;\n  };\n}\n\nexport interface CastleData extends BaseSettlement {\n  type: \"Castle\";\n  condition: string;\n  keep: {\n    shape: string;\n    levels: number;\n    defensiveFeature: string;\n    nonDefensiveFeature: string;\n    jails: {\n      commoners: number;\n      nobles: number;\n    };\n    siegeSupplies: number;\n    treasure: Record<string, number>;\n  };\n  defenses: {\n    features: string[];\n    walls?: {\n      shape: string;\n      towers: number;\n      towerShape: string;\n      defensiveFeature: string;\n      nonDefensiveFeature: string;\n    };\n    gatehouse?: {\n      closure: string;\n      towers: number;\n    };\n    moatEncounter?: string;\n    garrison: {\n      totalFighters: number;\n      lordLevel: number;\n      lieutenantLevel: number;\n      bodyguardLevel: number;\n      bodyguards: number;\n      [key: string]: number;\n    };\n  };\n  events?: {\n    timing: string;\n    event: string;\n  };\n}\n\nexport interface TowerData extends BaseSettlement {\n  type: \"Tower\";\n  levels: {\n    aboveground: number;\n    underground: number;\n    total: number;\n    hasBottom: boolean;\n  };\n  connection: string;\n  appearance: {\n    material: string;\n    shape: string;\n    details: string[];\n  };\n  insideAppearance: string;\n  specialEquipment: string[];\n  levelUsage: {\n    ground: string;\n    aboveground: string[];\n    top: string;\n    underground?: string[];\n    bottom?: string;\n  };\n  inhabitants: {\n    wizardLevel: number;\n    apprenticeLevel?: number;\n  };\n}\n\nexport interface AbbeyData extends BaseSettlement {\n  type: \"Abbey\";\n  abbeySize: string;\n  abbeyPopulation: {\n    monksNuns: number;\n    abbotLevel: number;\n  };\n  structureAndLand: {\n    protection: string;\n    outsideWalls: string;\n    areaWithinWalls: string;\n  };\n  coreLocations: string[];\n  additionalLocations: {\n    garden: string[];\n    infirmary: string[];\n    religious: string[];\n    other: string[];\n  };\n  activities: {\n    farming: string[];\n    workshop: string[];\n    other: string[];\n  };\n  fame?: string;\n  history: string;\n  events?: {\n    timing: string;\n    event: string;\n  };\n}\n\nexport type GeneratedSteading = HamletData | VillageData | CityData | CastleData | TowerData | AbbeyData;\n\nexport class SteadingGenerator {\n  private rollDie(sides: number): number {\n    return Math.floor(Math.random() * sides) + 1;\n  }\n\n  private rollD6(): number {\n    return this.rollDie(6);\n  }\n\n  private rollD12(): number {\n    return this.rollDie(12);\n  }\n\n  private rollD20(): number {\n    return this.rollDie(20);\n  }\n\n  private rollD30(): number {\n    return this.rollDie(30);\n  }\n\n  private rollD100(): number {\n    return this.rollDie(100);\n  }\n\n  private roll2D6(): number {\n    return this.rollD6() + this.rollD6();\n  }\n\n  private getRandomElement<T>(array: T[]): T {\n    return array[Math.floor(Math.random() * array.length)];\n  }\n\n  private getTableResult<T>(table: T[], roll: number): T {\n    if (roll <= table.length) {\n      return table[roll - 1];\n    }\n    return table[table.length - 1];\n  }\n\n  determineSettlementType(): { category: \"Civilian\" | \"Class-related\"; type: string } {\n    if (Math.random() < 0.5) {\n      return {\n        category: \"Civilian\",\n        type: this.getRandomElement(CIVILIAN_SETTLEMENTS)\n      };\n    } else {\n      return {\n        category: \"Class-related\", \n        type: this.getRandomElement(CLASS_SETTLEMENTS)\n      };\n    }\n  }\n\n  generateSettlementName(): { name: string; variations: string[] } {\n    // Step 1: Roll on structure table\n    const structureRoll = this.rollD30();\n    const structure = STRUCTURE_TABLE[structureRoll] || \"CF\";\n\n    // Step 2: Roll on component tables based on structure\n    const nameParts: string[] = [];\n\n    for (const char of structure) {\n      if (char === 'A') {\n        const roll = this.rollD30();\n        nameParts.push(this.getTableResult(BUILDINGS_OUTDOORS, roll));\n      } else if (char === 'B') {\n        const roll = this.rollD100();\n        nameParts.push(this.getTableResult(NOUNS, roll));\n      } else if (char === 'C') {\n        const roll = this.rollD20();\n        nameParts.push(this.getTableResult(FIRST_NAMES, roll));\n      } else if (char === 'D') {\n        const roll = Math.floor(Math.random() * 24) + 1;\n        nameParts.push(this.getTableResult(CITY_NAMES, roll));\n      } else if (char === 'E') {\n        const roll = this.rollD100();\n        const adjRoll = Math.floor((roll - 1) / 2);\n        if (adjRoll < ADJECTIVES_COLORS.length) {\n          nameParts.push(ADJECTIVES_COLORS[adjRoll]);\n        }\n      } else if (char === 'F') {\n        const roll = this.rollD20();\n        nameParts.push(this.getTableResult(SETTLEMENT_TYPES_TABLE, roll));\n      } else if (char === 'G') {\n        const roll = this.rollD20();\n        nameParts.push(this.getTableResult(DIRECTIONS_ADJECTIVES, roll));\n      } else if (char === 'H') {\n        const roll = this.rollD100();\n        const natRoll = Math.floor((roll - 1) / 2);\n        if (natRoll < NATURE_TOPOGRAPHY.length) {\n          nameParts.push(NATURE_TOPOGRAPHY[natRoll]);\n        }\n      }\n    }\n\n    const baseName = nameParts.join(\" \");\n    return { name: baseName, variations: [baseName] };\n  }\n\n  generateCastleName(): string {\n    const firstPart = this.getTableResult(CASTLE_FIRST_PARTS, this.rollD30());\n    const secondPart = this.getTableResult(CASTLE_SECOND_PARTS, this.rollDie(24));\n    return `Castle ${firstPart} ${secondPart}`;\n  }\n\n  generateAbbeyName(): string {\n    const roll = this.rollDie(10);\n    \n    if (roll === 1) return \"Abbey of Blessed-Land\";\n    if (roll === 2) return \"Abbey of Clear-Water\";\n    if (roll === 3) return \"Abbey of Fruitful-Garden\";\n    if (roll === 4) {\n      const subOptions = [\"Help\", \"Hope\", \"Relief\"];\n      const subRoll = this.rollDie(3);\n      return `Abbey of Good-${subOptions[subRoll - 1]}`;\n    }\n    if (roll === 5) return \"Abbey of Peaceful-Soul\";\n    if (roll === 6) return \"Abbey of Sacred-Heart\";\n    if (roll === 7) {\n      const subOptions = [\"Chastity\", \"Mercy\", \"the Poor\"];\n      const subRoll = this.rollDie(3);\n      return `Abbey of Our-Lady-of-${subOptions[subRoll - 1]}`;\n    }\n    \n    // 8-10: Saint names\n    const saint = this.getTableResult(ABBEY_SAINTS, this.rollD30());\n    return `Abbey of Saint-${saint}`;\n  }\n\n  generateDisposition(): string {\n    const roll = this.roll2D6();\n    if (roll === 2) return \"Attack on sight\";\n    if (roll >= 3 && roll <= 5) return \"Hostile\";\n    if (roll >= 6 && roll <= 8) return \"Neutral\";\n    if (roll >= 9 && roll <= 11) return \"Welcoming\";\n    return \"Enthusiastic\";\n  }\n\n  generateHamlet(): HamletData {\n    const { name, variations } = this.generateSettlementName();\n    \n    // Main building\n    const mainBuildings = [\n      \"Brewery/Vineyard\", \"Chapel\", \"Farm/Ranch\", \"Manor\", \"Mill\", \"Mine\",\n      \"Sawmill\", \"Shop\", \"Tavern\", \"Toll\", \"Tourney grounds\", \"Watchtower\"\n    ];\n    const mainBuilding = this.getTableResult(mainBuildings, this.rollD12());\n    \n    // Peasant houses\n    const peasantHouses = Math.max(0, this.rollD6() - 1);\n    \n    // Layout\n    const layouts = [\"Heap\", \"Round\", \"Row\"];\n    const layout = this.getTableResult(layouts, this.rollDie(3));\n    \n    // Secret (1/6 chance)\n    let secret: string | undefined;\n    if (this.rollD6() === 1) {\n      const secrets = [\n        \"Cannibals\", \"Cultists\", \"Dopplegangers\",\n        \"Inbred\", \"Murderers\", \"Lycanthropes/Vampires\"\n      ];\n      secret = this.getTableResult(secrets, this.rollD6());\n    }\n\n    // Generate descriptors for narrative flavor\n    const descriptorResult = rollDescriptorTable();\n    const descriptors = {\n      adverb: descriptorResult.adverb,\n      adjective: descriptorResult.adjective,\n      description: descriptorResult.description\n    };\n\n    return {\n      category: \"Civilian\",\n      type: \"Hamlet\",\n      name,\n      nameVariations: variations,\n      disposition: this.generateDisposition(),\n      mainBuilding,\n      peasantHouses,\n      totalBuildings: 1 + peasantHouses,\n      layout,\n      secret,\n      descriptors\n    };\n  }\n\n  generateVillage(): VillageData {\n    const { name, variations } = this.generateSettlementName();\n    \n    // Size and population\n    const sizeRoll = this.rollD6();\n    let size: string, sizeMultiplier: number;\n    if (sizeRoll >= 1 && sizeRoll <= 3) {\n      size = \"Medium\";\n      sizeMultiplier = 2;\n    } else if (sizeRoll >= 4 && sizeRoll <= 5) {\n      size = \"Small\";\n      sizeMultiplier = 1;\n    } else {\n      size = \"Big\";\n      sizeMultiplier = 3;\n    }\n    const population = sizeMultiplier * 50;\n    \n    // Occupation\n    let occupation = \"Farming and cattle breeding only\";\n    if (this.rollD6() === 1) {\n      const occupations = [\n        \"Brewing (breweries) or Viticulture (vineyards)\",\n        \"Fishing (fisheries)\", \"Hunting (tanneries)\",\n        \"Logging (sawmills)\", \"Mining (mines)\", \"Pottery (workshops)\"\n      ];\n      occupation = this.getTableResult(occupations, this.rollD6());\n    }\n    \n    // Layout\n    const layouts = [\"Heap\", \"Round\", \"Row\"];\n    const layout = this.getTableResult(layouts, this.rollDie(3));\n    \n    // Points of interest\n    const general = [\"Blacksmith\", \"Market\", \"Tavern\", \"Well\"];\n    const specialLocations = [\n      \"Abandoned building\", \"Apothecary\", \"Bakery\", \"Burnt/Ruined building\",\n      \"Butcher\", \"Castle-farm\", \"Church\", \"Famous person's house\",\n      \"General store\", \"Graveyard\", \"Guard post\", \"Guildhouse\",\n      \"Gypsy wagon\", \"Horse stables\", \"Library\", \"Mill\",\n      \"Monument/Memorial\", \"Orchard\", \"School\", \"Tailor\"\n    ];\n    \n    // Special locations - Roll 1d20 as many times as village size\n    const special: string[] = [];\n    for (let i = 0; i < sizeMultiplier; i++) {\n      const roll = this.rollD20();\n      special.push(specialLocations[roll - 1]);\n    }\n    \n    // Defense - Roll 1d8 as many times as village size\n    const defenses: string[] = [];\n    for (let i = 0; i < sizeMultiplier; i++) {\n      const defenseOptions = [\n        \"Wooden palisade\", \"Wooden palisade\", \"Wooden palisade\",\n        \"Motte (= mound)\", \"Motte (= mound)\", \"Chevaux de frise\",\n        \"Moat (= trench)\", \"Watchtowers\"\n      ];\n      defenses.push(this.getTableResult(defenseOptions, this.rollDie(8)));\n    }\n\n    // Guards - Roll 1d3+3 and multiply by village size\n    const guardCount = (this.rollDie(3) + 3) * sizeMultiplier;\n    \n    // Ruler\n    const rulers = [\n      \"Bandits\", \"Council\", \"Lycanthrope\", \"Mayor\",\n      \"Merchant\", \"Priest\", \"Village elder\", \"Witch\"\n    ];\n    const ruler = this.getTableResult(rulers, this.rollDie(8));\n    \n    // Disposition\n    const villagerDisposition = this.generateDisposition();\n    let rulerDisposition = villagerDisposition;\n    \n    const dispositionRoll = this.rollD6();\n    if (dispositionRoll >= 5) {\n      // Opposite disposition\n      const opposites: Record<string, string> = {\n        \"Attack on sight\": \"Enthusiastic\",\n        \"Hostile\": \"Welcoming\",\n        \"Neutral\": this.rollDie(3) <= 3 ? \"Hostile\" : \"Welcoming\",\n        \"Welcoming\": \"Hostile\",\n        \"Enthusiastic\": \"Attack on sight\"\n      };\n      rulerDisposition = opposites[villagerDisposition] || villagerDisposition;\n    }\n    \n    // Notable NPCs\n    const npcOptions = [\n      \"Aggressive guard\", \"Annoying minstrel\", \"Bandit in disguise\",\n      \"Beggar who knows a lot\", \"Curious waitress\", \"Cute dog\",\n      \"Frightened peasant\", \"Lonely widow\", \"Misunderstood witch\",\n      \"Old fool/hag\", \"One-handed lumberjack\", \"Retired mercenary\",\n      \"Seasoned adventurer\", \"Sick child\", \"Stubborn magician\",\n      \"Talented craftsman\", \"Traveling merchant\", \"Troubled hunter\",\n      \"Vampire/Werewolf hunter\", \"Village idiot\"\n    ];\n\n    // Notable NPCs - Roll 1d20 as many times as village size\n    const notableNPCs: string[] = [];\n    for (let i = 0; i < sizeMultiplier; i++) {\n      const roll = this.rollD20();\n      notableNPCs.push(npcOptions[roll - 1]);\n    }\n\n    // Secret (1/6 chance)\n    let secret: string | undefined;\n    if (this.rollD6() === 1) {\n      const secrets = [\n        \"Animals turned human\", \"Curse\", \"Elder god cult\", \"Eternal youth\",\n        \"Hidden treasure\", \"Hiding outlaws\", \"Hivemind\", \"Inability to leave\",\n        \"Pact with a demon\", \"Sadistic rituals\", \"Secret society\", \"Underground galleries\"\n      ];\n      secret = this.getTableResult(secrets, this.rollD12());\n    }\n    \n    // Events (1/6 chance)\n    let events: { timing: string; event: string } | undefined;\n    if (this.rollD6() === 1) {\n      const timingRoll = this.rollD6();\n      const timing = timingRoll === 1 ? \"Ended earlier\" : \n                   timingRoll >= 2 && timingRoll <= 4 ? \"Is happening now\" : \n                   \"Will take place in the future\";\n      \n      const eventOptions = [\n        \"Adventurers passing by\", \"Announcement by a crier\", \"Ceremony (wedding, etc.)\",\n        \"Controlled by monsters\", \"Disappearances\", \"Famine\", \"Festival/Fair\",\n        \"Fire\", \"Looting\", \"Market day\", \"Plague\", \"Visit of a notable (lord, etc.)\"\n      ];\n      const event = this.getTableResult(eventOptions, this.rollD12());\n      \n      events = { timing, event };\n    }\n\n    return {\n      category: \"Civilian\",\n      type: \"Village\",\n      name,\n      nameVariations: variations,\n      disposition: villagerDisposition,\n      size,\n      sizeMultiplier,\n      population,\n      occupation,\n      layout,\n      pointsOfInterest: {\n        general,\n        special\n      },\n      defense: {\n        features: Array.from(new Set(defenses)),\n        guards: guardCount\n      },\n      ruler,\n      rulerDisposition,\n      notableNPCs,\n      secret,\n      events\n    };\n  }\n\n  generateCity(): CityData {\n    const { name, variations } = this.generateSettlementName();\n    \n    // Size and population\n    const sizeRoll = this.rollD6();\n    let size: string, sizeMultiplier: number;\n    if (sizeRoll >= 1 && sizeRoll <= 3) {\n      size = \"Medium\";\n      sizeMultiplier = 3;\n    } else if (sizeRoll >= 4 && sizeRoll <= 5) {\n      size = \"Small\";\n      sizeMultiplier = 2;\n    } else {\n      size = \"Big\";\n      sizeMultiplier = 4;\n    }\n    const population = sizeMultiplier * 500;\n    \n    // Main occupations\n    const occupationOptions = [\n      \"Brewing (breweries) or Viticulture (vineyard)\",\n      \"Cattle breeding (farms, meadows)\",\n      \"Farming crops (farms, fields)\",\n      \"Fishing (fishery)\",\n      \"Hunting (tannery)\",\n      \"Logging (sawmills)\",\n      \"Metallurgy (forge, foundry)\",\n      \"Mining (mine)\",\n      \"Pottery (pottery shop)\",\n      \"Trading (caravanserai/port)\"\n    ];\n    \n    const occupations: string[] = [];\n    for (let i = 0; i < sizeMultiplier; i++) {\n      const roll = this.rollDie(10);\n      occupations.push(occupationOptions[roll - 1]);\n    }\n    \n    // Characteristics\n    const characteristicOptions = [\n      \"Nothing\", \"Nothing\", \"Nothing\", \"Nothing\", \"Nothing\",\n      \"Corrupt\", \"Crowded\", \"Destroyed\", \"Dry\", \"Filthy\",\n      \"Holy city\", \"Humid\", \"Narrow\", \"Noisy\", \"Open\",\n      \"Renowned\", \"Silent\", \"Tiered\", \"Unsafe\", \"Windy\"\n    ];\n    \n    const characteristics: string[] = [];\n    let attempts = 0;\n    while (characteristics.length < 2 && attempts < 10) {\n      const roll = this.rollD20();\n      const char = characteristicOptions[roll - 1];\n      if (char !== \"Nothing\" && !characteristics.includes(char)) {\n        characteristics.push(char);\n      }\n      attempts++;\n    }\n    \n    // Appearance\n    const appearanceOptions = [\n      \"Cluttered\", \"Cobblestone\", \"Colorful\", \"Covered with art\", \"Dark\",\n      \"Eerie\", \"Flowers\", \"Geometric\", \"Huge windows\", \"Light\",\n      \"Lots of canals\", \"Lots of stairs\", \"Misaligned buildings\", \"Red bricks\", \"Stark\",\n      \"Tall towers\", \"White marble\", \"Wondrous\", \"Wooden\"\n    ];\n    \n    const appearanceRoll = this.rollD20();\n    let appearance: string;\n    if (appearanceRoll === 20) {\n      const colorSchemes = [\"Grayscale\", \"Black and white\", \"Blue and white\", \"Sand and terracotta\"];\n      appearance = `Specific color scheme: ${this.getRandomElement(colorSchemes)}`;\n    } else {\n      appearance = appearanceOptions[appearanceRoll - 1];\n    }\n    \n    // Points of interest\n    \n    const specialLocationOptions = [\n      \"Abandoned building\", \"Aqueduct\", \"Archaeological site\", \"Bridge\",\n      \"Burnt/Ruined building\", \"Calvary\", \"Carriage stop\", \"Construction site\",\n      \"Famous street\", \"Fighting pit\", \"Fountain\", \"Gallows\", \"Junkyard\",\n      \"Market hall\", \"Military cemetery\", \"Monument/Memorial\", \"Park\",\n      \"Pilgrimage\", \"Plaza\", \"Slave pit\"\n    ];\n    \n    const special: Array<{\n      location: string;\n      descriptors: {\n        adverb: string;\n        adjective: string;\n        description: string;\n      };\n    }> = [];\n    for (let i = 0; i < sizeMultiplier; i++) {\n      const roll = this.rollD20();\n      const location = specialLocationOptions[roll - 1];\n      const descriptorResult = rollDescriptorTable();\n\n      special.push({\n        location,\n        descriptors: {\n          adverb: descriptorResult.adverb,\n          adjective: descriptorResult.adjective,\n          description: descriptorResult.description\n        }\n      });\n    }\n    \n    // Buildings of interest\n    const buildingsOfInterest: Array<{\n      building: string;\n      descriptors: {\n        adverb: string;\n        adjective: string;\n        description: string;\n      };\n    }> = [];\n    for (let i = 0; i < sizeMultiplier * 3; i++) {\n      const roll = this.rollD20();\n      let building = \"\";\n\n      if (roll >= 1 && roll <= 3) {\n        // Housing - Roll 1d10 for regular city housing only and 1d20 for all types\n        const regularHousingRoll = this.rollDie(10);\n        const housingOptions = [\n          \"Studio\", \"One bedroom apartment\", \"Two bedrooms apartment\", \"Bungalow\",\n          \"Maisonnette\", \"Penthouse\", \"Mansion\", \"Hotel room\", \"Tower\",\n          \"Boarding house\", \"Tent\", \"Houseboat\", \"Under a bridge\", \"Shanty\",\n          \"Squat\", \"Underground bunker\", \"Caravan\", \"Treehouse\", \"Basement\", \"Hut\"\n        ];\n        const detail = this.getTableResult(housingOptions, regularHousingRoll <= 10 ? regularHousingRoll : this.rollD20());\n        building = `Housing: ${detail}`;\n      } else if (roll >= 4 && roll <= 10) {\n        // Business - Use exact business table from requirements (1-100)\n        const businessOptions = [\n          \"Alchemist\", \"Alchemist\", \"Animal trainer\", \"Animal trainer\",\n          \"Apothecary\", \"Apothecary\", \"Armorer\", \"Armorer\",\n          \"Artist\", \"Artist\", \"Astronomer\", \"Astronomer\",\n          \"Baker\", \"Baker\", \"Bank\", \"Bank\",\n          \"Blacksmith\", \"Blacksmith\", \"Bookmaker\", \"Bookmaker\",\n          \"Botanist\", \"Botanist\", \"Brewery\", \"Brewery\",\n          \"Brothel\", \"Brothel\", \"Butcher\", \"Butcher\",\n          \"Candlemaker\", \"Candlemaker\", \"Candy shop\", \"Candy shop\",\n          \"Carpenter\", \"Carpenter\", \"Cartographer\", \"Cartographer\",\n          \"Casino\", \"Casino\", \"Cheesemaker\", \"Cheesemaker\",\n          \"Doctor\", \"Doctor\", \"Dollmaker\", \"Dollmaker\",\n          \"Florist\", \"Florist\", \"Fortuneteller\", \"Fortuneteller\",\n          \"Foundry\", \"Foundry\", \"General store\", \"General store\",\n          \"Glassblower\", \"Glassblower\", \"Hairdresser\", \"Hairdresser\",\n          \"Hardware store\", \"Hardware store\", \"Jeweler\", \"Jeweler\",\n          \"Lawyer\", \"Lawyer\", \"Locksmith\", \"Locksmith\",\n          \"Pawnshop\", \"Pawnshop\", \"Perfumer\", \"Perfumer\",\n          \"Pet shop\", \"Pet shop\", \"Potter\", \"Potter\",\n          \"Restaurant\", \"Restaurant\", \"Sage\", \"Sage\",\n          \"Sauna\", \"Sauna\", \"Scribe\", \"Scribe\",\n          \"Siege engines seller\", \"Siege engines seller\", \"Slaughterhouse\", \"Slaughterhouse\",\n          \"Stables\", \"Stables\", \"Tailor\", \"Tailor\",\n          \"Tanner\", \"Tanner\", \"Tapestry maker\", \"Tapestry maker\",\n          \"Tavern\", \"Tavern\", \"Tinker\", \"Tinker\",\n          \"Veterinarian\", \"Veterinarian\", \"Wine shop\", \"Wine shop\"\n        ];\n        const business = this.getTableResult(businessOptions, this.rollD100());\n        building = `Business: ${business}`;\n      } else if (roll >= 11 && roll <= 13) {\n        // Official buildings\n        const officialOptions = [\n          \"Arcane university\", \"Archives\", \"Asylum\", \"City hall\", \"Conservatory\",\n          \"Dispensary\", \"Embassy\", \"Fire station\", \"Mayor office\", \"Meteorological institute\",\n          \"Mint\", \"Palace\", \"Post office\", \"School\", \"Sewers\", \"Tax office\",\n          \"Tourist office\", \"Tribunal\", \"University\", \"Water tower\"\n        ];\n        const detail = this.getTableResult(officialOptions, this.rollD20());\n        building = `Official: ${detail}`;\n      } else if (roll === 14) {\n        // Religious buildings\n        const religiousOptions = [\n          \"Catacombs\", \"Cathedral\", \"Church\", \"Covent\", \"Mausoleum\", \"Monastery\",\n          \"Necropolis\", \"Orphanage\", \"Sanctuary\", \"Seminar\", \"Shrine\", \"Ziggurat\"\n        ];\n        const detail = this.getTableResult(religiousOptions, this.rollD12());\n        building = `Religious: ${detail}`;\n      } else if (roll >= 15 && roll <= 17) {\n        // Public buildings\n        const publicOptions = [\n          \"Aquarium\", \"Arena\", \"Art gallery\", \"Auction hall\", \"Botanical garden\",\n          \"Event center\", \"Gymnasium\", \"Historical building\", \"House for sale\",\n          \"Hospital\", \"Library\", \"Morgue\", \"Museum\", \"Observatory\", \"Opera\",\n          \"Guildhouse\", \"Public baths\", \"Theater\", \"Workshop\", \"Zoo\"\n        ];\n        const detail = this.getTableResult(publicOptions, this.rollD20());\n        building = `Public: ${detail}`;\n      } else {\n        // Military buildings (18-20)\n        const militaryOptions = [\n          \"Armory\", \"Barracks\", \"Canteen\", \"Citadel\", \"Fort\", \"Guard post\",\n          \"Guard tower\", \"Jail\", \"Menagerie\", \"Military archives\", \"Military hospital\",\n          \"Military school\", \"Military surplus\", \"Prison\", \"Recruitment center\",\n          \"Siege workshop\", \"Spy academy\", \"Training hall\", \"Underground vault\", \"Warehouse\"\n        ];\n        const detail = this.getTableResult(militaryOptions, this.rollD20());\n        building = `Military: ${detail}`;\n      }\n\n      // Generate mythic descriptors for each building\n      const descriptorResult = rollDescriptorTable();\n      buildingsOfInterest.push({\n        building,\n        descriptors: {\n          adverb: descriptorResult.adverb,\n          adjective: descriptorResult.adjective,\n          description: descriptorResult.description\n        }\n      });\n    }\n    \n    // Defense\n    const isWalled = this.rollDie(2) === 1;\n    let defenseInfo: CityData['defense'] = {\n      walled: isWalled,\n      guards: (this.rollDie(3) + 3) * 5 * sizeMultiplier\n    };\n    \n    if (isWalled) {\n      const entrances: string[] = [];\n      const availableDirections = [\"North\", \"East\", \"South\", \"West\"];\n\n      for (let i = 0; i < sizeMultiplier; i++) {\n        // Roll 1d4 per entrance to know which cardinal point (reroll any duplicate)\n        let direction: string;\n        let attempts = 0;\n        do {\n          const directionRoll = this.rollDie(4);\n          direction = [\"North\", \"East\", \"South\", \"West\"][directionRoll - 1];\n          attempts++;\n        } while (entrances.some(e => e.includes(direction)) && attempts < 10);\n\n        // If we couldn't find a unique direction after 10 attempts, just use any available\n        if (entrances.some(e => e.includes(direction))) {\n          const usedDirections = entrances.map(e => e.split(' ')[0]);\n          const remaining = availableDirections.filter(d => !usedDirections.includes(d));\n          direction = remaining.length > 0 ? remaining[0] : direction;\n        }\n\n        const entranceRoll = this.rollD6();\n        let entranceType: string;\n        if (entranceRoll >= 1 && entranceRoll <= 3) {\n          entranceType = \"Wooden doors\";\n        } else if (entranceRoll >= 4 && entranceRoll <= 5) {\n          entranceType = \"Portcullis\";\n        } else {\n          entranceType = \"Both\";\n        }\n\n        entrances.push(`${direction} entrance: ${entranceType} (guarded by 2 towers)`);\n      }\n      \n      defenseInfo.entrances = entrances;\n      defenseInfo.siegeSupplies = `${this.roll2D6()} months`;\n    }\n    \n    // Ruler\n    const rulers = [\n      \"Noble\", \"Noble\", \"Clergy\", \"Council\", \"Mayor\",\n      \"Merchants' guild\", \"Thieves' guild\", \"Vampire\"\n    ];\n    const ruler = this.getTableResult(rulers, this.rollDie(8));\n    \n    // Disposition\n    const citizenDisposition = this.generateDisposition();\n    let rulerDisposition = citizenDisposition;\n    \n    const dispositionRoll = this.rollD6();\n    if (dispositionRoll >= 5) {\n      const opposites: Record<string, string> = {\n        \"Attack on sight\": \"Enthusiastic\",\n        \"Hostile\": \"Welcoming\",\n        \"Neutral\": this.rollDie(3) <= 3 ? \"Hostile\" : \"Welcoming\",\n        \"Welcoming\": \"Hostile\",\n        \"Enthusiastic\": \"Attack on sight\"\n      };\n      rulerDisposition = opposites[citizenDisposition] || citizenDisposition;\n    }\n    \n    // Notable NPCs\n    const npcOptions = [\n      \"Aggressive guard\", \"Annoying minstrel\", \"Bandit in disguise\",\n      \"Beggar who knows a lot\", \"Clever orphan\", \"Corrupted official\",\n      \"Curious waitress\", \"Distracted scholar\", \"Haughty nobleman\",\n      \"Lonely widow\", \"Nervous tax collector\", \"Penniless merchant\",\n      \"Princess on the run\", \"Retired mercenary\", \"Seasoned adventurer\",\n      \"Shady diplomat\", \"Stubborn wizard\", \"Talented craftsman\",\n      \"Traveler from a distant land\", \"Vampire/Werewolf hunter\"\n    ];\n    \n    const notableNPCs: string[] = [];\n    for (let i = 0; i < sizeMultiplier; i++) {\n      const roll = this.rollD20();\n      notableNPCs.push(npcOptions[roll - 1]);\n    }\n    \n    // Events (1/6 chance)\n    let events: { timing: string; event: string } | undefined;\n    if (this.rollD6() === 1) {\n      const timingRoll = this.rollD6();\n      const timing = timingRoll === 1 ? \"Ended earlier\" :\n                   timingRoll >= 2 && timingRoll <= 4 ? \"Is happening now\" :\n                   \"Will take place in the future\";\n      \n      const eventOptions = [\n        \"Announcement by a crier\", \"Assassination\", \"Ceremony (wedding, etc.)\",\n        \"Disappearances\", \"Festival/Fair\", \"Fire\", \"Market day\", \"Plague\",\n        \"Siege/Looting\", \"Tournament\", \"Vermin invasion\", \"Visit of a religious person\"\n      ];\n      const event = this.getTableResult(eventOptions, this.rollD12());\n      \n      events = { timing, event };\n    }\n\n    return {\n      category: \"Civilian\",\n      type: \"City\",\n      name,\n      nameVariations: variations,\n      disposition: citizenDisposition,\n      size,\n      sizeMultiplier,\n      population,\n      occupations,\n      characteristics,\n      appearance,\n      pointsOfInterest: {\n        special\n      },\n      buildingsOfInterest,\n      defense: defenseInfo,\n      ruler,\n      rulerDisposition,\n      notableNPCs,\n      events\n    };\n  }\n\n  generateCastle(): CastleData {\n    const name = this.generateCastleName();\n    \n    // Condition\n    const conditions = [\"Perfect\", \"Worn\", \"Worn\", \"Aged\", \"Aged\", \"Crumbling\"];\n    const condition = this.getTableResult(conditions, this.rollD6());\n    \n    // Keep details\n    const keepShapes = [\"Square/Rectangle\", \"Square/Rectangle\", \"Square/Rectangle\", \"Round\", \"Round\", \"Shell (= hollow cylinder)\"];\n    const keepShape = this.getTableResult(keepShapes, this.rollD6());\n    const keepLevels = this.rollDie(3) + 1;\n    \n    const defensiveFeatures = [\n      \"None\", \"None\", \"None\", \"None\", \"None\", \"None\",\n      \"Ballista\", \"Boiling oil\", \"Catapult\", \"Hoarding\", \"Iron spikes\", \"Piles of rocks\"\n    ];\n    const keepDefensiveFeature = this.getTableResult(defensiveFeatures, this.rollD12());\n    \n    const nonDefensiveFeatures = [\n      \"None\", \"None\", \"None\", \"None\", \"None\", \"None\",\n      \"Banners/Flags\", \"Gargoyles\", \"Heads/Bodies\", \"Overgrown\", \"Religious symbols\", \"Secret passage\"\n    ];\n    const keepNonDefensiveFeature = this.getTableResult(nonDefensiveFeatures, this.rollD12());\n    \n    // Jails and supplies\n    const commonersInJail = this.roll2D6();\n    const noblesInJail = this.rollDie(3);\n    const siegeSupplies = this.roll2D6();\n    \n    // Treasure (following exact requirements)\n    const treasure: Record<string, number> = {};\n\n    // 50% chance of 1d4×10000 gp\n    if (this.rollD100() <= 50) {\n      treasure.gold = this.rollDie(4) * 10000;\n    }\n\n    // 50% chance of 1d6×5000 gp\n    if (this.rollD100() <= 50) {\n      treasure.additionalGold = this.rollDie(6) * 5000;\n    }\n\n    // 25% chance of 3d6 gems\n    if (this.rollD100() <= 25) {\n      treasure.gems = this.rollDie(6) + this.rollDie(6) + this.rollDie(6); // 3d6\n    }\n\n    // 25% chance of 1d10 pieces of jewelry\n    if (this.rollD100() <= 25) {\n      treasure.jewelry = this.rollDie(10);\n    }\n\n    // 15% chance of 4 magic items + 1d6 scrolls\n    if (this.rollD100() <= 15) {\n      treasure.magicItems = 4;\n      treasure.scrolls = this.rollD6();\n    }\n    \n    // Defenses\n    const numDefenses = this.rollDie(4);\n    const defenseTypes = [\n      \"Stone walls and towers\", \"Stone walls and towers\", \"Stone walls and towers\",\n      \"Moat (= trench)\", \"Motte (= mound)\", \"Wooden palisade\"\n    ];\n    \n    const defenseFeatures: string[] = [];\n    for (let i = 0; i < numDefenses; i++) {\n      const roll = this.rollD6();\n      defenseFeatures.push(defenseTypes[roll - 1]);\n    }\n    \n    const uniqueDefenses = Array.from(new Set(defenseFeatures));\n    \n    // Garrison\n    const totalFighters = this.rollDie(6) * 10 + this.rollDie(6) * 10 + this.rollDie(6) * 10; // 3d6 × 10\n    const lordLevel = 9 + Math.floor(totalFighters / 60);\n    \n    const garrison = {\n      totalFighters,\n      lordLevel,\n      lieutenantLevel: lordLevel - 2,\n      bodyguardLevel: lordLevel - 3,\n      bodyguards: 6,\n      cavaliersHeavy: Math.floor(totalFighters * 0.10),\n      cavaliersMediumSpear: Math.floor(totalFighters * 0.10),\n      cavaliersMediumBow: Math.floor(totalFighters * 0.10),\n      footmenSword: Math.floor(totalFighters * 0.40),\n      footmenPolearm: Math.floor(totalFighters * 0.10),\n      footmenCrossbow: Math.floor(totalFighters * 0.10),\n      footmenLongbow: Math.floor(totalFighters * 0.10)\n    };\n    \n    // Additional defense details\n    let walls, gatehouse, moatEncounter;\n    \n    if (uniqueDefenses.includes(\"Stone walls and towers\")) {\n      const wallShapes = [\n        { shape: \"Square/Rectangle\", towers: 4 },\n        { shape: \"Trapezium\", towers: 4 },\n        { shape: \"Pentagon\", towers: 5 },\n        { shape: \"Hexagon\", towers: 6 },\n        { shape: \"Octagon\", towers: 8 },\n        { shape: \"Star\", towers: 10 },\n        { shape: \"Cross\", towers: 12 },\n        { shape: \"Circle\", towers: this.rollDie(3) + 3 }\n      ];\n      \n      const wallInfo = wallShapes[this.rollDie(8) - 1];\n      const towerShapes = [\"Square\", \"Square\", \"Square\", \"Round\", \"Round\", \"Polygonal (3, 6 or 8 sides)\"];\n      const towerShape = this.getTableResult(towerShapes, this.rollD6());\n      \n      walls = {\n        shape: wallInfo.shape,\n        towers: wallInfo.towers,\n        towerShape,\n        defensiveFeature: this.getTableResult(defensiveFeatures, this.rollD12()),\n        nonDefensiveFeature: this.getTableResult(nonDefensiveFeatures, this.rollD12())\n      };\n      \n      // Gatehouse\n      const closures = [\n        \"Portcullis and wooden door\", \"Portcullis and wooden door\", \"Portcullis and wooden door\",\n        \"Drawbridge\", \"Drawbridge\", \"Both\"\n      ];\n      gatehouse = {\n        closure: this.getTableResult(closures, this.rollD6()),\n        towers: 2\n      };\n    }\n    \n    if (uniqueDefenses.includes(\"Moat (= trench)\")) {\n      const encounters = [\"Nothing\", \"Nothing\", \"Nothing\", \"Nothing\", \"Crocodiles\", \"Electric eels\", \"Leeches\", \"Piranha\"];\n      moatEncounter = this.getTableResult(encounters, this.rollDie(8));\n    }\n    \n    // Events (1/6 chance)\n    let events: { timing: string; event: string } | undefined;\n    if (this.rollD6() === 1) {\n      const timingRoll = this.rollD6();\n      const timing = timingRoll === 1 ? \"Ended earlier\" :\n                   timingRoll >= 2 && timingRoll <= 4 ? \"Is happening now\" :\n                   \"Will take place in the future\";\n      \n      const eventOptions = [\n        \"Assassination\", \"Big HD monster attack\", \"Ceremony (wedding, etc.)\",\n        \"Festival/Fair\", \"Fire\", \"Plague\", \"Resources/Gold dwindling\",\n        \"Rival lord scouting\", \"Small HD monsters wanting to establish a lair nearby\",\n        \"Siege/Looting\", \"Tournament\", \"Visit of a notable person\"\n      ];\n      const event = this.getTableResult(eventOptions, this.rollD12());\n      \n      events = { timing, event };\n    }\n\n    return {\n      category: \"Class-related\",\n      type: \"Castle\",\n      name,\n      nameVariations: [name],\n      disposition: this.generateDisposition(),\n      condition,\n      keep: {\n        shape: keepShape,\n        levels: keepLevels,\n        defensiveFeature: keepDefensiveFeature,\n        nonDefensiveFeature: keepNonDefensiveFeature,\n        jails: {\n          commoners: commonersInJail,\n          nobles: noblesInJail\n        },\n        siegeSupplies: siegeSupplies,\n        treasure\n      },\n      defenses: {\n        features: uniqueDefenses,\n        walls,\n        gatehouse,\n        moatEncounter,\n        garrison\n      },\n      events\n    };\n  }\n\n  generateTower(): TowerData {\n    const { name, variations } = this.generateSettlementName();\n    \n    // Levels\n    const abovegroundLevels = this.rollD12();\n    const undergroundRoll = this.rollD12();\n    let undergroundLevels = 0;\n    \n    if (undergroundRoll >= 7 && undergroundRoll <= 8) undergroundLevels = 1;\n    else if (undergroundRoll >= 9 && undergroundRoll <= 10) undergroundLevels = 2;\n    else if (undergroundRoll === 11) undergroundLevels = 3;\n    else if (undergroundRoll === 12) undergroundLevels = 4;\n    \n    const hasBottom = undergroundLevels > 0;\n    const totalLevels = Math.max(3, abovegroundLevels + undergroundLevels + 1 + (hasBottom ? 1 : 0));\n    \n    // Connection\n    const connections = [\n      \"Staircase\", \"Staircase\", \"Staircase\",\n      \"Spiral staircase\", \"Spiral staircase\", \"Spiral staircase\",\n      \"Ladder\", \"Ladder\", \"Elevator\", \"Elevator\",\n      \"Magic elevator\", \"Teleportation portals\"\n    ];\n    const connection = this.getTableResult(connections, this.rollD12());\n    \n    // Appearance\n    const materials = [\n      \"Cobblestone\", \"Cobblestone\", \"Cobblestone\", \"Cobblestone\", \"Cobblestone\",\n      \"Wood\", \"Wood\", \"Wood\", \"Wood\", \"Wood\",\n      \"Bricks\", \"Bricks\", \"Bricks\",\n      \"Sandstone\", \"Sandstone\", \"Sandstone\",\n      \"Limestone\", \"Limestone\",\n      \"Marble\", \"Metal\"\n    ];\n    const material = this.getTableResult(materials, this.rollD20());\n    \n    const shapes = [\n      \"Square\", \"Square\", \"Square\", \"Square\", \"Square\",\n      \"Round\", \"Round\", \"Round\", \"Round\", \"Round\",\n      \"Conical\", \"Conical\", \"Conical\",\n      \"Tilted\", \"Tilted\", \"Tilted\",\n      \"Asymmetrical\", \"S-shaped\", \"Stacked\", \"Twisted\"\n    ];\n    const shape = this.getTableResult(shapes, this.rollD20());\n    \n    const detailOptions = [\n      \"Nothing\", \"Nothing\", \"Nothing\", \"Nothing\", \"Nothing\", \"Nothing\", \"Nothing\", \"Nothing\", \"Nothing\", \"Nothing\",\n      \"Balcony\", \"Banners\", \"Battlements\", \"Climbing plants\", \"Flags\", \"Moldings\", \"Porch\", \"Stained glass\", \"Statues/Gargoyles\", \"Turrets\"\n    ];\n    \n    const details: string[] = [];\n    for (let i = 0; i < this.rollDie(3); i++) {\n      const detail = this.getTableResult(detailOptions, this.rollD20());\n      if (detail !== \"Nothing\" && !details.includes(detail)) {\n        details.push(detail);\n      }\n    }\n    \n    // Inside appearance\n    const insideAppearances = [\n      \"Colorful\", \"Cozy\", \"Dark\", \"Dusty\", \"Extravagant\",\n      \"Luxurious\", \"Moldy\", \"Old fashioned\", \"Stark\", \"Well decorated\"\n    ];\n    const insideAppearance = this.getTableResult(insideAppearances, this.rollDie(10));\n    \n    // Special equipment\n    const equipmentOptions = [\n      \"Nothing\", \"Nothing\", \"Nothing\", \"Nothing\", \"Nothing\", \"Nothing\", \"Nothing\", \"Nothing\", \"Nothing\", \"Nothing\",\n      \"Acoustic tube\", \"Alarm system\", \"Dumbwaiter\", \"Emergency ladder/stairs\", \"Garbage chute\",\n      \"Oversized pet doors\", \"Pneumatic tubes\", \"Secret passage\", \"Slide\", \"Ventilation system\"\n    ];\n    \n    const specialEquipment: string[] = [];\n    for (let i = 0; i < this.rollDie(3); i++) {\n      const item = this.getTableResult(equipmentOptions, this.rollD20());\n      if (item !== \"Nothing\" && !specialEquipment.includes(item)) {\n        specialEquipment.push(item);\n      }\n    }\n    \n    // Level usage\n    const generateLevelUsage = (levelType: string): string => {\n      if (levelType === \"ground\") {\n        const options = [\n          \"Empty and dusty\", \"Fortified room\", \"Hallway\", \"Reception desk\",\n          \"Ruined room\", \"Shop/Tavern\", \"Trapped room\", \"Unloading room\"\n        ];\n        return this.getTableResult(options, this.rollDie(8));\n      } else if (levelType === \"aboveground\") {\n        const options = [\n          \"Abandoned/Cursed level\", \"Archives\", \"Armory\", \"Bedroom(s)\",\n          \"Kitchen and dining room\", \"Laboratory\", \"Library\", \"Meeting room\",\n          \"Museum\", \"Music room/Art room\", \"Office/Study\", \"Storage room\"\n        ];\n        return this.getTableResult(options, this.rollD12());\n      } else if (levelType === \"top\") {\n        const options = [\n          \"Aviary\", \"Beacon\", \"Duel platform\", \"Foghorn\", \"Golden apple tree\",\n          \"Greenhouse\", \"High security prison\", \"Landing platform\", \"Lightning rod\",\n          \"Lookout post\", \"Magic searchlight\", \"Monster nest\", \"Observatory\",\n          \"Panic room\", \"Ruined/Overgrown\", \"Siege engine\", \"Throne room\",\n          \"Treasure room\", \"Weather station\", \"Windmill\"\n        ];\n        return this.getTableResult(options, this.rollD20());\n      } else if (levelType === \"underground\") {\n        const options = [\n          \"Abandoned/Cursed level\", \"Alchemy lab\", \"Cellar\", \"Chapel\",\n          \"Forge\", \"Menagerie\", \"Mushroom cave\", \"Prison\", \"Rituals room\",\n          \"Storage\", \"Torture room\", \"Wine cellar\"\n        ];\n        return this.getTableResult(options, this.rollD12());\n      } else if (levelType === \"bottom\") {\n        const options = [\n          \"Abyss\", \"Ancient ruins\", \"Arena\", \"Boudoir\", \"Creature mouth\",\n          \"Excavation site\", \"Flesh pit\", \"Flooded pit\", \"Gambling den\",\n          \"Magic portal\", \"Magic well\", \"Mine\", \"Oubliette\",\n          \"Tunnel to the center of the planet\", \"Secret society headquarters\",\n          \"Tomb\", \"Tunnel to a lair\", \"Tunnel to the surface\", \"Vault\", \"Well\"\n        ];\n        return this.getTableResult(options, this.rollD20());\n      }\n      return \"Unknown\";\n    };\n    \n    const levelUsage: TowerData['levelUsage'] = {\n      ground: generateLevelUsage(\"ground\"),\n      aboveground: [],\n      top: generateLevelUsage(\"top\")\n    };\n    \n    for (let i = 0; i < abovegroundLevels; i++) {\n      levelUsage.aboveground.push(generateLevelUsage(\"aboveground\"));\n    }\n    \n    if (undergroundLevels > 0) {\n      levelUsage.underground = [];\n      for (let i = 0; i < undergroundLevels; i++) {\n        levelUsage.underground.push(generateLevelUsage(\"underground\"));\n      }\n    }\n    \n    if (hasBottom) {\n      levelUsage.bottom = generateLevelUsage(\"bottom\");\n    }\n    \n    // Inhabitants\n    const wizardLevel = Math.floor(Math.random() * 12) + 9; // 9-20\n    let apprenticeLevel: number | undefined;\n    if (this.rollDie(4) === 1) {\n      apprenticeLevel = this.rollD6();\n    }\n\n    return {\n      category: \"Class-related\",\n      type: \"Tower\",\n      name,\n      nameVariations: variations,\n      disposition: this.generateDisposition(),\n      levels: {\n        aboveground: abovegroundLevels,\n        underground: undergroundLevels,\n        total: totalLevels,\n        hasBottom\n      },\n      connection,\n      appearance: {\n        material,\n        shape,\n        details\n      },\n      insideAppearance,\n      specialEquipment,\n      levelUsage,\n      inhabitants: {\n        wizardLevel,\n        apprenticeLevel\n      }\n    };\n  }\n\n  generateAbbey(): AbbeyData {\n    const name = this.generateAbbeyName();\n    \n    // Size\n    const sizeRoll = this.rollD6();\n    const size = sizeRoll >= 1 && sizeRoll <= 5 ? \"Small\" : \"Major\";\n    \n    // Population\n    let monksNuns: number, abbotLevel: number;\n    if (size === \"Small\") {\n      monksNuns = this.rollDie(4) * 10 + 20;\n      abbotLevel = 9;\n      if (monksNuns >= 50) abbotLevel += 1;\n    } else {\n      monksNuns = (this.rollDie(24)) * 10 + 90;\n      abbotLevel = 9 + Math.floor(monksNuns / 100);\n    }\n    \n    // Structure and land\n    const structureAndLand = {\n      protection: \"Stone wall with large gate\",\n      outsideWalls: \"Fields and farming buildings (barns, mills, etc.)\",\n      areaWithinWalls: `${this.rollDie(2) + 2} acres (= ${1.2 + (this.rollDie(2) - 1) * 0.4}-${1.6} ha)`\n    };\n    \n    // Core locations\n    const coreLocations = [\n      \"Abbot's room\", \"Cellars\", \"Cemetery\", \"Church\", \"Cloisters and garden\",\n      \"Infirmary\", \"Kitchen and refectory\", \"Monks cells\", \"Necessarium (latrines)\",\n      \"Servants, laborers and tradesmen quarters\", \"Storehouses\"\n    ];\n    \n    // Additional locations\n    const gardenOptions = [\"Flower garden\", \"Fountain\", \"Kitchen garden\", \"Physic garden (medicine)\"];\n    const infirmaryOptions = [\"Bloodletting & purging room\", \"Drugstore\", \"Physician's residence\", \"Room for critical patients\"];\n    const religiousOptions = [\"Chapter house (for meetings)\", \"Parlour\", \"School\", \"Scriptorium and library\"];\n    const otherOptions = [\"Abbot's gateway\", \"Barns and stables\", \"Guest rooms\", \"Vestarium (clothing storage)\", \"Washhouse\", \"Watchtower\"];\n    \n    const additionalLocations = {\n      garden: [this.getTableResult(gardenOptions, this.rollDie(4))],\n      infirmary: [this.getTableResult(infirmaryOptions, this.rollDie(4))],\n      religious: [this.getTableResult(religiousOptions, this.rollDie(4))],\n      other: [this.getTableResult(otherOptions, this.rollD6())]\n    };\n    \n    // Activities\n    const farmingOptions = [\n      \"Barley (beer)\", \"Chickens (meat)\", \"Cotton\", \"Cows (meat, milk and cheese)\",\n      \"Goats (meat, milk and cheese)\", \"Grapes (wine)\", \"Hops (beer)\", \"Orchard (fruits and preserves)\",\n      \"Pigs (meat)\", \"Sheeps (meat and wool)\", \"Vegetables\", \"Wheat (flour and bread)\"\n    ];\n    \n    const workshopOptions = [\"Candle makers\", \"Cutlers\", \"Potters\", \"Shoemakers\", \"Smiths\", \"Tanners\"];\n    const otherActivityOptions = [\"Bee keeping\", \"Bookshop\", \"Catering\", \"Copy & translation\", \"Exorcism\", \"Guided tour\"];\n    \n    const farming: string[] = [];\n    for (let i = 0; i < 2; i++) {\n      const activity = this.getTableResult(farmingOptions, this.rollD12());\n      if (!farming.includes(activity)) {\n        farming.push(activity);\n      }\n    }\n    \n    const activities = {\n      farming,\n      workshop: [this.getTableResult(workshopOptions, this.rollD6())],\n      other: [this.getTableResult(otherActivityOptions, this.rollD6())]\n    };\n    \n    // Fame (for major abbeys)\n    let fame: string | undefined;\n    if (size === \"Major\") {\n      const fameRoll = this.rollD20();\n      if (fameRoll >= 1 && fameRoll <= 11) {\n        const fameReasons = [\n          \"Age\", \"Architecture\", \"Cattle baptism\", \"Curative (hot) springs\",\n          \"Domain and landscapes\", \"Grave of well known bishop\", \"Key religious celebration\",\n          \"Meals served to travelers\", \"Pilgrimage\", \"Power\", \"Quality of products\"\n        ];\n        fame = fameReasons[fameRoll - 1];\n      } else {\n        // Religious artifact\n        const artifactTypes = [\"Ancient parchment\", \"Art piece\", \"Crown\", \"Holy sword\", \"Precious book\", \"Relic\"];\n        const artifactType = this.getTableResult(artifactTypes, this.rollD6());\n        \n        if (artifactType === \"Relic\") {\n          const relicTypes = [\n            \"Arm\", \"Blood\", \"Bones (vertebra, phalanx)\", \"Eye\", \"Flesh\", \"Head\",\n            \"Heart\", \"Item that killed the saint\", \"Leg\", \"Piece of clothing\",\n            \"Prayer book\", \"Religious symbol\", \"Ring\", \"Sandals\", \"Scalp\",\n            \"Shroud\", \"Skin\", \"Tongue\", \"Tooth\", \"Walking stick\"\n          ];\n          const relicType = this.getTableResult(relicTypes, this.rollD20());\n          const saint = this.getTableResult(ABBEY_SAINTS, this.rollD30());\n          \n          const spellLevels: Record<number, number> = { 1: 8, 2: 14, 3: 17, 4: 19, 5: 20 };\n          const spellRoll = this.rollD20();\n          let spellLevel = 1;\n          for (const [level, maxRoll] of Object.entries(spellLevels)) {\n            if (spellRoll <= maxRoll) {\n              spellLevel = parseInt(level);\n              break;\n            }\n          }\n          \n          fame = `Relic: ${relicType} of Saint ${saint} (contains Level ${spellLevel} spell, usable once per week)`;\n        } else {\n          fame = `Religious artifact: ${artifactType}`;\n        }\n      }\n    }\n    \n    // History\n    const histories = [\n      \"Abandoned then used again\", \"Changed confession\", \"Claimed its autonomy\",\n      \"Destroyed then rebuilt\", \"Founded 2d10 x10 years ago\", \"Has seen better days\",\n      \"Only one original building remains\", \"Sponsored by a rich patron\",\n      \"Started as a knight hermitage\", \"Used to be a boarding school\",\n      \"Was relocated\", \"Was under a spell\"\n    ];\n    const history = this.getTableResult(histories, this.rollD12());\n    \n    // Events (1/6 chance)\n    let events: { timing: string; event: string } | undefined;\n    if (this.rollD6() === 1) {\n      const timingRoll = this.rollD6();\n      const timing = timingRoll === 1 ? \"Ended earlier\" :\n                   timingRoll >= 2 && timingRoll <= 4 ? \"Is happening now\" :\n                   \"Will take place in the future\";\n      \n      const eventOptions = [\n        \"Broken device\", \"Cowls shrunken/dyed in red\", \"Demonic corruption\",\n        \"Disappearance of the abbot\", \"Drought/Flood\", \"Festival/Fair\", \"Fire\",\n        \"Looting\", \"Moles/Rats infestation\", \"Plague\", \"Scandal\", \"Visit of a notable person\"\n      ];\n      const event = this.getTableResult(eventOptions, this.rollD12());\n      \n      events = { timing, event };\n    }\n\n    return {\n      category: \"Class-related\",\n      type: \"Abbey\",\n      name,\n      nameVariations: [name],\n      disposition: this.generateDisposition(),\n      abbeySize: size,\n      abbeyPopulation: {\n        monksNuns,\n        abbotLevel\n      },\n      structureAndLand,\n      coreLocations,\n      additionalLocations,\n      activities,\n      fame,\n      history,\n      events\n    };\n  }\n\n  // Main generation methods\n  generateSteading(type?: string): GeneratedSteading {\n    let settlementType: string;\n    \n    if (type && ALL_SETTLEMENT_TYPES.includes(type)) {\n      settlementType = type;\n    } else {\n      const { type: randomType } = this.determineSettlementType();\n      settlementType = randomType;\n    }\n\n    switch (settlementType) {\n      case \"Hamlet\":\n        return this.generateHamlet();\n      case \"Village\":\n        return this.generateVillage();\n      case \"City\":\n        return this.generateCity();\n      case \"Castle\":\n        return this.generateCastle();\n      case \"Tower\":\n        return this.generateTower();\n      case \"Abbey\":\n        return this.generateAbbey();\n      default:\n        return this.generateHamlet();\n    }\n  }\n\n  generateSteadingStep(step: keyof GeneratedSteading): any {\n    // Generate a random steading and return the requested step\n    const steading = this.generateSteading();\n    return steading[step];\n  }\n}\n\n// Export the generator and functions\nexport const steadingGenerator = new SteadingGenerator();\n\nexport function generateSteading(type?: string): GeneratedSteading {\n  return steadingGenerator.generateSteading(type);\n}\n\nexport function generateSteadingStep(step: keyof GeneratedSteading): any {\n  return steadingGenerator.generateSteadingStep(step);\n}\n","import { Request, Response } from \"express\";\nimport { generateSteading, generateSteadingStep, GeneratedSteading, ALL_SETTLEMENT_TYPES } from \"../lib/steading-generator.js\";\nimport Anthropic from \"@anthropic-ai/sdk\";\nimport { getGlobalNarrativeRestrictions } from \"../lib/llm-instructions.js\";\nimport { NPCGenerator, type GeneratedNPC } from \"../lib/npc-generator.js\";\n\nconst anthropic = new Anthropic({\n  apiKey: process.env.ANTHROPIC_API_KEY ?? \"\",\n});\n\n// Function to generate NPCs for notable citizens with prepopulated occupations\nfunction generateNotableCitizenNPCs(notableNPCs: string[]): GeneratedNPC[] {\n  if (!notableNPCs || notableNPCs.length === 0) {\n    return [];\n  }\n\n  const npcGenerator = new NPCGenerator();\n  const generatedNPCs: GeneratedNPC[] = [];\n\n  for (const occupation of notableNPCs) {\n    // Generate a complete NPC\n    const npc = npcGenerator.generateNPC();\n\n    // Override the occupation with the one from the settlement\n    npc.occupation = occupation;\n\n    generatedNPCs.push(npc);\n  }\n\n  return generatedNPCs;\n}\n\n// Generate a complete steading with all characteristics\nexport function generateCompleteSteading(req: Request, res: Response) {\n  try {\n    const { type } = req.body;\n    const steading = generateSteading(type);\n\n    res.json({\n      success: true,\n      steading: steading,\n    });\n  } catch (error) {\n    console.error(\"Error generating steading:\", error);\n    res.status(500).json({\n      success: false,\n      error: \"Failed to generate steading\",\n    });\n  }\n}\n\n// Generate a specific step of steading creation\nexport function generateSteadingStepRoute(req: Request, res: Response) {\n  try {\n    const { step, currentSteading } = req.body;\n\n    console.log(\"Generating steading step:\", step);\n\n    if (!step) {\n      return res.status(400).json({\n        success: false,\n        error: \"Step parameter is required\",\n      });\n    }\n\n    // Generate a new steading of the same type if we have the current steading info\n    const steadingType = currentSteading?.type;\n    const newSteading = generateSteading(steadingType);\n    console.log(\"Generated steading type:\", newSteading.type);\n    console.log(\"Available fields:\", Object.keys(newSteading));\n\n    // Check if the field exists in the generated steading\n    if (!(step in newSteading)) {\n      console.log(`Field '${step}' not found. Available fields:`, Object.keys(newSteading));\n      return res.status(400).json({\n        success: false,\n        error: `Field '${step}' not found in ${newSteading.type} steading data. Available fields: ${Object.keys(newSteading).join(', ')}`,\n      });\n    }\n\n    const stepValue = newSteading[step];\n    console.log(`Step '${step}' value:`, stepValue);\n\n    res.json({\n      success: true,\n      step: step,\n      result: stepValue,\n    });\n  } catch (error) {\n    console.error(\"Error generating steading step:\", error);\n    res.status(500).json({\n      success: false,\n      error: \"Failed to generate steading step\",\n    });\n  }\n}\n\n// Generate narrative for a steading using LLM\nexport async function generateSteadingNarrative(req: Request, res: Response) {\n  try {\n    const { steading } = req.body;\n\n    if (!steading) {\n      return res.status(400).json({\n        success: false,\n        error: \"Steading data is required\",\n      });\n    }\n\n    if (!process.env.ANTHROPIC_API_KEY) {\n      return res.status(500).json({\n        success: false,\n        error: \"LLM service is not configured\",\n      });\n    }\n\n    // Create a comprehensive prompt for the steading narrative\n    console.log(\"Processing steading for narrative:\", {\n      type: steading.type,\n      name: steading.name,\n      keys: Object.keys(steading)\n    });\n\n    let steadingData: string;\n    try {\n      steadingData = JSON.stringify(steading, null, 2);\n    } catch (stringifyError) {\n      console.error(\"Error stringifying steading data:\", stringifyError);\n      // Fallback to a simpler representation\n      steadingData = `Settlement: ${steading.name} (${steading.type})`;\n    }\n\n    // Generate NPCs for notable citizens and ruler if they exist (BEFORE creating prompt)\n    let allGeneratedNPCs: GeneratedNPC[] = [];\n\n    // Generate NPC for the ruler if ruler exists\n    if (steading.ruler) {\n      const rulerNPC = generateNotableCitizenNPCs([steading.ruler])[0];\n      if (rulerNPC) {\n        rulerNPC.occupation = steading.ruler; // Ensure ruler occupation is set\n        allGeneratedNPCs.push(rulerNPC);\n        console.log(`Generated ruler NPC: ${rulerNPC.firstName} ${rulerNPC.lastName} (${rulerNPC.occupation})`);\n      }\n    }\n\n    // Generate NPCs for notable citizens\n    if (steading.notableNPCs && Array.isArray(steading.notableNPCs)) {\n      const citizenNPCs = generateNotableCitizenNPCs(steading.notableNPCs);\n      allGeneratedNPCs.push(...citizenNPCs);\n      console.log(`Generated ${citizenNPCs.length} NPCs for notable citizens`);\n    }\n\n    // Check if this steading has descriptors and include them in the prompt\n    let descriptorGuidance = \"\";\n    if (steading.descriptors) {\n      descriptorGuidance = `\\n\\nIMPORTANT: This settlement has been given the mythic descriptors \"${steading.descriptors.description}\" (${steading.descriptors.adverb} + ${steading.descriptors.adjective}). Let these qualities inspire the overall mood, atmosphere, and character of the settlement. NEVER put these descriptor words in quotation marks or use them literally. Instead, let them subtly influence your word choices, imagery, and tone. For buildings and special locations with their own descriptive pairs, use the same approach - let those descriptors guide the feel and atmosphere without forcing the actual words into the narrative. Think of descriptors as invisible mood guides, not vocabulary requirements.`;\n    }\n\n    // Prepare NPC data for the prompt if we have generated NPCs\n    let npcGuidance = \"\";\n    if (allGeneratedNPCs.length > 0) {\n      const npcDescriptions = allGeneratedNPCs.map(npc => {\n        const role = npc.occupation.toLowerCase().includes('ruler') || npc.occupation.toLowerCase().includes('lord') || npc.occupation.toLowerCase().includes('mayor') ? 'RULER' : 'NOTABLE CITIZEN';\n        return `${role}: ${npc.firstName} ${npc.lastName} - ${npc.race} ${npc.occupation}. Motivation: ${npc.motivation}. Appearance: ${npc.physicalAppearance}. Quirk: ${npc.quirk}. Secret: ${npc.secret}. Economic Status: ${npc.economicStatus}. Competence: ${npc.competence}.`;\n      }).join('\\n');\n\n      npcGuidance = `\\n\\nIMPORTANT - DETAILED NPCs TO WEAVE INTO NARRATIVE:\nThe following NPCs have been generated for this settlement. DO NOT list them separately or create an NPC section. Instead, naturally incorporate them into your narrative storytelling. Mention them organically as part of the settlement's story, describing them in context as you tell about different areas, events, or aspects of the settlement:\n\n${npcDescriptions}\n\nWeave these characters naturally into your narrative - describe them as you mention different locations, tell about the settlement's governance, discuss local events, or paint the social fabric of the community. Make them feel like living, breathing parts of the settlement's story rather than a separate character roster.`;\n    }\n\n    const prompt = `You are a master storyteller and world-builder for tabletop RPGs. I will provide you with detailed information about a settlement (steading) that has been randomly generated. Your task is to weave these details into a compelling, coherent narrative that brings this place to life.\n\nNARRATIVE APPROACH - THEME FIRST:\n1. ESTABLISH A GENERAL THEME: Begin by analyzing the ruler, outside appearance, disposition, and notable NPCs to establish a unifying theme or character for this settlement. This theme should guide the entire narrative.\n2. APPLY DESCRIPTORS WITHIN THE THEME: When describing points of interest and buildings, use the mythic descriptor word pairs to enhance locations, but always within the confines of your established theme.\n3. CREATIVE ADAPTATION: If mythic descriptor words naturally contradict or feel jarring with your established theme, find creative ways to make them work or reinterpret them. Prioritize narrative flow and thematic consistency over forcing exact descriptor words.\n4. THEMATIC COHESION: Everything should feel like it belongs in the same settlement with the same underlying character and mood.\n\nPlease create a rich narrative description that:\n1. Opens by establishing the settlement's overarching theme based on ruler, appearance, disposition, and key NPCs\n2. Tells the story of this settlement - its history, current state, and what makes it unique\n3. Explains how all the various details work together logically within your established theme\n4. Creates atmosphere and mood that remains consistent throughout\n5. Resolves any contradictory details in creative ways that enhance the thematic unity\n6. Focuses on what makes this place memorable and distinct\n7. Naturally incorporates any provided NPCs into the narrative flow without creating separate character sections\n\nHere is the settlement data:\n${steadingData}${descriptorGuidance}${npcGuidance}\n\nGuidelines:\n- Write in a descriptive, atmospheric tone suitable for a GM to read to players\n- Focus on what visitors would see, hear, smell, and feel when approaching and entering\n- Explain the relationships between different NPCs, factions, and locations\n- If there are secrets, events, or conflicts, weave them into the narrative naturally\n- Include specific details that make the settlement feel lived-in and real\n- Keep the narrative between 300-500 words\n- IMPORTANT: For buildings and special locations with descriptive pairs, DO NOT use quotation marks or force the exact descriptor words into the text. Instead, let these descriptors inspire the mood, atmosphere, and feel of each location without explicitly stating them, but always within your established theme\n- If mythic descriptors conflict with your theme, creatively reinterpret them or find ways to make them work - narrative cohesion is more important than literal descriptor usage\n- Maintain thematic consistency throughout - every element should feel like it belongs in the same coherent world\n\n${getGlobalNarrativeRestrictions()}\n\nWrite the narrative now:`;\n\n    const response = await anthropic.messages.create({\n      model: \"claude-3-5-sonnet-20241022\",\n      max_tokens: 800,\n      temperature: 0.8,\n      messages: [\n        {\n          role: \"user\",\n          content: prompt,\n        },\n      ],\n    });\n\n    const narrative = response.content[0].type === \"text\" ? response.content[0].text : \"\";\n\n    res.json({\n      success: true,\n      narrative: narrative,\n    });\n  } catch (error) {\n    console.error(\"Error generating steading narrative:\", error);\n    console.error(\"Error details:\", {\n      message: error instanceof Error ? error.message : String(error),\n      stack: error instanceof Error ? error.stack : undefined,\n      anthropicKey: process.env.ANTHROPIC_API_KEY ? \"Present\" : \"Missing\"\n    });\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Failed to generate steading narrative\",\n    });\n  }\n}\n\n// Get available settlement types\nexport function getSettlementTypes(req: Request, res: Response) {\n  try {\n    res.json({\n      success: true,\n      types: ALL_SETTLEMENT_TYPES,\n    });\n  } catch (error) {\n    console.error(\"Error getting settlement types:\", error);\n    res.status(500).json({\n      success: false,\n      error: \"Failed to get settlement types\",\n    });\n  }\n}\n","import { RequestHandler } from \"express\";\nimport Anthropic from \"@anthropic-ai/sdk\";\nimport { getGlobalNarrativeRestrictions } from \"../lib/llm-instructions.js\";\nimport { relationalDB } from \"../lib/relational-database\";\nimport {\n  generateNames as generateNamesTS,\n  isValidAlignment,\n} from \"../lib/name-generator\";\nimport {\n  generateNamesWithIntelligentLanguageChoice,\n  generateSingleIntelligentName\n} from \"../lib/intelligent-name-generator.js\";\nimport {\n  getRandomLieutenantTypes,\n  getVillainTypes,\n  generateAdventureSeeds,\n  SHADOWDARK_VILLAIN_TYPES,\n} from \"../lib/adventure-utilities\";\n\nconst anthropic = new Anthropic({\n  apiKey: process.env.ANTHROPIC_API_KEY ?? \"\",\n});\n\ninterface VillainGenerationRequest {\n  generateAll?: boolean;\n  regenerateStep?: string;\n  currentVillain?: any;\n  generateNarrative?: boolean;\n  villain?: any;\n  generateIntermediateSteps?: boolean;\n  regenerateIntermediateStep?: string;\n  currentGenerationData?: any;\n  generateVillainFromSteps?: boolean;\n  generationData?: any;\n}\n\ninterface Lieutenant {\n  name: string;\n  description: string;\n  minions?: string;\n}\n\ninterface GenerationResults {\n  tarotCards: Array<{\n    position: string;\n    card_text: string;\n  }>;\n  goal: string;\n  race: string;\n  villainNames: string[];\n  lieutenantTypes: string[];\n  lieutenantNames: string[];\n  factionName: string;\n  factionFateQuestions: Array<{\n    question: string;\n    roll: string;\n    interpretation: string;\n    impact: string;\n  }>;\n  lieutenantFateQuestions: Array<{\n    lieutenantName: string;\n    lieutenantType: string;\n    fateQuestions: Array<{\n      question: string;\n      roll: string;\n      interpretation: string;\n    }>;\n  }>;\n  clues: string[];\n  highTowerSurprise: {\n    surprise: string;\n    fateQuestion: string;\n    roll: string;\n    interpretation: string;\n    finalOutcome: string;\n  };\n  minions: Array<{\n    type: string;\n    description: string;\n    count: string;\n  }>;\n  llmReasoning: {\n    tarotInterpretation: string;\n    raceRationale: string;\n    goalAlignment: string;\n    overallCoherence: string;\n    villainNameChoice?: string;\n    lieutenantNameChoices?: string;\n  };\n}\n\ninterface GeneratedVillain {\n  name: string;\n  villainType: string;\n  motivation: string;\n  hook: string;\n  detailedDescription: string;\n  faction: {\n    name: string;\n    description: string;\n  };\n  lieutenants: Lieutenant[];\n  minions: string;\n  powerLevel: string;\n  weaknesses: string[];\n  resources: string[];\n}\n\n/**\n * Generates names using the TypeScript name generation implementation\n */\nconst generateNames = (\n  alignment: number,\n  numNames: number,\n): Promise<{ success: boolean; names?: string[]; error?: string }> => {\n  try {\n    if (!isValidAlignment(alignment)) {\n      return Promise.resolve({\n        success: false,\n        error: \"Alignment must be between 1 and 4\",\n      });\n    }\n\n    const result = generateNamesTS(alignment, numNames);\n    return Promise.resolve(result);\n  } catch (error) {\n    return Promise.resolve({\n      success: false,\n      error: error instanceof Error ? error.message : \"Name generation failed\",\n    });\n  }\n};\n\n/**\n * Gets random lieutenant types\n */\nconst getLieutenantTypes = (count: number = 2) => {\n  try {\n    const result = getRandomLieutenantTypes(count);\n    return Promise.resolve(result);\n  } catch (error) {\n    return Promise.resolve({\n      success: false,\n      error: error instanceof Error ? error.message : \"Lieutenant types generation failed\",\n    });\n  }\n};\n\n/**\n * Gets a random villain type\n */\nconst getRandomVillainType = (): string => {\n  const randomIndex = Math.floor(Math.random() * SHADOWDARK_VILLAIN_TYPES.length);\n  return SHADOWDARK_VILLAIN_TYPES[randomIndex];\n};\n\n/**\n * Generates intermediate steps with complete villain generation process\n */\nconst generateIntermediateSteps = async (): Promise<GenerationResults> => {\n  // Get tarot spread for inspiration\n  const adventureSeeds = generateAdventureSeeds();\n\n  // Generate villain names using intelligent language selection\n  const nameResult = await generateNamesWithIntelligentLanguageChoice({\n    characterType: \"villain\",\n    race: adventureSeeds.race,\n    goal: adventureSeeds.goal,\n    description: \"A main antagonist/villain for the campaign\"\n  }, 6);\n  const villainNames = nameResult.success ? nameResult.names : [\"Malachar\", \"Zygrath\", \"Nethys\", \"Vorthak\", \"Xantheus\", \"Balthazor\"];\n\n  // Generate lieutenant types\n  const lieutenantResult = await getLieutenantTypes(2);\n  const lieutenantTypes = lieutenantResult.success ?\n    lieutenantResult.lieutenant_types : [\"Assassin\", \"Cultist\"];\n\n  // Generate lieutenant names using intelligent language selection\n  const lieutenantNameResult = await generateNamesWithIntelligentLanguageChoice({\n    characterType: \"lieutenant\",\n    race: adventureSeeds.race,\n    goal: adventureSeeds.goal,\n    description: `Lieutenants serving under the villain: ${lieutenantTypes.join(\", \")}`\n  }, 6);\n  const lieutenantNames = lieutenantNameResult.success ?\n    lieutenantNameResult.names : [\"Vex\", \"Korran\", \"Silith\", \"Drak\", \"Nereth\", \"Zylara\"];\n\n  // Generate faction name using intelligent language selection\n  const factionNameResult = await generateSingleIntelligentName({\n    characterType: \"faction\",\n    race: adventureSeeds.race,\n    goal: adventureSeeds.goal,\n    description: \"An evil organization/cult/faction serving the villain\"\n  });\n  const factionName = factionNameResult.success ?\n    `The ${factionNameResult.name} Covenant` : \"The Obsidian Covenant\";\n\n  // Generate all elements with LLM\n  const expandedElements = await generateAllVillainElements({\n    tarotCards: adventureSeeds.cards,\n    goal: adventureSeeds.goal,\n    race: adventureSeeds.race,\n    villainNames: villainNames || [],\n    lieutenantTypes: lieutenantTypes || [],\n    lieutenantNames: lieutenantNames || [],\n    factionName\n  });\n\n  return {\n    tarotCards: adventureSeeds.cards,\n    goal: adventureSeeds.goal,\n    race: adventureSeeds.race,\n    villainNames: villainNames || [],\n    lieutenantTypes: lieutenantTypes || [],\n    lieutenantNames: lieutenantNames || [],\n    factionName,\n    ...expandedElements\n  };\n};\n\n/**\n * Regenerates a specific intermediate step\n */\nconst regenerateIntermediateStep = async (stepKey: string, currentData: GenerationResults): Promise<GenerationResults> => {\n  const updatedData = { ...currentData };\n\n  switch (stepKey) {\n    case 'tarotCards':\n      const adventureSeeds = generateAdventureSeeds();\n      updatedData.tarotCards = adventureSeeds.cards;\n      break;\n    case 'goal':\n      const newAdventureSeeds = generateAdventureSeeds();\n      updatedData.goal = newAdventureSeeds.goal;\n      break;\n    case 'race':\n      const raceSeeds = generateAdventureSeeds();\n      updatedData.race = raceSeeds.race;\n      break;\n    case 'villainNames':\n      const nameResult = await generateNamesWithIntelligentLanguageChoice({\n        characterType: \"villain\",\n        race: updatedData.race,\n        goal: updatedData.goal,\n        description: \"A main antagonist/villain for the campaign\"\n      }, 6);\n      updatedData.villainNames = nameResult.success ? nameResult.names : [\"Malachar\", \"Zygrath\", \"Nethys\", \"Vorthak\", \"Xantheus\", \"Balthazor\"];\n      break;\n    case 'lieutenantTypes':\n      const lieutenantResult = await getLieutenantTypes(2);\n      updatedData.lieutenantTypes = lieutenantResult.success ?\n        lieutenantResult.lieutenant_types : [\"Assassin\", \"Cultist\"];\n      break;\n    case 'lieutenantNames':\n      const lieutenantNameResult = await generateNamesWithIntelligentLanguageChoice({\n        characterType: \"lieutenant\",\n        race: updatedData.race,\n        goal: updatedData.goal,\n        description: `Lieutenants serving under the villain: ${updatedData.lieutenantTypes.join(\", \")}`\n      }, 6);\n      updatedData.lieutenantNames = lieutenantNameResult.success ?\n        lieutenantNameResult.names : [\"Vex\", \"Korran\", \"Silith\", \"Drak\", \"Nereth\", \"Zylara\"];\n      break;\n    case 'llmReasoning':\n      // Regenerate LLM reasoning based on current data\n      updatedData.llmReasoning = await generateLLMReasoning({\n        tarotCards: updatedData.tarotCards,\n        goal: updatedData.goal,\n        race: updatedData.race,\n        villainNames: updatedData.villainNames,\n        lieutenantTypes: updatedData.lieutenantTypes,\n        lieutenantNames: updatedData.lieutenantNames\n      });\n      break;\n  }\n\n  return updatedData;\n};\n\n/**\n * Generates all villain elements including fate questions, clues, surprises, etc.\n */\nconst generateAllVillainElements = async (baseData: {\n  tarotCards: any[];\n  goal: string;\n  race: string;\n  villainNames: string[];\n  lieutenantTypes: string[];\n  lieutenantNames: string[];\n  factionName: string;\n}): Promise<Omit<GenerationResults, 'tarotCards' | 'goal' | 'race' | 'villainNames' | 'lieutenantTypes' | 'lieutenantNames' | 'factionName'>> => {\n\n  const prompt = `You are an expert RPG designer creating a complete villain generation process. Based on the following elements, generate ALL the missing components with fate questions and detailed reasoning:\n\nBASE ELEMENTS:\nTarot Cards: ${JSON.stringify(baseData.tarotCards, null, 2)}\nGoal: ${baseData.goal}\nRace: ${baseData.race}\nVillain Names: ${baseData.villainNames.join(\", \")}\nLieutenant Types: ${baseData.lieutenantTypes.join(\", \")}\nLieutenant Names: ${baseData.lieutenantNames.join(\", \")}\nFaction Name: ${baseData.factionName}\n\nGenerate the following components in JSON format:\n\n{\n  \"factionFateQuestions\": [\n    {\n      \"question\": \"Yes/No question about faction's origin or nature\",\n      \"roll\": \"Yes/No with mythic reasoning\",\n      \"interpretation\": \"What this means for the faction\",\n      \"impact\": \"How this affects their operations\"\n    }\n    // Generate 3-4 faction fate questions\n  ],\n  \"lieutenantFateQuestions\": [\n    {\n      \"lieutenantName\": \"First lieutenant name from list\",\n      \"lieutenantType\": \"First lieutenant type from list\",\n      \"fateQuestions\": [\n        {\n          \"question\": \"Yes/No question about this lieutenant's background\",\n          \"roll\": \"Yes/No with mythic reasoning\",\n          \"interpretation\": \"What this means for their role\"\n        }\n        // 2-3 questions per lieutenant\n      ]\n    },\n    {\n      \"lieutenantName\": \"Second lieutenant name from list\",\n      \"lieutenantType\": \"Second lieutenant type from list\",\n      \"fateQuestions\": [\n        // 2-3 questions for second lieutenant\n      ]\n    }\n  ],\n  \"clues\": [\n    \"8 investigation clues that heroes can discover about the villain\",\n    \"Each clue should reveal different aspects\",\n    \"Mix of physical evidence, witness accounts, documents, etc.\",\n    \"Clues should build toward revealing the villain's plan\"\n  ],\n  \"highTowerSurprise\": {\n    \"surprise\": \"A major plot twist or revelation about the villain\",\n    \"fateQuestion\": \"Yes/No question about how this surprise unfolds\",\n    \"roll\": \"Yes/No with mythic reasoning\",\n    \"interpretation\": \"How the fate roll affects the surprise\",\n    \"finalOutcome\": \"The actual result after the fate decision\"\n  },\n  \"minions\": [\n    {\n      \"type\": \"Primary minion type\",\n      \"description\": \"What they do and how they serve the villain\",\n      \"count\": \"Approximate numbers (e.g., 'dozens', 'a handful', 'scores')\"\n    }\n    // 3-4 different minion types\n  ],\n  \"llmReasoning\": {\n    \"tarotInterpretation\": \"How the tarot cards influence the overall villain concept\",\n    \"raceRationale\": \"Why this race works perfectly with the goal and tarot themes\",\n    \"goalAlignment\": \"How all elements align to create a coherent villain\",\n    \"overallCoherence\": \"Summary of how all fate decisions create a compelling antagonist\",\n    \"villainNameChoice\": \"Which villain name from the generated list works best and why (include the chosen name)\",\n    \"lieutenantNameChoices\": \"Which lieutenant names from the generated list work best for each lieutenant type and why (include the chosen names)\"\n  }\n}\n\nMake all fate questions meaningful and let the Yes/No rolls genuinely influence the outcomes. Use mythic GME style reasoning for the rolls.`;\n\n  try {\n    const response = await anthropic.messages.create({\n      model: \"claude-3-5-sonnet-20241022\",\n      max_tokens: 3000,\n      messages: [\n        {\n          role: \"user\",\n          content: prompt,\n        },\n      ],\n    });\n\n    const content = response.content[0];\n    if (content.type !== \"text\") {\n      throw new Error(\"Unexpected response type from Claude\");\n    }\n\n    // Extract JSON from the response\n    const jsonMatch = content.text.match(/\\{[\\s\\S]*\\}/);\n    if (!jsonMatch) {\n      throw new Error(\"No JSON found in response\");\n    }\n\n    const elements = JSON.parse(jsonMatch[0]);\n    return elements;\n  } catch (error) {\n    console.error(\"Error generating villain elements:\", error);\n\n    // Fallback elements\n    return {\n      factionFateQuestions: [\n        {\n          question: \"Was this faction founded by the villain personally?\",\n          roll: \"Yes - The villain created this organization from nothing\",\n          interpretation: \"The faction is deeply loyal and reflects the villain's personal vision\",\n          impact: \"Members are fanatically devoted and difficult to turn against their leader\"\n        }\n      ],\n      lieutenantFateQuestions: [\n        {\n          lieutenantName: baseData.lieutenantNames[0] || \"Vex\",\n          lieutenantType: baseData.lieutenantTypes[0] || \"Assassin\",\n          fateQuestions: [\n            {\n              question: \"Does this lieutenant have a personal grudge motivating their service?\",\n              roll: \"Yes - They seek revenge against the same enemies\",\n              interpretation: \"Their loyalty is based on shared hatred rather than mere employment\"\n            }\n          ]\n        },\n        {\n          lieutenantName: baseData.lieutenantNames[1] || \"Korran\",\n          lieutenantType: baseData.lieutenantTypes[1] || \"Cultist\",\n          fateQuestions: [\n            {\n              question: \"Is this lieutenant secretly plotting against the villain?\",\n              roll: \"No - They are completely devoted to the cause\",\n              interpretation: \"This lieutenant can be trusted absolutely and will never betray the villain\"\n            }\n          ]\n        }\n      ],\n      clues: [\n        \"Strange symbols carved into stone at crime scenes\",\n        \"Witnesses report seeing the villain's distinctive appearance\",\n        \"Documents bearing the faction's seal found at key locations\",\n        \"Pattern of attacks targeting specific types of victims\",\n        \"Unusual magical residue left at sites of villain activity\",\n        \"Intercepted communications between faction members\",\n        \"Financial records showing suspicious transactions\",\n        \"Artifacts or weapons with unique craftsmanship signatures\"\n      ],\n      highTowerSurprise: {\n        surprise: \"The villain's true plan is far grander than initially apparent\",\n        fateQuestion: \"Does the villain's plan succeed partially before heroes can stop it?\",\n        roll: \"Yes - But only the first phase completes\",\n        interpretation: \"The heroes arrive just as the villain achieves a significant milestone\",\n        finalOutcome: \"The villain has gained considerable power but their ultimate goal remains unfinished\"\n      },\n      minions: [\n        {\n          type: \"Elite Guards\",\n          description: \"Highly trained warriors who serve as the villain's personal protection\",\n          count: \"A dozen\"\n        },\n        {\n          type: \"Cult Followers\",\n          description: \"Fanatical believers who spread the villain's influence\",\n          count: \"Scores\"\n        },\n        {\n          type: \"Infiltrators\",\n          description: \"Spies and saboteurs placed throughout society\",\n          count: \"A handful\"\n        }\n      ],\n      llmReasoning: {\n        tarotInterpretation: `The tarot spread of ${baseData.tarotCards.map(c => c.card_text).join(', ')} creates a complex narrative foundation for this villain.`,\n        raceRationale: `The choice of ${baseData.race} as the villain's race provides excellent opportunities for developing their motivations and methods.`,\n        goalAlignment: `The goal of \"${baseData.goal}\" aligns perfectly with the tarot themes and racial background.`,\n        overallCoherence: \"All elements combine to create a multi-layered antagonist with clear motivations and compelling story potential.\",\n        villainNameChoice: `From the names ${baseData.villainNames.join(', ')}, I choose ${baseData.villainNames[0]} as it resonates with the dark themes and provides gravitas suitable for the villain's goal.`,\n        lieutenantNameChoices: `For the lieutenants: ${baseData.lieutenantNames[0]} works perfectly as the ${baseData.lieutenantTypes[0]}, while ${baseData.lieutenantNames[1]} suits the ${baseData.lieutenantTypes[1]} role. These names complement the villain's scheme.`\n      }\n    };\n  }\n};\n\n/**\n * Generates LLM reasoning about the random rolls and algorithmic choices\n */\nconst generateLLMReasoning = async (data: Omit<GenerationResults, 'llmReasoning'>): Promise<GenerationResults['llmReasoning']> => {\n  const prompt = `You are an expert RPG designer analyzing the results of various generation systems. Provide reasoning and interpretation for the following randomly generated and algorithmic results:\n\nTAROT CARDS (Random table rolls):\n${JSON.stringify(data.tarotCards, null, 2)}\n\nGOAL (Random from 360-item table): ${data.goal}\n\nRACE (Weighted random selection): ${data.race}\n\nVILLAIN NAMES (Algorithmic evil-name generation): ${data.villainNames.join(\", \")}\n\nLIEUTENANT TYPES (Random table rolls): ${data.lieutenantTypes.join(\", \")}\n\nLIEUTENANT NAMES (Algorithmic evil-name generation): ${data.lieutenantNames.join(\", \")}\n\nProvide analysis in the following format:\n\nTAROT INTERPRETATION:\n[How do these 6 tarot cards work together thematically? What narrative themes do they suggest?]\n\nRACE SELECTION RATIONALE:\n[Why does this race choice work well with the goal and tarot themes? What does it add to the villain concept?]\n\nGOAL ALIGNMENT:\n[How does the randomly selected goal align with or contrast with the tarot spread? What interesting tensions or synergies exist?]\n\nOVERALL COHERENCE:\n[Summary of how all elements work together to create a compelling villain concept]\n\nVILLAIN NAME CHOICE:\n[From the generated villain names, pick the one that works best with the concept and explain why. Include the chosen name in your reasoning.]\n\nLIEUTENANT NAME CHOICES:\n[From the generated lieutenant names, assign the best names to each lieutenant type and explain the reasoning. Include the chosen names for each type.]\n\nKeep your reasoning concise but insightful. Focus on how the random elements can create unexpected but compelling villain concepts.`;\n\n  try {\n    const response = await anthropic.messages.create({\n      model: \"claude-3-5-sonnet-20241022\",\n      max_tokens: 1200,\n      messages: [\n        {\n          role: \"user\",\n          content: prompt,\n        },\n      ],\n    });\n\n    const content = response.content[0];\n    if (content.type !== \"text\") {\n      throw new Error(\"Unexpected response type from Claude\");\n    }\n\n    // Parse the response into structured format\n    const text = content.text;\n    const reasoning = {\n      tarotInterpretation: '',\n      raceRationale: '',\n      goalAlignment: '',\n      overallCoherence: '',\n      villainNameChoice: '',\n      lieutenantNameChoices: ''\n    };\n\n    const sections = text.split(/(?=TAROT INTERPRETATION:|RACE SELECTION RATIONALE:|GOAL ALIGNMENT:|OVERALL COHERENCE:|VILLAIN NAME CHOICE:|LIEUTENANT NAME CHOICES:)/);\n\n    for (const section of sections) {\n      if (section.includes('TAROT INTERPRETATION:')) {\n        reasoning.tarotInterpretation = section.replace('TAROT INTERPRETATION:', '').trim();\n      } else if (section.includes('RACE SELECTION RATIONALE:')) {\n        reasoning.raceRationale = section.replace('RACE SELECTION RATIONALE:', '').trim();\n      } else if (section.includes('GOAL ALIGNMENT:')) {\n        reasoning.goalAlignment = section.replace('GOAL ALIGNMENT:', '').trim();\n      } else if (section.includes('OVERALL COHERENCE:')) {\n        reasoning.overallCoherence = section.replace('OVERALL COHERENCE:', '').trim();\n      } else if (section.includes('VILLAIN NAME CHOICE:')) {\n        reasoning.villainNameChoice = section.replace('VILLAIN NAME CHOICE:', '').trim();\n      } else if (section.includes('LIEUTENANT NAME CHOICES:')) {\n        reasoning.lieutenantNameChoices = section.replace('LIEUTENANT NAME CHOICES:', '').trim();\n      }\n    }\n\n    return reasoning;\n  } catch (error) {\n    console.error(\"Error generating LLM reasoning:\", error);\n    return {\n      tarotInterpretation: \"The tarot cards suggest a complex narrative with multiple layers of meaning that will shape this villain's story.\",\n      raceRationale: `The selection of ${data.race} as the villain's race provides interesting opportunities for developing their background and motivations.`,\n      goalAlignment: `The goal of \"${data.goal}\" creates compelling possibilities when combined with the other generated elements.`,\n      overallCoherence: \"All elements combine to create a multi-layered antagonist with clear motivations and compelling story potential.\",\n      villainNameChoice: `From the names ${data.villainNames.join(', ')}, I choose ${data.villainNames[0]} as it resonates with the dark themes established by the tarot and race.`,\n      lieutenantNameChoices: `For the lieutenants: ${data.lieutenantNames[0]} works well as the ${data.lieutenantTypes?.[0] || 'first lieutenant'}, while ${data.lieutenantNames[1]} suits the ${data.lieutenantTypes?.[1] || 'second lieutenant'} role.`\n    };\n  }\n};\n\n/**\n * Generates a villain narrative from intermediate generation steps\n */\nconst generateVillainNarrativeFromSteps = async (generationData: GenerationResults): Promise<string> => {\n  const prompt = `You are an expert dungeon master creating a structured narrative about a villain for a fantasy RPG campaign. Based on the following generation results, create a well-organized story with specific headers and sections:\n\nTAROT INSPIRATION:\n${JSON.stringify(generationData.tarotCards, null, 2)}\n\nGENERATED ELEMENTS:\n- Goal: ${generationData.goal}\n- Race: ${generationData.race}\n- Potential Names: ${generationData.villainNames.join(\", \")}\n- Lieutenant Types: ${generationData.lieutenantTypes.join(\", \")}\n- Lieutenant Names: ${generationData.lieutenantNames.join(\", \")}\n- Faction Name: ${generationData.factionName}\n\nFATE DECISIONS:\nFaction: ${generationData.factionFateQuestions.map(f => `${f.question} (${f.roll}) - ${f.interpretation}`).join('; ')}\nLieutenants: ${generationData.lieutenantFateQuestions.map(lt => `${lt.lieutenantName}: ${lt.fateQuestions.map(fq => `${fq.question} (${fq.roll})`).join(', ')}`).join('; ')}\nHigh Tower Surprise: ${generationData.highTowerSurprise.fateQuestion} (${generationData.highTowerSurprise.roll}) - ${generationData.highTowerSurprise.finalOutcome}\n\nINVESTIGATION CLUES:\n${generationData.clues.map((clue, index) => `${index + 1}. ${clue}`).join('\\n')}\n\nMINIONS:\n${generationData.minions.map(m => `${m.type} (${m.count}): ${m.description}`).join('\\n')}\n\nCreate a structured narrative with these EXACT headers and sections:\n\n## Villain / BBEG\n[Choose the best name from the potential names list. Write 2-3 paragraphs about their background, rise to power, motivations influenced by the tarot themes and goal. Include their race and how the fate decisions shaped their story.]\n\n## The High Tower Surprise\n[Write 1-2 paragraphs about the plot twist: ${generationData.highTowerSurprise.surprise}. Incorporate how the fate question outcome (${generationData.highTowerSurprise.roll}) affects this surprise, leading to: ${generationData.highTowerSurprise.finalOutcome}]\n\n## Clues About the BBEG\n[Format the investigation clues as a bulleted list using markdown bullet points (•), incorporating each clue into the narrative context]\n\n## ${generationData.lieutenantFateQuestions[0]?.lieutenantName || generationData.lieutenantNames[0]} - ${generationData.lieutenantFateQuestions[0]?.lieutenantType || generationData.lieutenantTypes[0]}\n[Write 1-2 paragraphs about this lieutenant, incorporating their fate question outcomes and role]\n\n## ${generationData.lieutenantFateQuestions[1]?.lieutenantName || generationData.lieutenantNames[1]} - ${generationData.lieutenantFateQuestions[1]?.lieutenantType || generationData.lieutenantTypes[1]}\n[Write 1-2 paragraphs about this lieutenant, incorporating their fate question outcomes and role]\n\n## The ${generationData.factionName}\n[Write 2-3 paragraphs about the faction, incorporating the faction fate decisions and how the organization operates]\n\n## Minions\n[Write 1-2 paragraphs describing the various minion types and how they serve the villain's goals]\n\nUse the fate decision outcomes to shape each section. Write in an engaging, atmospheric style that a dungeon master could read aloud. Make sure each section flows naturally but maintains clear organization.\n\n${getGlobalNarrativeRestrictions()}`;\n\n  try {\n    const response = await anthropic.messages.create({\n      model: \"claude-3-5-sonnet-20241022\",\n      max_tokens: 1000,\n      messages: [\n        {\n          role: \"user\",\n          content: prompt,\n        },\n      ],\n    });\n\n    const content = response.content[0];\n    if (content.type !== \"text\") {\n      throw new Error(\"Unexpected response type from Claude\");\n    }\n\n    return content.text;\n  } catch (error) {\n    console.error(\"Error generating narrative from steps:\", error);\n    return `The legend of ${generationData.villainNames[0] || \"this villain\"} spreads across the land like a dark shadow. Born of ${generationData.race.toLowerCase()} heritage and driven by an insatiable desire to ${generationData.goal.toLowerCase()}, this antagonist has become a force to be reckoned with.\n\nTheir rise to power was foretold in the ancient cards - ${generationData.tarotCards.map(card => card.card_text).join(', ')} - and now their influence spreads through trusted lieutenants of varying races and backgrounds.\n\nThose who dare oppose them must be prepared for a cunning adversary who will stop at nothing to achieve their dark ambitions.`;\n  }\n};\n\n/**\n * Generates a complete villain using AI\n */\nconst generateCompleteVillain = async (): Promise<GeneratedVillain> => {\n  // Get tarot spread for inspiration\n  const adventureSeeds = generateAdventureSeeds();\n  const villainType = getRandomVillainType();\n  \n  // Generate villain names using intelligent language selection\n  const nameResult = await generateNamesWithIntelligentLanguageChoice({\n    characterType: \"villain\",\n    race: adventureSeeds.race,\n    goal: adventureSeeds.goal,\n    description: `${villainType} - A main antagonist/villain for the campaign`\n  }, 3);\n  const villainNames = nameResult.success ? nameResult.names : [\"Malachar\", \"Zygrath\", \"Nethys\"];\n  \n  // Generate lieutenant types\n  const lieutenantResult = await getLieutenantTypes(2);\n  const lieutenantTypes = lieutenantResult.success ? \n    lieutenantResult.lieutenant_types : [\"Assassin\", \"Cultist\"];\n\n  // Generate lieutenant names using intelligent language selection\n  const lieutenantNameResult = await generateNamesWithIntelligentLanguageChoice({\n    characterType: \"lieutenant\",\n    race: adventureSeeds.race,\n    goal: adventureSeeds.goal,\n    description: `Lieutenants serving under the ${villainType}: ${lieutenantTypes.join(\", \")}`\n  }, 4);\n  const lieutenantNames = lieutenantNameResult.success ?\n    lieutenantNameResult.names : [\"Vex\", \"Korran\", \"Silith\", \"Drak\"];\n\n  const prompt = `You are an expert dungeon master creating a compelling villain for a fantasy RPG campaign. Generate a detailed BBEG (Big Bad Evil Guy) based on the following constraints:\n\nTAROT INSPIRATION:\n${JSON.stringify(adventureSeeds, null, 2)}\n\nVILLAIN TYPE: ${villainType}\nPOTENTIAL NAMES: ${villainNames?.join(\", \")}\nLIEUTENANT TYPES: ${lieutenantTypes?.join(\", \")}\nLIEUTENANT NAMES: ${lieutenantNames?.join(\", \")}\n\nGenerate a JSON response with the following structure:\n{\n  \"name\": \"Choose the best name from the list or create a variation\",\n  \"villainType\": \"${villainType}\",\n  \"motivation\": \"What drives this villain's actions (1-2 sentences)\",\n  \"hook\": \"How this villain enters or affects the story (1-2 sentences)\",\n  \"detailedDescription\": \"Detailed physical description, personality, and background (2-3 sentences)\",\n  \"faction\": {\n    \"name\": \"Name of the villain's organization/cult/army\",\n    \"description\": \"Brief description of the faction's goals and methods\"\n  },\n  \"lieutenants\": [\n    {\n      \"name\": \"Use one of the lieutenant names\",\n      \"description\": \"Description of this lieutenant (their role, personality, abilities)\",\n      \"minions\": \"Optional: what type of minions they command\"\n    },\n    {\n      \"name\": \"Use another lieutenant name\", \n      \"description\": \"Description of this lieutenant\",\n      \"minions\": \"Optional: what type of minions they command\"\n    }\n  ],\n  \"minions\": \"General description of the villain's common followers/army\",\n  \"powerLevel\": \"Description of the villain's capabilities and threat level\",\n  \"weaknesses\": [\"List\", \"of\", \"potential\", \"weaknesses\", \"or\", \"ways\", \"to\", \"defeat\", \"them\"]\n}\n\nMake the villain compelling, memorable, and thematically appropriate for the tarot inspiration. Ensure the villain feels dangerous but defeatable with clever planning.`;\n\n  try {\n    const response = await anthropic.messages.create({\n      model: \"claude-3-5-sonnet-20241022\",\n      max_tokens: 2000,\n      messages: [\n        {\n          role: \"user\",\n          content: prompt,\n        },\n      ],\n    });\n\n    const content = response.content[0];\n    if (content.type !== \"text\") {\n      throw new Error(\"Unexpected response type from Claude\");\n    }\n\n    // Extract JSON from the response\n    const jsonMatch = content.text.match(/\\{[\\s\\S]*\\}/);\n    if (!jsonMatch) {\n      throw new Error(\"No JSON found in response\");\n    }\n\n    const villainData = JSON.parse(jsonMatch[0]);\n    return villainData as GeneratedVillain;\n  } catch (error) {\n    console.error(\"Error generating villain:\", error);\n    \n    // Fallback villain in case of API failure\n    return {\n      name: villainNames?.[0] || \"Malachar the Dark\",\n      villainType: villainType,\n      motivation: \"Seeks to corrupt the natural order and spread darkness across the land.\",\n      hook: \"Ancient seals binding this entity are beginning to weaken, causing strange omens.\",\n      detailedDescription: \"A towering figure shrouded in dark robes, with eyes that burn like cold stars. Their presence fills the air with dread and whispers of forgotten curses.\",\n      faction: {\n        name: \"The Obsidian Covenant\",\n        description: \"A cult of fanatics devoted to bringing about eternal darkness through ancient rituals.\"\n      },\n      lieutenants: [\n        {\n          name: lieutenantNames?.[0] || \"Vex\",\n          description: \"A cunning spymaster who gathers information through fear and manipulation.\",\n          minions: \"Thieves and informants throughout the city\"\n        },\n        {\n          name: lieutenantNames?.[1] || \"Korran\", \n          description: \"A brutal enforcer who leads the villain's military forces with an iron fist.\",\n          minions: \"Elite soldiers and mercenaries\"\n        }\n      ],\n      minions: \"Cultists, corrupted creatures, and hired mercenaries\",\n      powerLevel: \"Extremely dangerous with powerful magic and numerous followers\",\n      weaknesses: [\"Ancient binding rituals\", \"Holy artifacts\", \"Unity among heroes\", \"Their own arrogance\"]\n    };\n  }\n};\n\n/**\n * Regenerates a specific step of the villain\n */\nconst regenerateVillainStep = async (step: string, currentVillain: GeneratedVillain): Promise<GeneratedVillain> => {\n  const prompt = `You are updating a specific aspect of an existing villain. Here is the current villain:\n\n${JSON.stringify(currentVillain, null, 2)}\n\nRegenerate ONLY the \"${step}\" field with new content while keeping everything else the same. Return the complete villain JSON with only the \"${step}\" field changed. Make sure the new content fits with the existing villain's theme and background.`;\n\n  try {\n    const response = await anthropic.messages.create({\n      model: \"claude-3-5-sonnet-20241022\",\n      max_tokens: 1500,\n      messages: [\n        {\n          role: \"user\",\n          content: prompt,\n        },\n      ],\n    });\n\n    const content = response.content[0];\n    if (content.type !== \"text\") {\n      throw new Error(\"Unexpected response type from Claude\");\n    }\n\n    const jsonMatch = content.text.match(/\\{[\\s\\S]*\\}/);\n    if (!jsonMatch) {\n      throw new Error(\"No JSON found in response\");\n    }\n\n    return JSON.parse(jsonMatch[0]) as GeneratedVillain;\n  } catch (error) {\n    console.error(`Error regenerating step ${step}:`, error);\n    return currentVillain; // Return unchanged if regeneration fails\n  }\n};\n\n/**\n * Generates an AI narrative about the villain\n */\nconst generateVillainNarrative = async (villain: GeneratedVillain): Promise<string> => {\n  const prompt = `You are a skilled storyteller creating an engaging narrative about a villain for a fantasy RPG campaign. Here is the villain:\n\n${JSON.stringify(villain, null, 2)}\n\nWrite a compelling 3-4 paragraph narrative that brings this villain to life. Include:\n- Their rise to power or origin story\n- How they operate and influence the world\n- What makes them a credible threat to heroes\n- Hints about how they might be encountered or defeated\n\nWrite in an engaging, atmospheric style that a dungeon master could read aloud or adapt for their campaign. Make it feel like a legend or dark tale that characters might hear whispered in taverns.\n\n${getGlobalNarrativeRestrictions()}`;\n\n  try {\n    const response = await anthropic.messages.create({\n      model: \"claude-3-5-sonnet-20241022\",\n      max_tokens: 1000,\n      messages: [\n        {\n          role: \"user\",\n          content: prompt,\n        },\n      ],\n    });\n\n    const content = response.content[0];\n    if (content.type !== \"text\") {\n      throw new Error(\"Unexpected response type from Claude\");\n    }\n\n    return content.text;\n  } catch (error) {\n    console.error(\"Error generating narrative:\", error);\n    return \"The dark legend of this villain is shrouded in mystery, their true story lost to time and shadow...\";\n  }\n};\n\nexport const villainGenerator: RequestHandler = async (req, res) => {\n  try {\n    const body = req.body as VillainGenerationRequest;\n\n    if (body.generateIntermediateSteps) {\n      // Generate intermediate generation steps\n      const generationResults = await generateIntermediateSteps();\n\n      res.json({\n        success: true,\n        generationResults,\n      });\n    } else if (body.regenerateIntermediateStep && body.currentGenerationData) {\n      // Regenerate a specific intermediate step\n      const updatedResults = await regenerateIntermediateStep(body.regenerateIntermediateStep, body.currentGenerationData);\n\n      res.json({\n        success: true,\n        generationResults: updatedResults,\n      });\n    } else if (body.generateVillainFromSteps && body.generationData) {\n      // Generate final villain narrative from intermediate steps\n      const narrative = await generateVillainNarrativeFromSteps(body.generationData);\n\n      res.json({\n        success: true,\n        narrative,\n      });\n    } else if (body.generateAll) {\n      // Generate a complete new villain\n      const villain = await generateCompleteVillain();\n\n      res.json({\n        success: true,\n        villain,\n      });\n    } else if (body.regenerateStep && body.currentVillain) {\n      // Regenerate a specific step\n      const updatedVillain = await regenerateVillainStep(body.regenerateStep, body.currentVillain);\n\n      res.json({\n        success: true,\n        villain: updatedVillain,\n      });\n    } else if (body.generateNarrative && body.villain) {\n      // Generate AI narrative\n      const narrative = await generateVillainNarrative(body.villain);\n\n      res.json({\n        success: true,\n        narrative,\n      });\n    } else {\n      res.status(400).json({\n        success: false,\n        error: \"Invalid request parameters\",\n      });\n    }\n  } catch (error) {\n    console.error(\"Villain generator error:\", error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error occurred\",\n    });\n  }\n};\n","import { Request, Response } from \"express\";\nimport { generateNames, isValidAlignment, getAlignmentOptions, type NameAlignment } from \"../lib/name-generator.js\";\n\n// Generate names based on alignment and count\nexport function generateNamesRoute(req: Request, res: Response) {\n  try {\n    const { alignment, numNames = 8 } = req.body;\n\n    // Handle Random selection (alignment 0)\n    let actualAlignment: NameAlignment;\n    if (alignment === 0) {\n      // Random selection - pick random alignment from 1-17\n      actualAlignment = (Math.floor(Math.random() * 17) + 1) as NameAlignment;\n    } else if (!isValidAlignment(alignment)) {\n      return res.status(400).json({\n        success: false,\n        error: \"Invalid alignment. Must be 0 (Random) or 1-17 for specific styles\",\n      });\n    } else {\n      actualAlignment = alignment as NameAlignment;\n    }\n\n    if (typeof numNames !== 'number' || numNames < 1 || numNames > 50) {\n      return res.status(400).json({\n        success: false,\n        error: \"Number of names must be between 1 and 50\",\n      });\n    }\n\n    const result = generateNames(actualAlignment, numNames);\n\n    // Include the actual alignment that was used (important for Random selection)\n    res.json({\n      ...result,\n      actualAlignment: actualAlignment\n    });\n  } catch (error) {\n    console.error(\"Error generating names:\", error);\n    res.status(500).json({\n      success: false,\n      error: \"Failed to generate names\",\n    });\n  }\n}\n\n// Get available alignment options\nexport function getAlignmentOptionsRoute(req: Request, res: Response) {\n  try {\n    const options = getAlignmentOptions();\n    res.json({\n      success: true,\n      alignments: options,\n    });\n  } catch (error) {\n    console.error(\"Error getting alignment options:\", error);\n    res.status(500).json({\n      success: false,\n      error: \"Failed to get alignment options\",\n    });\n  }\n}\n","/**\n * Curse Generator (TypeScript)\n * Generates random curses from categorized tables of curse effects\n */\n\n// Mild curses - social inconveniences and minor hindrances\nconst mildCurses = [\n  \"Turns purple any time they tell a lie.\",\n  \"Always looks sopping wet.\",\n  \"Will be pooped on by a bird at least once a day (regardless of location).\",\n  \"Is now horribly allergic to pollen and dust.\",\n  \"Is compelled to give any stranger they meet a high five. If the stranger leaves them hanging, the creature will high five their own hand.\",\n  \"Cannot stop yawning in an egregious (and fairly disrespectful) way.\",\n  \"Can communicate with cats but only cats. All other language is lost to them.\",\n  \"Grows a cumbersome beard twice as long as they are tall.\",\n  \"Is hoarse and all but inaudible.\",\n  \"Is under the impression every single person they encounter knows their darkest secrets.\",\n  \"Must speak in rhymed couplets or take 1d4 +1 psychic damage each time they talk.\",\n  \"Is always thirsty.\",\n  \"Is allergic to metal and breaks out in leaky sores on contact.\",\n  \"Must use jazz hands when they speak or take 1d6 + 3 psychic damage.\",\n  \"Refuses to be seen without their hat, and won't let anyone forget it.\",\n  \"Is suddenly followed by every mouse and rat in the village.\",\n  \"Has breath so bad it knocks out anyone who comes within a yard.\",\n  \"Is disgusted by gold.\",\n  \"Loses the ability to lie or even omit elements of the truth.\",\n  \"Emits an offensively repulsive odor.\",\n  \"Becomes allergic to anything with fur.\",\n  \"Their personality shifts slightly.\",\n  \"Everyone keeps forgetting who they are.\",\n  \"Their hair won't stop growing at an alarmingly fast rate.\",\n  \"Smells nothing but sewage at all times.\",\n  \"Makes a considerable amount of noise when trying to sneak.\",\n  \"Drops their weapon after every attack.\",\n  \"Can't stop reciting subpar poetry.\",\n  \"Can't maintain their balance.\",\n  \"Trips and falls constantly.\",\n  \"Can't stop staring at people.\",\n  \"Their hands stick to anything they touch.\",\n  \"All but their head is invisible.\",\n  \"Everyone keeps mistaking them for a wanted criminal.\",\n  \"Has an uncontrollable urge to steal cooking equipment.\",\n  \"Can't speak to the opposite sex.\",\n  \"Can't sit down.\",\n  \"Everyone is convinced they are a doppelganger.\",\n  \"Has an uncontrollable urge to pickpocket town guards.\",\n  \"Becomes overly sensitive to light.\",\n  \"Feels very heavy.\",\n  \"Can read minds, but only when inconvenient.\",\n  \"The weather is constantly bad wherever they go.\",\n  \"Falls in love with anyone they make direct eye contact with.\",\n  \"Can't stop laughing.\",\n  \"Is afflicted with eternal, unrelenting hiccups.\",\n  \"Is unable to resist speaking every thought they have out loud.\",\n  \"Is completely oblivious to traps and can't stop setting them off.\",\n  \"Keeps losing gold in inexplicable ways.\",\n  \"Is unable to distinguish between good and bad advice.\",\n  \"Clucks like a chicken when they try to speak.\",\n  \"Farts uncontrollably all the time.\",\n  \"Each day they wake up with their face covered in full clown makeup, requiring a DC 12 Wisdom saving throw when opening their mouth or laughing uncontrollably.\",\n  \"Begins to float away every time they lay down.\",\n  \"Attracts minuscule and mischievous fey creatures that constantly steal their stuff.\",\n  \"Everything tastes like ash.\",\n  \"Can only speak in haiku.\",\n  \"Stops believing magic exists.\",\n  \"All liquids, including magical ones, become water when they touch the container.\",\n  \"Crows follow them everywhere, cawing noisily every time they try to speak or rest.\",\n  \"Desires to shake hands with every single creature they meet, no matter the danger.\",\n  \"Believes butterflies will lead them to great treasure and will follow one at any cost.\",\n  \"Forgets how to read.\",\n  \"Believes they can fly but cannot, with failures not enlightening or deterring them.\",\n  \"An angry giant goat named Kevin follows them everywhere, staring unless they turn their back.\",\n  \"Becomes a kleptomaniac, attempting to steal anything not nailed down.\",\n  \"Has an uncontrollable need to sing all the time, wherever they are.\",\n  \"Becomes covered with mud and stinking filth that reappears every time it's cleaned off, giving disadvantage on all Charisma checks.\",\n  \"Will tell their deepest held secrets to anyone they meet, leading with the hidden knowledge.\",\n  \"Can only speak in questions.\",\n  \"Grows a wildly uncontrollable mustache that moves of its own accord, imposing disadvantage on concentration checks.\",\n  \"Must refer to themselves in the third person or take 9 (2d8) necrotic damage each time they don't.\",\n  \"Grows a lawful good mole on their left upper lip that speaks incessantly and protests unlawful actions.\",\n  \"A spectral bard follows them everywhere singing songs of their most embarrassing mistakes.\",\n  \"Sheds glitter everywhere and has disadvantage on all Dexterity (Stealth) checks.\",\n  \"Any piece of furniture or equipment they try to sit or lie on breaks and they fall.\",\n  \"Is compelled to lick everything.\",\n  \"Proposes marriage to everyone and everything.\",\n  \"Is compelled to hand their money and valuables out to random strangers.\",\n  \"Must enter buildings backward while singing sea shanties at the top of their lungs.\"\n];\n\n// Severe curses - significant penalties and transformations\nconst severeCurses = [\n  \"Loses hit points equal to any damage they deal to another creature.\",\n  \"Ages 1d10 years each time they take a long rest.\",\n  \"Loses 3d6 pounds each time they eat.\",\n  \"Can only use a total of 20 words per day.\",\n  \"Must walk/run backward or they'll drop to 0 HP.\",\n  \"Completely loses their sense of direction and has disadvantage on all Wisdom (Survival) checks related to travel.\",\n  \"Is vulnerable to cold damage and cannot stop their teeth from chattering at the slightest drop in temperature.\",\n  \"Has an 80 percent chance of being struck by lightning in a storm.\",\n  \"Forgets how to do basic math. Numbers are meaningless now.\",\n  \"Gets incredibly seasick to the point of collapse.\",\n  \"Must ask for permission to enter any dwelling and is barred from entry by un-dispellable magic if they do not receive it from the dwelling's owner.\",\n  \"Is anchored to the Material Plane. They cannot travel to other planes, nor can their soul move on.\",\n  \"Is terribly frightened of the outdoors. They have disadvantage on Wisdom (Nature) skill checks and any rolls made when outside any urban environment.\",\n  \"Becomes incredibly accident prone.\",\n  \"Forgets what they were doing and why once per short rest at GM discretion.\",\n  \"Passes a curse to every humanoid they touch.\",\n  \"Can't stop crying.\",\n  \"Believes they are friendless, penniless and aimless.\",\n  \"Dies painfully but is immediately resurrected, with half as much max HP, at the start of each new day.\",\n  \"Believes they are immortal and acts accordingly.\",\n  \"Is vulnerable to all damage but feels no pain.\",\n  \"Lacks bones and moves as an ooze would.\",\n  \"Becomes catatonic at the sound of thunder.\",\n  \"Gets incredibly winded during physical activity and must succeed on a DC 15 Constitution saving throw to avoid passing out.\",\n  \"Takes the shape of the world's most notorious criminal.\",\n  \"Can only eat grass.\",\n  \"Can't move their arms or legs.\",\n  \"Hears cats screaming whenever music is played.\",\n  \"Gains 3d6 pounds per day, rerolling at the end of every long rest.\",\n  \"Is compelled to challenge every creature they encounter to a duel.\",\n  \"Weeps blood at the slightest insult.\",\n  \"Can only see the Ethereal Plane.\",\n  \"Has their Strength score reduced by half.\",\n  \"Has their Dexterity score reduced by half.\",\n  \"Has their Constitution score reduced by half.\",\n  \"Has their Intelligence score reduced by half.\",\n  \"Has their Wisdom score reduced by half.\",\n  \"Has their Charisma score reduced by half.\",\n  \"Has their movement speed reduced by half.\",\n  \"Immediately loses half their max HP.\",\n  \"Reverts to a childhood state.\",\n  \"Loses the ability to learn or make new memories.\",\n  \"Must kill a creature with their bare hands every day or die.\",\n  \"Is being hunted by a shadow.\",\n  \"Is petrified and unable to move.\",\n  \"Their dreams are haunted by a ghost.\",\n  \"Becomes unconscious at the smell of hay.\",\n  \"Falls asleep whenever they hear the word 'the'.\",\n  \"Has forgotten how to speak.\",\n  \"Has forgotten how to walk.\",\n  \"Has an evil alternate personality who takes control often.\",\n  \"Everything they touch turns to ash.\",\n  \"Is unable to trust even their closest friends.\",\n  \"Is gripped with terror at the thought of their own existence.\",\n  \"Is being stalked by a vampire.\",\n  \"Can't stop gaining weight at an alarming rate.\",\n  \"Can't stop dancing.\",\n  \"Their dreams are haunted by a demon.\",\n  \"All of their attacks are nonlethal.\",\n  \"Feels as if they are on fire.\",\n  \"Has horrible luck.\",\n  \"Their body parts swell up one by one.\",\n  \"Sees hellhounds everywhere they go.\",\n  \"Everything they touch is set on fire.\",\n  \"Can't stop growing at an alarming rate.\",\n  \"Has an uncontrollable urge to stab anyone who talks to them.\",\n  \"Their personality shifts drastically to the opposite of what it was.\",\n  \"Now breathes water instead of air.\",\n  \"Has become blind.\",\n  \"Feels the urge to attack everyone who looks at them.\",\n  \"Feels filthy no matter how much they bathe.\",\n  \"Everything they touch turns to stone.\",\n  \"If they stop moving they will die.\",\n  \"Is slowly transforming into a swamp creature.\",\n  \"Has forgotten how to read or write.\",\n  \"Loses the ability to turn left.\",\n  \"Has forgotten how to breathe.\",\n  \"Has become deaf.\",\n  \"Is unable to perform spells of any kind.\",\n  \"Has forgotten how to fight.\",\n  \"Has forgotten how to eat.\",\n  \"Becomes convinced they are turning into a zombie.\",\n  \"Is being haunted by a wraith.\",\n  \"Their spells may have the opposite of the intended effect.\",\n  \"Has no memory of their companions.\",\n  \"Any armor they put on is unbearably heavy.\",\n  \"Their skin becomes paper-thin and fragile, gaining vulnerability to necrotic damage and taking 5 (2d4) fire damage for every hour spent in the sun.\",\n  \"Gains vulnerability to fire damage.\",\n  \"All of their fingers fall off, unable to hold weapons/equipment or cast spells with somatic components until spending 5 (2d4) weeks training.\",\n  \"Their skin turns blue and burns with sickly glowing symbols, taking 5 (1d6 + 2) psychic damage each time they make a Charisma-based check.\",\n  \"Their skin, organs and muscles turn to dust, becoming a skeleton but retaining all statistics.\",\n  \"Gains vulnerability to acid damage and can only respond to questions with 'It's complicated.'\",\n  \"Their legs and arms switch places on their body.\",\n  \"Loses 1 hit point each time they hear their name.\",\n  \"Gains vulnerability to thunder damage.\",\n  \"Can only eat items that aren't food, like rocks or metal, gaining 1 level of exhaustion each day.\",\n  \"Is frightened of the moon and depictions of it.\",\n  \"Punches themselves in the face hard every time they hear the word 'tavern.'\",\n  \"Grows a sentient, prehensile tail that is chaotic evil and always trying to strangle them.\",\n  \"Has to be reduced to 0 hit points at least once per day or they'll die permanently.\",\n  \"Gains vulnerability to lightning damage.\",\n  \"Metal of all kinds are drawn toward them, sticking to their skin and requiring a DC 20 Strength check to remove.\",\n  \"All fires within 50 feet go out when they are around (doesn't affect instantaneous damage).\",\n  \"Believes they are dying, moving at quarter speed and preferring to lie down.\",\n  \"All coins, gems and precious metals turn to stone as soon as they touch them.\",\n  \"Becomes the realm's most wanted criminal.\",\n  \"Cannot enter a city, town or village with more than 60 people, falling unconscious if they do.\",\n  \"Becomes a frog.\",\n  \"Bleeds easily and profusely, requiring a DC 14 Constitution saving throw when taking damage or permanently losing 2 (1d4) maximum hit points.\",\n  \"Gains vulnerability to radiant damage.\",\n  \"Their hair becomes snakes, requiring a DC 14 Dexterity saving throw each hour or taking 2 (1d4) piercing and 7 (2d6) poison damage.\",\n  \"Small polyps grow on their skin, developing tentacles that will open a portal to the abyss in 5 (2d4) days.\",\n  \"Becomes a magnet for ranged attacks, with creatures attacking from more than 10 feet away getting +2 to attack rolls.\",\n  \"Takes 6 (1d8 + 2) psychic damage every time they touch a door knob, clasp or lock.\",\n  \"At night, their right hand detaches and becomes chaotic neutral, robbing the rich to give to the poor.\",\n  \"Their arms grow to ridiculous length, gaining 10 feet reach but disadvantage on attack rolls and Dexterity checks.\",\n  \"Is constantly hungry and starts to think their companions look tasty.\",\n  \"Feels they are invulnerable and acts accordingly.\",\n  \"Their soul will inhabit the body of the next creature they kill.\",\n  \"Gains vulnerability to poison damage.\",\n  \"Is incredibly narcoleptic, requiring a DC 13 Wisdom saving throw at the beginning of each turn or falling asleep.\",\n  \"Becomes a black pudding that can communicate telepathically within 30 feet but cannot use magic items.\",\n  \"Is affected by 3 (1d6) curses from this list.\"\n];\n\n// Funny curses - humorous and absurd effects\nconst funnyCurses = [\n  \"Glows in the dark but only when embarrassed.\",\n  \"Transforms into an overripe watermelon with blindsense. The creature maintains its mental statistics and can communicate telepathically.\",\n  \"Has an overwhelming desire to eat (but an aversion to the taste of) sand.\",\n  \"Can only communicate in song titles.\",\n  \"Has one of those head colds that just won't quit.\",\n  \"Feels their teeth triple in size, and their mouth curve into a giant (and agonizing) grin.\",\n  \"Birth to a fully formed quasit once per month.\",\n  \"Has an increasingly unignorable hunger for chalk.\",\n  \"Dog. Another stray will join this growing pack every time the cursed creature takes a long rest.\",\n  \"Suddenly has rubber-like arms that become twisted and tangled whenever they try to use them.\",\n  \"Is haunted by a constant, uncontrollable sneeze.\",\n  \"Their body releases a pheromone that attracts monsters (but only small, harmless ones like rabbits).\",\n  \"Shrinks down to half their size.\",\n  \"Becomes tired in the day and overly energetic at night.\",\n  \"Their body releases a pheromone that attracts deer.\",\n  \"Is unable to sleep.\",\n  \"Can't lie down.\",\n  \"Transforms into a random animal during a full moon.\",\n  \"Their body releases a pheromone that attracts bears (but only teddy bears).\",\n  \"Everything they touch freezes over (but only for 3 seconds).\",\n  \"Their spells have random targets (but always friendly ones).\",\n  \"Can't stop singing (but only knows one song).\",\n  \"Unattractive people can't help but fall madly in love with them.\",\n  \"Their body releases a pheromone that attracts rats (who form a helpful cleaning crew).\",\n  \"Is unable to stop randomly shouting about rabbits.\",\n  \"Their dreams are haunted by embarrassing memories (which they act out while sleepwalking).\",\n  \"Has forgotten how to drink (but only water - other liquids are fine).\",\n  \"Hiccups uncontrollably and foul-smelling bubbles pour out of their mouth each time.\",\n  \"Their nostrils fuse shut and they can no longer smell (which is sometimes a blessing).\",\n  \"Their hair turns purple and grows at an exponential rate, requiring cutting every 2 hours or losing half movement speed to tangling.\",\n  \"When they speak, it sounds as if they're underwater, giving disadvantage on Charisma-based checks.\",\n  \"Becomes fascinated with horses, speaking exclusively to any horse in line of sight to the detriment of all else.\",\n  \"Hears a high-pitched ringing at all times and fails any hearing-based Wisdom (Perception) checks.\",\n  \"The world around them seems to spin constantly, requiring a DC 14 Constitution saving throw each hour or becoming dizzy for 10 minutes.\",\n  \"Cries uncontrollably if they step on grass.\",\n  \"Hops on one leg everywhere they go, moving with half speed and having disadvantage on Dexterity-based skill checks.\",\n  \"Their eyes disappear from the front of their head and reappear in the back, giving disadvantage on Wisdom (Perception) checks based on sight.\",\n  \"The joints in their arms reverse, giving disadvantage to all attack rolls and Dexterity (Sleight of Hand) checks.\",\n  \"Spiky quills erupt from their back, requiring them to sleep on their stomach.\",\n  \"Hiccups uncontrollably and foul-smelling bubbles pour out of their mouth each time.\",\n  \"Their eyes glow green and they see everything in shades of blue, rolling all Dexterity (Stealth) checks with disadvantage.\",\n  \"Their fingernails grow into sharp claws and they constantly feel like clawing out their own eyes (but never actually do it).\",\n  \"Believes they have become a dragon and uses their 'breath weapon' (just blowing air) at every opportunity.\",\n  \"Sparks fly from the ground where they walk, making pretty but harmless light shows.\",\n  \"Must count grains of salt or sand if they are in sight, forgoing any other actions.\",\n  \"Plants die everywhere they walk, becoming brittle and turning to dust (but they regrow twice as beautiful the next day).\",\n  \"Their skin turns green and sprouts mushrooms that smell of dirty feet and garlic.\",\n  \"Grows a wildly uncontrollable mustache that moves of its own accord and has its own personality.\",\n  \"Believes 5 feet is actually a mile and can only move 5 feet during a move action.\",\n  \"Becomes meek, with any damage they deal reduced by half (but they become incredibly polite).\",\n  \"Sweats profusely when indoors (but only maple syrup).\",\n  \"Can't stop singing (only lullabies, which puts everyone to sleep).\",\n  \"Everything they touch turns to cheese for exactly 30 seconds.\",\n  \"Their shadow detaches and follows them around, occasionally waving at people.\",\n  \"They can only walk sideways like a crab.\",\n  \"Every time they sneeze, a small flower grows from their nose.\",\n  \"Their voice becomes incredibly high-pitched, like they've inhaled helium.\",\n  \"They compulsively rhyme everything they say, even when it makes no sense.\",\n  \"Their reflection shows them as a different person each day.\",\n  \"They can only taste things that are the color blue.\",\n  \"Small birds constantly nest in their hair.\",\n  \"They leave glittery footprints wherever they walk.\",\n  \"Every door they open plays a different silly sound effect.\",\n  \"They can only speak in questions, even when making statements.\",\n  \"Their hiccups sound like different animal noises each time.\",\n  \"They age backwards one day for every week that passes.\",\n  \"Everything they write appears in crayon, regardless of what they're writing with.\"\n];\n\n// Legacy array for backward compatibility and random selection\nconst curseEffects = [...mildCurses, ...severeCurses, ...funnyCurses];\n\nexport type CurseCategory = 'mild' | 'severe' | 'funny' | 'random';\n\nexport interface CurseGenerationResult {\n  success: boolean;\n  curse?: string;\n  category?: CurseCategory;\n  error?: string;\n}\n\n/**\n * Generate a single random curse from specified category\n */\nexport function generateCurse(category: CurseCategory = 'random'): CurseGenerationResult {\n  try {\n    let selectedCurse: string;\n    let actualCategory: CurseCategory;\n\n    if (category === 'random') {\n      // Pick random category first\n      const categories = ['mild', 'severe', 'funny'] as const;\n      actualCategory = categories[Math.floor(Math.random() * categories.length)];\n    } else {\n      actualCategory = category;\n    }\n\n    // Get curse from selected category\n    let curseArray: string[];\n    switch (actualCategory) {\n      case 'mild':\n        curseArray = mildCurses;\n        break;\n      case 'severe':\n        curseArray = severeCurses;\n        break;\n      case 'funny':\n        curseArray = funnyCurses;\n        break;\n      default:\n        return {\n          success: false,\n          error: \"Invalid curse category\",\n        };\n    }\n\n    const randomIndex = Math.floor(Math.random() * curseArray.length);\n    selectedCurse = curseArray[randomIndex];\n\n    return {\n      success: true,\n      curse: selectedCurse,\n      category: actualCategory,\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"Unexpected error occurred\",\n    };\n  }\n}\n\n/**\n * Get the total number of available curse effects for a category\n */\nexport function getCurseCount(category: CurseCategory = 'random'): number {\n  switch (category) {\n    case 'mild':\n      return mildCurses.length;\n    case 'severe':\n      return severeCurses.length;\n    case 'funny':\n      return funnyCurses.length;\n    case 'random':\n      return curseEffects.length;\n    default:\n      return 0;\n  }\n}\n\n/**\n * Get all available curse categories\n */\nexport function getCurseCategories(): Array<{value: CurseCategory, label: string, count: number}> {\n  return [\n    { value: 'random', label: 'Random', count: curseEffects.length },\n    { value: 'mild', label: 'Mild', count: mildCurses.length },\n    { value: 'severe', label: 'Severe', count: severeCurses.length },\n    { value: 'funny', label: 'Funny', count: funnyCurses.length },\n  ];\n}\n\n// Legacy functions for backward compatibility\nexport function generateCurses(numCurses: number = 1): { success: boolean; curses?: string[]; count?: number; error?: string; } {\n  if (numCurses !== 1) {\n    return {\n      success: false,\n      error: \"Only single curse generation is supported\",\n    };\n  }\n  \n  const result = generateCurse('random');\n  if (result.success && result.curse) {\n    return {\n      success: true,\n      curses: [result.curse],\n      count: 1,\n    };\n  }\n  \n  return {\n    success: false,\n    error: result.error,\n  };\n}\n\nexport function getTotalCurseCount(): number {\n  return curseEffects.length;\n}\n\nexport function generateSingleCurse(): string {\n  const result = generateCurse('random');\n  return result.curse || \"A mysterious curse affects the target.\";\n}\n","import { Request, Response } from \"express\";\nimport { generateCurse, getCurseCategories, getCurseCount, type CurseCategory } from \"../lib/curse-generator.js\";\n\n// Generate a single curse based on category\nexport function generateCursesRoute(req: Request, res: Response) {\n  try {\n    const { category = 'random' } = req.body;\n\n    // Validate category\n    if (!['random', 'mild', 'severe', 'funny'].includes(category)) {\n      return res.status(400).json({\n        success: false,\n        error: \"Category must be one of: random, mild, severe, funny\",\n      });\n    }\n\n    const result = generateCurse(category as CurseCategory);\n\n    res.json(result);\n  } catch (error) {\n    console.error(\"Error generating curse:\", error);\n    res.status(500).json({\n      success: false,\n      error: \"Failed to generate curse\",\n    });\n  }\n}\n\n// Get curse categories with counts\nexport function getCurseCategoriesRoute(req: Request, res: Response) {\n  try {\n    const categories = getCurseCategories();\n    res.json({\n      success: true,\n      categories: categories,\n    });\n  } catch (error) {\n    console.error(\"Error getting curse categories:\", error);\n    res.status(500).json({\n      success: false,\n      error: \"Failed to get curse categories\",\n    });\n  }\n}\n\n// Get curse count for specific category\nexport function getCurseCountRoute(req: Request, res: Response) {\n  try {\n    const { category = 'random' } = req.query;\n    const count = getCurseCount(category as CurseCategory);\n    res.json({\n      success: true,\n      category: category,\n      count: count,\n    });\n  } catch (error) {\n    console.error(\"Error getting curse count:\", error);\n    res.status(500).json({\n      success: false,\n      error: \"Failed to get curse count\",\n    });\n  }\n}\n","/**\n * Danger Generator (TypeScript)\n * Implements the 1d12 three-roll system for generating dangers\n * Roll 1d12 three times: category, subcategory, and specific prompt\n */\n\n// Main categories (1d12)\nconst MAIN_CATEGORIES = {\n  1: \"UNNATURAL ENTITY\",\n  2: \"HAZARD\", 3: \"HAZARD\", 4: \"HAZARD\", 5: \"HAZARD\", 6: \"HAZARD\",\n  7: \"CREATURE\", 8: \"CREATURE\", 9: \"CREATURE\", 10: \"CREATURE\", 11: \"CREATURE\", 12: \"CREATURE\"\n};\n\n// UNNATURAL ENTITY subcategories\nconst UNNATURAL_ENTITY_SUBCATEGORIES = {\n  1: \"DIVINE\",\n  2: \"PLANAR\", 3: \"PLANAR\", 4: \"PLANAR\",\n  5: \"UNDEAD\", 6: \"UNDEAD\", 7: \"UNDEAD\", 8: \"UNDEAD\", 9: \"UNDEAD\", 10: \"UNDEAD\", 11: \"UNDEAD\", 12: \"UNDEAD\"\n};\n\nconst DIVINE_ENTITIES = {\n  1: \"agent\", 2: \"agent\", 3: \"agent\", 4: \"agent\", 5: \"agent\",\n  6: \"champion\", 7: \"champion\", 8: \"champion\", 9: \"champion\",\n  10: \"army/force\", 11: \"army/force\",\n  12: \"avatar/embodiment\"\n};\n\nconst PLANAR_ENTITIES = {\n  1: \"imp/sprite\", 2: \"imp/sprite\", 3: \"imp/sprite\",\n  4: \"lesser demon/elemental\", 5: \"lesser demon/elemental\", 6: \"lesser demon/elemental\",\n  7: \"demon/elemental\", 8: \"demon/elemental\", 9: \"demon/elemental\",\n  10: \"greater demon/elemental\", 11: \"greater demon/elemental\",\n  12: \"devil/elemental lord\"\n};\n\nconst UNDEAD_ENTITIES = {\n  1: \"haunt/wisp\", 2: \"haunt/wisp\", 3: \"haunt/wisp\", 4: \"haunt/wisp\",\n  5: \"phantom/shadow\", 6: \"phantom/shadow\",\n  7: \"ghost/specter\", 8: \"ghost/specter\", 9: \"ghost/specter\",\n  10: \"wight/wraith/revenant\", 11: \"wight/wraith/revenant\",\n  12: \"spirit lord/lich\"\n};\n\n// HAZARD subcategories\nconst HAZARD_SUBCATEGORIES = {\n  1: \"UNNATURAL\", 2: \"UNNATURAL\",\n  3: \"NATURAL\", 4: \"NATURAL\", 5: \"NATURAL\", 6: \"NATURAL\", 7: \"NATURAL\", 8: \"NATURAL\", 9: \"NATURAL\", 10: \"NATURAL\", 11: \"NATURAL\", 12: \"NATURAL\"\n};\n\nconst UNNATURAL_HAZARDS = {\n  1: \"taint/blight/curse\", 2: \"taint/blight/curse\", 3: \"taint/blight/curse\", 4: \"taint/blight/curse\", 5: \"taint/blight/curse\",\n  6: \"magical: unnatural + magic type [p55]\", 7: \"magical: unnatural + magic type [p55]\", 8: \"magical: unnatural + magic type [p55]\", 9: \"magical: unnatural + magic type [p55]\",\n  10: \"planar: natural + element [p55]\", 11: \"planar: natural + element [p55]\",\n  12: \"divine: natural + deity\"\n};\n\nconst NATURAL_HAZARDS = {\n  1: \"oddity-based [p55]\",\n  2: \"tectonic/volcanic\",\n  3: \"unseen pitfall (chasm, crevasse, abyss, rift)\", 4: \"unseen pitfall (chasm, crevasse, abyss, rift)\",\n  5: \"ensnaring (bog, mire, tarpit, quicksand, etc.)\", 6: \"ensnaring (bog, mire, tarpit, quicksand, etc.)\",\n  7: \"defensive (created by local creature)\",\n  8: \"meteorological (blizzard, thunderstorm, sandstorm, etc.)\", 9: \"meteorological (blizzard, thunderstorm, sandstorm, etc.)\", 10: \"meteorological (blizzard, thunderstorm, sandstorm, etc.)\",\n  11: \"seasonal (fire, flood, avalanche, etc.)\",\n  12: \"impairing (mist, fog, murk, gloom, miasma, etc.)\"\n};\n\n// CREATURE subcategories\nconst CREATURE_SUBCATEGORIES = {\n  1: \"MONSTER\", 2: \"MONSTER\", 3: \"MONSTER\", 4: \"MONSTER\",\n  5: \"BEAST\", 6: \"BEAST\", 7: \"BEAST\", 8: \"BEAST\", 9: \"BEAST\", 10: \"BEAST\",\n  11: \"HUMANOID\", 12: \"HUMANOID\"\n};\n\n// MONSTER subcategories\nconst MONSTER_SUBCATEGORIES = {\n  1: \"EXTRAPLANAR\",\n  2: \"LEGENDARY\",\n  3: \"UNDEAD\", 4: \"UNDEAD\", 5: \"UNDEAD\",\n  6: \"UNUSUAL\", 7: \"UNUSUAL\",\n  8: \"BEASTLY\", 9: \"BEASTLY\",\n  10: \"WILD HUMANOID\", 11: \"WILD HUMANOID\", 12: \"WILD HUMANOID\"\n};\n\nconst EXTRAPLANAR_MONSTERS = {\n  1: \"divine/demonic lord\",\n  2: \"angel/demon\",\n  3: \"cherub/imp\", 4: \"cherub/imp\", 5: \"cherub/imp\",\n  6: \"elemental [p55]\", 7: \"elemental [p55]\", 8: \"elemental [p55]\", 9: \"elemental [p55]\", 10: \"elemental [p55]\", 11: \"elemental [p55]\", 12: \"elemental [p55]\"\n};\n\nconst LEGENDARY_MONSTERS = {\n  1: \"huge + oddity [p55]\",\n  2: \"dragon/giant + beast\",\n  3: \"dragon/giant\", 4: \"dragon/giant\",\n  5: \"beast + huge\", 6: \"beast + huge\", 7: \"beast + huge\", 8: \"beast + huge\", 9: \"beast + huge\", 10: \"beast + huge\", 11: \"beast + huge\", 12: \"beast + huge\"\n};\n\nconst UNDEAD_MONSTERS = {\n  1: \"lich/vampire/mummy\",\n  2: \"wight/wraith\",\n  3: \"wisp/ghost/specter\", 4: \"wisp/ghost/specter\",\n  5: \"skeleton/zombie/ghoul\", 6: \"skeleton/zombie/ghoul\", 7: \"skeleton/zombie/ghoul\", 8: \"skeleton/zombie/ghoul\", 9: \"skeleton/zombie/ghoul\", 10: \"skeleton/zombie/ghoul\", 11: \"skeleton/zombie/ghoul\", 12: \"skeleton/zombie/ghoul\"\n};\n\nconst UNUSUAL_MONSTERS = {\n  1: \"slime/ooze/jelly\", 2: \"slime/ooze/jelly\", 3: \"slime/ooze/jelly\", 4: \"slime/ooze/jelly\",\n  5: \"plant/fungus/parasite\", 6: \"plant/fungus/parasite\", 7: \"plant/fungus/parasite\", 8: \"plant/fungus/parasite\",\n  9: \"golem/homunculus\", 10: \"golem/homunculus\",\n  11: \"fey/fairy\", 12: \"fey/fairy\"\n};\n\nconst BEASTLY_MONSTERS = {\n  1: \"beast + aberrance [p54]\",\n  2: \"beast + element [p55]\",\n  3: \"beast + oddity [p55]\",\n  4: \"beast + ability [p54]\", 5: \"beast + ability [p54]\", 6: \"beast + ability [p54]\", 7: \"beast + ability [p54]\",\n  8: \"beast + beast\", 9: \"beast + beast\", 10: \"beast + beast\", 11: \"beast + beast\", 12: \"beast + beast\"\n};\n\nconst WILD_HUMANOID_MONSTERS = {\n  1: \"ogre/troll/giant\",\n  2: \"orc/hobgoblin/gnoll\", 3: \"orc/hobgoblin/gnoll\", 4: \"orc/hobgoblin/gnoll\", 5: \"orc/hobgoblin/gnoll\",\n  6: \"goblin/kobold\", 7: \"goblin/kobold\", 8: \"goblin/kobold\", 9: \"goblin/kobold\",\n  10: \"humanoid + oddity [p55]\",\n  11: \"human + beast\", 12: \"human + beast\"\n};\n\n// BEAST subcategories\nconst BEAST_SUBCATEGORIES = {\n  1: \"WATER-GOING\", 2: \"WATER-GOING\",\n  3: \"AIRBORNE\", 4: \"AIRBORNE\", 5: \"AIRBORNE\",\n  6: \"EARTHBOUND\", 7: \"EARTHBOUND\", 8: \"EARTHBOUND\", 9: \"EARTHBOUND\", 10: \"EARTHBOUND\", 11: \"EARTHBOUND\", 12: \"EARTHBOUND\"\n};\n\nconst WATER_GOING_BEASTS = {\n  1: \"whale\",\n  2: \"squid/octopus\",\n  3: \"dolphin/shark\",\n  4: \"alligator/crocodile\",\n  5: \"turtle\",\n  6: \"fish\",\n  7: \"crab/lobster\",\n  8: \"frog/toad\",\n  9: \"eel/snake\",\n  10: \"clam/oyster/snail\",\n  11: \"jelly/anemone\",\n  12: \"insect\"\n};\n\nconst AIRBORNE_BEASTS = {\n  1: \"pteranodon\",\n  2: \"condor\",\n  3: \"eagle/owl\",\n  4: \"hawk/falcon\",\n  5: \"heron/crane/stork\",\n  6: \"crow/raven\",\n  7: \"gull/waterbird\",\n  8: \"songbird/parrot\",\n  9: \"chicken/duck/goose\",\n  10: \"bee/wasp\",\n  11: \"locust/dragonfly/moth\",\n  12: \"mosquito/gnat/firefly\"\n};\n\nconst EARTHBOUND_BEASTS = {\n  1: \"mammoth/dinosaur\",\n  2: \"ox/rhino\",\n  3: \"bear/ape/gorilla\",\n  4: \"deer/horse/camel\",\n  5: \"cat/lion/panther\",\n  6: \"boar/pig\",\n  7: \"dog/fox/wolf\",\n  8: \"vole/rat/weasel\",\n  9: \"snake/lizard\",\n  10: \"ant/centipede/scorpion\",\n  11: \"snail/slug/worm\",\n  12: \"termite/tick/louse\"\n};\n\n// HUMANOID subcategories\nconst HUMANOID_SUBCATEGORIES = {\n  1: \"RARE\",\n  2: \"UNCOMMON\", 3: \"UNCOMMON\", 4: \"UNCOMMON\", 5: \"UNCOMMON\",\n  6: \"COMMON\", 7: \"COMMON\", 8: \"COMMON\", 9: \"COMMON\", 10: \"COMMON\", 11: \"COMMON\", 12: \"COMMON\"\n};\n\nconst RARE_HUMANOIDS = {\n  1: \"elf\", 2: \"elf\", 3: \"elf\", 4: \"elf\", 5: \"elf\", 6: \"elf\", 7: \"elf\", 8: \"elf\", 9: \"elf\", 10: \"elf\", 11: \"elf\", 12: \"elf\"\n};\n\nconst UNCOMMON_HUMANOIDS = {\n  1: \"human + beast\", 2: \"human + beast\", 3: \"human + beast\",\n  4: \"dwarf\", 5: \"dwarf\", 6: \"dwarf\", 7: \"dwarf\",\n  8: \"halfling\", 9: \"halfling\", 10: \"halfling\", 11: \"halfling\", 12: \"halfling\"\n};\n\nconst COMMON_HUMANOIDS = {\n  1: \"mixed\", 2: \"mixed\", 3: \"mixed\",\n  4: \"human\", 5: \"human\", 6: \"human\", 7: \"human\", 8: \"human\", 9: \"human\", 10: \"human\", 11: \"human\", 12: \"human\"\n};\n\nexport interface DangerResult {\n  category: string;\n  subcategory: string;\n  specificResult: string;\n  rolls: {\n    categoryRoll: number;\n    subcategoryRoll: number;\n    specificRoll: number;\n  };\n}\n\nexport interface DangerGenerationResult {\n  success: boolean;\n  dangers?: DangerResult[];\n  count?: number;\n  error?: string;\n}\n\n/**\n * Roll a 1d12\n */\nfunction rollD12(): number {\n  return Math.floor(Math.random() * 12) + 1;\n}\n\n/**\n * Generate a single danger using the 3-roll system\n */\nexport function generateSingleDanger(): DangerResult {\n  // Roll 1: Category\n  const categoryRoll = rollD12();\n  const category = MAIN_CATEGORIES[categoryRoll as keyof typeof MAIN_CATEGORIES];\n\n  // Roll 2: Subcategory\n  const subcategoryRoll = rollD12();\n  let subcategory: string;\n  \n  if (category === \"UNNATURAL ENTITY\") {\n    subcategory = UNNATURAL_ENTITY_SUBCATEGORIES[subcategoryRoll as keyof typeof UNNATURAL_ENTITY_SUBCATEGORIES];\n  } else if (category === \"HAZARD\") {\n    subcategory = HAZARD_SUBCATEGORIES[subcategoryRoll as keyof typeof HAZARD_SUBCATEGORIES];\n  } else { // CREATURE\n    subcategory = CREATURE_SUBCATEGORIES[subcategoryRoll as keyof typeof CREATURE_SUBCATEGORIES];\n    \n    // For MONSTER, we need another subcategory roll\n    if (subcategory === \"MONSTER\") {\n      const monsterSubcategoryRoll = rollD12();\n      subcategory = MONSTER_SUBCATEGORIES[monsterSubcategoryRoll as keyof typeof MONSTER_SUBCATEGORIES];\n    }\n    \n    // For BEAST, we need another subcategory roll\n    if (subcategory === \"BEAST\") {\n      const beastSubcategoryRoll = rollD12();\n      subcategory = BEAST_SUBCATEGORIES[beastSubcategoryRoll as keyof typeof BEAST_SUBCATEGORIES];\n    }\n    \n    // For HUMANOID, we need another subcategory roll\n    if (subcategory === \"HUMANOID\") {\n      const humanoidSubcategoryRoll = rollD12();\n      subcategory = HUMANOID_SUBCATEGORIES[humanoidSubcategoryRoll as keyof typeof HUMANOID_SUBCATEGORIES];\n    }\n  }\n\n  // Roll 3: Specific result\n  const specificRoll = rollD12();\n  let specificResult: string;\n\n  // Determine specific result based on category and subcategory\n  if (category === \"UNNATURAL ENTITY\") {\n    if (subcategory === \"DIVINE\") {\n      specificResult = DIVINE_ENTITIES[specificRoll as keyof typeof DIVINE_ENTITIES];\n    } else if (subcategory === \"PLANAR\") {\n      specificResult = PLANAR_ENTITIES[specificRoll as keyof typeof PLANAR_ENTITIES];\n    } else { // UNDEAD\n      specificResult = UNDEAD_ENTITIES[specificRoll as keyof typeof UNDEAD_ENTITIES];\n    }\n  } else if (category === \"HAZARD\") {\n    if (subcategory === \"UNNATURAL\") {\n      specificResult = UNNATURAL_HAZARDS[specificRoll as keyof typeof UNNATURAL_HAZARDS];\n    } else { // NATURAL\n      specificResult = NATURAL_HAZARDS[specificRoll as keyof typeof NATURAL_HAZARDS];\n    }\n  } else { // CREATURE\n    if (subcategory === \"EXTRAPLANAR\") {\n      specificResult = EXTRAPLANAR_MONSTERS[specificRoll as keyof typeof EXTRAPLANAR_MONSTERS];\n    } else if (subcategory === \"LEGENDARY\") {\n      specificResult = LEGENDARY_MONSTERS[specificRoll as keyof typeof LEGENDARY_MONSTERS];\n    } else if (subcategory === \"UNDEAD\") {\n      specificResult = UNDEAD_MONSTERS[specificRoll as keyof typeof UNDEAD_MONSTERS];\n    } else if (subcategory === \"UNUSUAL\") {\n      specificResult = UNUSUAL_MONSTERS[specificRoll as keyof typeof UNUSUAL_MONSTERS];\n    } else if (subcategory === \"BEASTLY\") {\n      specificResult = BEASTLY_MONSTERS[specificRoll as keyof typeof BEASTLY_MONSTERS];\n    } else if (subcategory === \"WILD HUMANOID\") {\n      specificResult = WILD_HUMANOID_MONSTERS[specificRoll as keyof typeof WILD_HUMANOID_MONSTERS];\n    } else if (subcategory === \"WATER-GOING\") {\n      specificResult = WATER_GOING_BEASTS[specificRoll as keyof typeof WATER_GOING_BEASTS];\n    } else if (subcategory === \"AIRBORNE\") {\n      specificResult = AIRBORNE_BEASTS[specificRoll as keyof typeof AIRBORNE_BEASTS];\n    } else if (subcategory === \"EARTHBOUND\") {\n      specificResult = EARTHBOUND_BEASTS[specificRoll as keyof typeof EARTHBOUND_BEASTS];\n    } else if (subcategory === \"RARE\") {\n      specificResult = RARE_HUMANOIDS[specificRoll as keyof typeof RARE_HUMANOIDS];\n    } else if (subcategory === \"UNCOMMON\") {\n      specificResult = UNCOMMON_HUMANOIDS[specificRoll as keyof typeof UNCOMMON_HUMANOIDS];\n    } else { // COMMON\n      specificResult = COMMON_HUMANOIDS[specificRoll as keyof typeof COMMON_HUMANOIDS];\n    }\n  }\n\n  return {\n    category,\n    subcategory,\n    specificResult,\n    rolls: {\n      categoryRoll,\n      subcategoryRoll,\n      specificRoll\n    }\n  };\n}\n\n/**\n * Generate multiple dangers\n */\nexport function generateDangers(numDangers: number = 1): DangerGenerationResult {\n  try {\n    if (numDangers < 1 || numDangers > 10) {\n      return {\n        success: false,\n        error: \"Number of dangers must be between 1 and 10\",\n      };\n    }\n\n    const dangers: DangerResult[] = [];\n\n    for (let i = 0; i < numDangers; i++) {\n      dangers.push(generateSingleDanger());\n    }\n\n    return {\n      success: true,\n      dangers,\n      count: dangers.length,\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"Unexpected error occurred\",\n    };\n  }\n}\n","import { Request, Response } from \"express\";\nimport { generateDangers } from \"../lib/danger-generator.js\";\nimport Anthropic from \"@anthropic-ai/sdk\";\nimport { getGlobalNarrativeRestrictions } from \"../lib/llm-instructions.js\";\n\nconst anthropic = new Anthropic({\n  apiKey: process.env.ANTHROPIC_API_KEY ?? \"\",\n});\n\n// Generate dangers based on count\nexport function generateDangersRoute(req: Request, res: Response) {\n  try {\n    const { numDangers = 1 } = req.body;\n\n    if (typeof numDangers !== 'number' || numDangers < 1 || numDangers > 10) {\n      return res.status(400).json({\n        success: false,\n        error: \"Number of dangers must be between 1 and 10\",\n      });\n    }\n\n    const result = generateDangers(numDangers);\n\n    res.json(result);\n  } catch (error) {\n    console.error(\"Error generating dangers:\", error);\n    res.status(500).json({\n      success: false,\n      error: \"Failed to generate dangers\",\n    });\n  }\n}\n\n// Generate narrative for a danger\nexport async function generateDangerNarrativeRoute(req: Request, res: Response) {\n  try {\n    const { danger } = req.body;\n\n    if (!danger || !danger.category || !danger.subcategory || !danger.specificResult) {\n      return res.status(400).json({\n        success: false,\n        error: \"Invalid danger data provided\",\n      });\n    }\n\n    const prompt = `Create a compelling narrative description for this danger based on the three randomly generated parameters:\n\nCategory: ${danger.category}\nSubcategory: ${danger.subcategory}\nSpecific Result: ${danger.specificResult}\nDice Rolls: ${danger.rolls.categoryRoll}, ${danger.rolls.subcategoryRoll}, ${danger.rolls.specificRoll}\n\nPlease create a detailed narrative that:\n1. Combines all three parameters into a coherent, threatening scenario\n2. Describes what characters would encounter, see, hear, or experience\n3. Explains the immediate danger and potential consequences\n4. Provides atmospheric details that help set the scene\n5. Suggests how the danger might unfold or escalate\n6. If any parameters seem contradictory, creatively interpret them to work together\n\nWrite this as 2-3 paragraphs that a Game Master could read aloud or use as inspiration when presenting this danger to players. Focus on vivid descriptions, immediate threats, and narrative hooks that create tension and excitement.\n\n${getGlobalNarrativeRestrictions()}\n\nThen, in a separate section below the description, add:\n\n**GM Notes:** Include any tactical suggestions, potential outcomes, or ways to modify the encounter based on party level and composition.`;\n\n    const response = await anthropic.messages.create({\n      model: \"claude-3-5-sonnet-20241022\",\n      max_tokens: 1000,\n      messages: [{\n        role: \"user\",\n        content: prompt\n      }]\n    });\n\n    const narrative = response.content[0].type === \"text\" ? response.content[0].text : \"Failed to generate narrative\";\n\n    res.json({\n      success: true,\n      narrative: narrative,\n    });\n  } catch (error) {\n    console.error(\"Error generating danger narrative:\", error);\n    res.status(500).json({\n      success: false,\n      error: \"Failed to generate danger narrative\",\n    });\n  }\n}\n","import express from \"express\";\nimport cors from \"cors\";\nimport { handleDemo } from \"./routes/demo\";\nimport { handleAIChat } from \"./routes/ai-chat\";\nimport { generateAdventure } from \"./routes/adventure-generator\";\nimport { generateScene } from \"./routes/scene-generator\";\nimport { rollFateChart } from \"./routes/mythic-fate\";\nimport { rollMeaningTable, rollDescriptorTable } from \"./routes/mythic-meaning\";\nimport { getSessionData } from \"./routes/session-data\";\nimport { getCreatureTypes } from \"./routes/creature-types\";\nimport {\n  generateHexMapEndpoint,\n  getHexMapTerrains,\n  testHexMap,\n} from \"./routes/hex-map-generator\";\nimport {\n  generateCompleteNPC,\n  generateNPCStepRoute,\n  generateNPCNarrative,\n} from \"./routes/npc-generator\";\nimport {\n  generateCompleteSteading,\n  generateSteadingStepRoute,\n  generateSteadingNarrative,\n  getSettlementTypes,\n} from \"./routes/steading-generator\";\nimport { villainGenerator } from \"./routes/villain-generator\";\nimport { generateNamesRoute, getAlignmentOptionsRoute } from \"./routes/name-generator\";\nimport { generateCursesRoute, getCurseCountRoute, getCurseCategoriesRoute } from \"./routes/curse-generator\";\nimport { generateDangersRoute, generateDangerNarrativeRoute } from \"./routes/danger-generator\";\n\n// Load environment variables if .env file exists\nif (process.env.NODE_ENV !== \"production\") {\n  try {\n    require(\"dotenv\").config();\n  } catch {\n    // dotenv not available, continue without it\n  }\n}\n\nexport function createServer() {\n  const app = express();\n\n  // Middleware\n  app.use(cors());\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n\n  // Example API routes\n  app.get(\"/api/ping\", (_req, res) => {\n    res.json({ message: \"Hello from Express server v2!\" });\n  });\n\n  app.get(\"/api/demo\", handleDemo);\n  app.post(\"/api/ai-chat\", handleAIChat);\n  app.post(\"/api/generate-adventure\", generateAdventure);\n  app.post(\"/api/generate-scene\", generateScene);\n  app.post(\"/api/roll-fate\", rollFateChart);\n  app.post(\"/api/roll-meaning\", rollMeaningTable);\n  app.post(\"/api/roll-descriptor\", rollDescriptorTable);\n  app.post(\"/api/get-session-data\", getSessionData);\n  app.get(\"/api/creature-types\", getCreatureTypes);\n  app.post(\"/api/generate-hex-map\", generateHexMapEndpoint);\n  app.get(\"/api/hex-map-terrains\", getHexMapTerrains);\n  app.get(\"/api/test-hex-map\", testHexMap);\n  app.post(\"/api/generate-npc\", generateCompleteNPC);\n  app.post(\"/api/generate-npc-step\", generateNPCStepRoute);\n  app.post(\"/api/generate-npc-narrative\", generateNPCNarrative);\n\n  // Steading generator routes\n  app.post(\"/api/generate-steading\", generateCompleteSteading);\n  app.post(\"/api/generate-steading-step\", generateSteadingStepRoute);\n  app.post(\"/api/generate-steading-narrative\", generateSteadingNarrative);\n  app.get(\"/api/settlement-types\", getSettlementTypes);\n\n  // Villain generator routes\n  app.post(\"/api/villain-generator\", villainGenerator);\n\n  // Name generator routes\n  app.post(\"/api/generate-names\", generateNamesRoute);\n  app.get(\"/api/alignment-options\", getAlignmentOptionsRoute);\n\n  // Curse generator routes\n  app.post(\"/api/generate-curses\", generateCursesRoute);\n  app.get(\"/api/curse-count\", getCurseCountRoute);\n  app.get(\"/api/curse-categories\", getCurseCategoriesRoute);\n\n  // Danger generator routes\n  app.post(\"/api/generate-dangers\", generateDangersRoute);\n  app.post(\"/api/generate-danger-narrative\", generateDangerNarrativeRoute);\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\nconst app = createServer();\nconst port = process.env.PORT || 3000;\n\n// In production, serve the built SPA files\nconst __dirname = import.meta.dirname;\nconst distPath = path.join(__dirname, \"../spa\");\n\n// Serve static files\napp.use(express.static(distPath));\n\n// Handle React Router - serve index.html for all non-API routes\napp.get(\"*\", (req, res) => {\n  // Don't serve index.html for API routes\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n    return res.status(404).json({ error: \"API endpoint not found\" });\n  }\n\n  res.sendFile(path.join(distPath, \"index.html\"));\n});\n\napp.listen(port, () => {\n  console.log(`🚀 Fusion Starter server running on port ${port}`);\n  console.log(`📱 Frontend: http://localhost:${port}`);\n  console.log(`🔧 API: http://localhost:${port}/api`);\n});\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"🛑 Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"🛑 Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["anthropic","generateNames","generateNamesTS","getLieutenantTypes","getCreatureTypes","hiddenElements","runFateChart","rollFateChart","ACTION_VERB","ACTION_SUBJECT","rollFateChartTS","rollMeaningTable","rollDescriptorTable","rollMeaningTableTS","rollDescriptorTableTS","weights","generateHexMap","getTerrainTypes","generateHexMapTS","getTerrainTypesTS","FIRST_NAMES","attempts","app","express"],"mappings":"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,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAGA,MAAM,cAAc;AAAA;AAAA,EAEliBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAiBO,SAAS,yBAAyC;AAEjD,QAA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CA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEO,MAAM,SAAmB;AAAA,EAC9B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,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"}